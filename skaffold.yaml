apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: swi-k8s-opentelemetry-collector
build:
  artifacts:
    - image: integration-test
      docker:
        dockerfile: build/docker/IntegrationTest.Dockerfile
        buildArgs: 
          CI: "{{ .CI }}"
    - image: test-communicator
      context: tests/deploy/test-communicator
      docker:
        dockerfile: Dockerfile
  local:
    push: false
deploy:
  helm:
    releases:
      - name: timeseries-mock-service
        chartPath: tests/deploy/timeseries-mock-service
        namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
        createNamespace: true
        upgradeOnChange: true
      - name: '{{ env "TEST_CLUSTER_RELEASE_NAME" | default "sut" }}'
        chartPath: deploy/helm
        namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
        createNamespace: true
        setValueTemplates:
          cluster:
            name: '{{ env "CLUSTER_NAME" | default "cluster name" }}'
            uid: '{{ env "CLUSTER_NAME" | default "cluster-uid-123456789" }}'
          otel:
            endpoint: timeseries-mock-service:9082
            tls_insecure: true
            # OTEL collector requires the SOLARWINDS_API_TOKEN env variable to be set to some not empty string
            api_token: '{{ env "SOLARWINDS_API_TOKEN" | default "not_set" }}' 
            node_collector:
              sending_queue:
                persistent_storage:
                  enabled: true
            metrics:
              prometheus_check: false
              sending_queue:
                offload_to_disk: true
              prometheus:
                scrape_interval: "15s"
              kube-state-metrics:
                scrape_interval: "15s"
              control_plane:
                controller_manager:
                  enabled: false
                etcd:
                  enabled: false
              autodiscovery:
                discovery_collector:
                  enabled: true
                prometheusEndpoints: 
                  podMonitors:
                    rules:
                      - rule: labels["app"] == "test-deployment"
                        metrics_path: "/custom_metrics"
                        endpoint_port: 8081
                prefix: ""
              filter_histograms: false
            events:
              sending_queue:
                offload_to_disk: true
            manifests:
              pull_every: 1m
              persistent_storage:
                enabled: false
              keepalive_events:
                pull_every: 10s
            logs:
              # journal on Docker Desktop is not supported
              journal: false
              filter:
                log_record:
                  - resource.attributes["k8s.namespace.name"] == "{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}"
        upgradeOnChange: true
      # Deploy prometheus for development purposes. Metrics prefixed with `output_` contains metrics produced by the agent
      - name: monitoring
        remoteChart: kube-prometheus-stack
        namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
        createNamespace: true
        repo: https://prometheus-community.github.io/helm-charts
        version: 72.5.2
        setValueTemplates:
          alertmanager.enabled: false
          grafana.enabled: false
          nodeExporter.enabled: false
          kubeStateMetrics.enabled: false
          server:
            nodeSelector:
              "kubernetes\\.io\\/os": linux
          # prometheus.prometheusSpec.maximumStartupDurationSeconds: 900 is a workaround for incompatibility between Helm 3.18 and the current version of kube-prometheus-stack
          prometheus.prometheusSpec.maximumStartupDurationSeconds: 900
          prometheus.prometheusSpec.additionalScrapeConfigs:
            - job_name: timeseries-mock-service
              kubernetes_sd_configs:
                - role: pod
                  namespaces:
                    names: ['{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}']
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_label_app]
                  action: keep
                  regex: '^timeseries-mock-service$'
                - source_labels: [__meta_kubernetes_pod_container_port_number]
                  action: keepequal
                  target_label: __meta_kubernetes_pod_annotation_prometheus_io_port
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (.+)
      - name: tests
        chartPath: tests/deploy/tests
        namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
        createNamespace: true
        upgradeOnChange: true
        setValueTemplates:
          podMonitors:
            enabled: true
  kubeContext: docker-desktop
portForward:
- resourceType: service
  resourceName: timeseries-mock-service
  namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
  port: 8088
- resourceType: service
  resourceName: prometheus-operated
  namespace: '{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}'
  port: 9090
  localPort: 8080
profiles:
  - name: build-collector
    patches:
      - op: add
        path: /build/artifacts/-
        value: 
          image: swi-k8s-opentelemetry-collector
          context: ../solarwinds-otel-collector-releases
          docker:
            dockerfile: build/docker/Dockerfile.local
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.repository
        value: "swi-k8s-opentelemetry-collector"
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.tag
        value: "{{.IMAGE_TAG}}"
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.pullPolicy
        value: "Never"
  - name: push
    build:
      local:
        push: true
        useBuildkit: true
        concurrency: 0
    patches:
      - op: replace
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.pullPolicy
        value: "IfNotPresent"
  - name: operator
    activation:
      - env: CI=true
    resourceSelector:
      allow:
        # let skaffold to manager CRDs in local k8s
        - groupKind: "OpenTelemetryCollector.opentelemetry.io"
          image: [".*"]
          labels: [".*"]
        - groupKind: "PodMonitor.monitoring.coreos.com"
          image: [".*"]
          labels: [".*"]
        - groupKind: "ServiceMonitor.monitoring.coreos.com"
          image: [".*"]
          labels: [".*"]
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/operator.enabled
        value: true
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/certmanager.enabled
        value: true
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/prometheusCRDs.install
        value: true
      - op: add
        path: /deploy/helm/hooks
        value:
          before:
            - host:
                command: ["sh", "-c", "./utils/pre-deploy.sh"]
                os: [darwin, linux]
            - host:
                command: ["cmd", "/c", ".\\utils\\pre-deploy.bat || exit 0"]
                os: [windows]
  - name: auto-instrumentation
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/autoinstrumentation.installDefaultCR
        value: true
      - op: add
        path: /deploy/helm/releases/-
        value: 
          name: otel-demo
          remoteChart: opentelemetry-demo
          namespace: otel-demo
          createNamespace: true
          repo: https://open-telemetry.github.io/opentelemetry-helm-charts
          version: 0.37.0
          valuesFiles:
            - tests/deploy/otel-demo/values.yaml
          setValueTemplates:
            default:
              env:
                - name: OTEL_SERVICE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: "metadata.annotations['resource.opentelemetry.io/service.name']"
                - name: OTEL_COLLECTOR_NAME
                  value: swo-gateway.{{ env "TEST_CLUSTER_NAMESPACE" | default "test-namespace" }}.svc.cluster.local
                - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
                  value: cumulative
  - name: no-topology
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/network_topology.enabled
        value: false
  - name: no-logs
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.logs.enabled
        value: false
  - name: no-metrics
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.metrics.enabled
        value: false
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/kube-state-metrics.enabled
        value: false
  - name: no-events
    patches:
      - op: add
        path: /deploy/helm/releases/1/setValueTemplates/otel.events.enabled
        value: false
  - name: no-tests
    patches:
      - op: remove
        path: /deploy/helm/releases/3
      - op: remove
        path: /build/artifacts/0
      - op: remove
        path: /build/artifacts/0
  - name: no-prometheus
    activation:
      - env: CI=true
    patches:
      # remove `monitoring` (Prometheus Operator)
      - op: remove
        path: /deploy/helm/releases/2
      - op: remove
        path: /portForward/1
  - name: swo
    patches:
      - op: remove
        path: /deploy/helm/releases/1/setValueTemplates/otel.tls_insecure
      - op: replace
        path: /deploy/helm/releases/1/setValueTemplates/otel.endpoint
        value: "{{.SOLARWINDS_OTEL_ENDPOINT}}"
  - name: ci
    activation:
      - env: CI=true
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    deploy:
      kubeContext: default
  - name: ci-helm-e2e
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    deploy:
      # `default` is k3s default context name
      kubeContext: default
