apiVersion: skaffold/v3
kind: Config
metadata:
  name: swi-k8s-opentelemetry-collector
build:
  artifacts:
    - image: swi-k8s-opentelemetry-collector
      docker:
        dockerfile: build/docker/Dockerfile
    - image: integration-test
      docker:
        dockerfile: build/docker/IntegrationTest.Dockerfile
    - image: wiremock
      docker:
        dockerfile: build/docker/WireMock.Dockerfile
  local:
    push: false
manifests:
  kustomize:
    paths:
      - tests/deploy/base
      - tests/deploy/tests
    buildArgs:
      - --load-restrictor LoadRestrictionsNone
deploy:
  kubectl: {}
  helm:
    releases:
      - name: swi-k8s-opentelemetry-collector
        chartPath: deploy/helm
        namespace: monitoring
        createNamespace: true
        setValues:
          otel.metrics.swi_endpoint_check: false
          otel.metrics.prometheus_check: false
          otel.endpoint: timeseries-mock-service:9082
          otel.tls_insecure: true
          otel.image.repository: "swi-k8s-opentelemetry-collector"
          otel.image.tag: ""
          otel.metrics.prometheus.autodeploy: true
          otel.metrics.prometheus.scrape_interval: "15s"
          otel.logs.filter.include.record_attributes[0].key: "k8s.namespace.name"
          otel.logs.filter.include.record_attributes[0].value: "^.*$"
          otel.logs.filter.exclude.match_type: "strict"
          otel.logs.filter.exclude.record_attributes[0].key: "k8s.namespace.name"
          otel.logs.filter.exclude.record_attributes[0].value: "monitoring"
          cluster.name: cluster name
          cluster.uid: cluster-uid-123456789
        upgradeOnChange: true
  kubeContext: docker-desktop
portForward:
- resourceType: service
  resourceName: timeseries-mock-service
  namespace: monitoring
  port: 8088
- resourceType: service
  resourceName: swi-k8s-opentelemetry-collector-prometheus-server
  namespace: monitoring
  port: 80
  localPort: 8080
profiles:
  - name: builder-only
    build:
      artifacts:
        - image: swi-k8s-opentelemetry-collector-builder
          docker:
            dockerfile: build/docker/Dockerfile
            target: builder
            buildArgs:
              CREATE_VENDOR_DIR: "true"
      local:
        push: false
  # Useful to develop integration tests - environment is configured to use mocked prometheus metrics
  - name: only-mock
    patches:
    - op: add
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.url
      value: wiremock.monitoring.svc.cluster.local:8080
    - op: replace
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.autodeploy
      value: false
    - op: remove
      path: /portForward/1
  # Useful to develop against remote prometheus instance (mounted locally on host.docker.internal:9090)
  - name: remote-prometheus
    patches:
    - op: add
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.url
      value: host.docker.internal:9090
    - op: replace
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.autodeploy
      value: false
    - op: remove
      path: /portForward/1
  - name: ci
    activation:
      - env: CI=true
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    test:
      - image: swi-k8s-opentelemetry-collector
        structureTests:
          - './build/docker/structure-test.yaml'
    patches:
    - op: add
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.url
      value: wiremock.monitoring.svc.cluster.local:8080
    - op: replace
      path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.autodeploy
      value: false
    - op: remove
      path: /portForward/1
    deploy:
      kubeContext: default
  - name: ci-helm-e2e
    patches:
      - op: remove
        path: /build/artifacts/0
      - op: remove
        path: /deploy/helm/releases/0/setValues/otel.image.repository
      - op: remove
        path: /deploy/helm/releases/0/setValues/otel.image.tag
      - op: add
        path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.url
        value: wiremock.monitoring.svc.cluster.local:8080
      - op: replace
        path: /deploy/helm/releases/0/setValues/otel.metrics.prometheus.autodeploy
        value: false
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    deploy:
      # `default` is k3s default context name
      kubeContext: default
