{{- $resourceMap := dict
    "pods" "Pod"
    "deployments" "Deployment"
    "statefulsets" "StatefulSet"
    "replicasets" "ReplicaSet"
    "daemonsets" "DaemonSet"
    "jobs" "Job"
    "cronjobs" "CronJob"
    "nodes" "Node"
    "services" "Service"
    "persistentvolumes" "PersistentVolume"
    "persistentvolumeclaims" "PersistentVolumeClaim"
    "ingresses" "Ingress"
    "configmaps" "ConfigMap"
    "namespaces" "Namespace"
    "roles" "Role"
    "rolebindings" "RoleBinding"
    "clusterroles" "ClusterRole"
    "clusterrolebindings" "ClusterRoleBinding"
    "serviceaccounts" "ServiceAccount"
    "endpoints" "Endpoints"
    "endpointslices" "EndpointSlice"

}}
{{- if or (.Capabilities.APIVersions.Has "kustomize.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "kustomize.toolkit.fluxcd.io/v1beta2") }}
{{- $_ := set $resourceMap "kustomizations" "Kustomization" }}
{{- end }}
{{- if or (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1beta2") }}
{{- $_ := set $resourceMap "gitrepositories" "GitRepository" }}
{{- end }}
{{- $arrayOfWatchedResources := keys $resourceMap | sortAlpha }}
exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
      "swi-reporter": "k8s-monitoring swo-k8s-collector/{{ .Chart.Version }}"
    retry_on_failure:
      enabled: {{ .Values.otel.events.retry_on_failure.enabled }}
      initial_interval: {{ .Values.otel.events.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.otel.events.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.otel.events.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.otel.events.sending_queue.enabled }}
      num_consumers: {{ .Values.otel.events.sending_queue.num_consumers }}
      queue_size: {{ .Values.otel.events.sending_queue.queue_size }}
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
      storage: file_storage/sending_queue
{{- end }}
    timeout: {{ .Values.otel.events.timeout }}

extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
  file_storage/sending_queue:
    directory: /var/lib/swo/sending_queue
    fsync: true
{{- end }}
{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.persistent_storage.enabled }}
  file_storage/manifests:
    directory: /var/lib/swo/manifests
    fsync: true
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133
{{- if .Values.diagnostics.profiling.enabled }}
  pprof:
    endpoint: localhost:{{ .Values.diagnostics.profiling.port }}
{{- end }}

connectors:
{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.keepalive_events.enabled }}
  solarwindsentity/keepalive:
    schema:
      entities:
        - entity: KubernetesConfigMap
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.configmap.name
        - entity: KubernetesContainer
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.container.name
        - entity: KubernetesCronJob
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.cronjob.name
        - entity: KubernetesDaemonSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.daemonset.name
        - entity: KubernetesDeployment
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.deployment.name
        - entity: KubernetesIngress
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.ingress.name
        - entity: KubernetesJob
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.job.name
        - entity: KubernetesNode
          id:
            - sw.k8s.cluster.uid
            - k8s.node.name
        - entity: KubernetesPersistentVolume
          id:
            - sw.k8s.cluster.uid
            - k8s.persistentvolume.name
        - entity: KubernetesPersistentVolumeClaim
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.persistentvolumeclaim.name
        - entity: KubernetesPod
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.pod.name
        - entity: KubernetesReplicaSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.replicaset.name
        - entity: KubernetesService
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.service.name
        - entity: KubernetesStatefulSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.statefulset.name
        - entity: KubernetesGitRepository
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.gitrepository.name
        - entity: KubernetesKustomization
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.kustomization.name
{{- end }}
  solarwindsentity/serviceendpointsmapping:
    source_prefix: "source."
    destination_prefix: "dest."
    schema:
      entities:
        - entity: KubernetesService
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.service.name
        - entity: KubernetesDaemonSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.daemonset.name
        - entity: KubernetesDeployment
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.deployment.name
        - entity: KubernetesStatefulSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.statefulset.name
        - entity: KubernetesReplicaSet
          id:
            - sw.k8s.cluster.uid
            - k8s.namespace.name
            - k8s.replicaset.name
      events:
        relationships:
          - type: KubernetesServiceRoutesTo
            source_entity: KubernetesService
            destination_entity: KubernetesDaemonSet
            conditions: []
            context: "log"
            attributes: []
            action: "update"
          - type: KubernetesServiceRoutesTo
            source_entity: KubernetesService
            destination_entity: KubernetesDeployment
            conditions: []
            context: "log"
            attributes: []
            action: "update"
          - type: KubernetesServiceRoutesTo
            source_entity: KubernetesService
            destination_entity: KubernetesStatefulSet
            conditions: []
            context: "log"
            attributes: []
            action: "update"
          - type: KubernetesServiceRoutesTo
            source_entity: KubernetesService
            destination_entity: KubernetesReplicaSet
            conditions: []
            context: "log"
            attributes: []
            action: "update"

  routing/manifests:
    default_pipelines: [logs/manifests-export]
    table:
      - context: resource
        pipelines:
          - logs/serviceendpointsmapping
        condition: |
          attributes["sw.k8s.log.type"] == "serviceendpointsmapping"

  forward/exportserviceendpointsmapping: {}

processors:
  k8seventgeneration:
  memory_limiter:
{{ toYaml .Values.otel.events.memory_limiter | indent 4 }}

{{- if .Values.otel.events.filter }}
  filter:
    logs:
{{ toYaml .Values.otel.events.filter | indent 6 }}
{{- end }}
{{- if .Values.otel.manifests.filter }}
  filter/manifests:
    logs:
{{ toYaml .Values.otel.manifests.filter | indent 6 }}
{{- end }}

{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
  filter/namespaces:
    logs:
      log_record:
{{- include "namespacesFilter" . | nindent 8 }}      
{{- end }}
  groupbyattrs/workloadstatus:
    keys:
      - sw.k8s.deployment.status
      - sw.k8s.statefulset.status
      - sw.k8s.daemonset.status
  swok8sworkloadstatus:
  transform/severity:
    log_statements:
      - statements:
          - set(log.severity_text, "Error") where
{{ include "common.events-error-conditions" . | indent 16}}
          - set(log.severity_number, 17) where
{{ include "common.events-error-conditions" . | indent 16}}

          - set(log.severity_text, "Warning") where
{{ include "common.events-warning-conditions" . | indent 16}}
          - set(log.severity_number, 13) where
{{ include "common.events-warning-conditions" . | indent 16}}
  transform/namespace:
    log_statements:
      - statements:
          - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s")
  transform/entity_attributes:
    log_statements:
      - statements:
          # do not create/update endities from events
          - set(resource.attributes["sw.entity.noupdate"], "true")

          - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Pod"
          - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Deployment"
          - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "StatefulSet"
          - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "ReplicaSet"
          - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "DaemonSet"
          - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Job"
          - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "CronJob"
          - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Node"
          - set(resource.attributes["k8s.gitrepository.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "GitRepository"
          - set(resource.attributes["k8s.kustomization.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Kustomization"
          - set(resource.attributes["k8s.namespace.name"], log.attributes["k8s.namespace.name"]) where log.attributes["k8s.namespace.name"] != nil
          - delete_key(log.attributes, "k8s.namespace.name") where log.attributes["k8s.namespace.name"] != nil

  transform/stringify_body:
    error_mode: ignore
    log_statements:
      - statements:
          # convert body to string
          - set(log.body, log.body.string)

  transform/extract_resource_attrs_from_manifests:
    error_mode: ignore
    log_statements:
      - conditions:
          - log.body["kind"] == "Pod"
        statements:
          - set(resource.attributes["sw.k8s.pod.status"], log.body["status"]["phase"]) where log.body["status"]["phase"] != nil
      - conditions:
          - log.body["kind"] == "CronJob"
        statements:
          - set(resource.attributes["sw.k8s.cronjob.suspended"], log.body["spec"]["suspend"]) where log.body["spec"]["suspend"] != nil
          - set(resource.attributes["sw.k8s.cronjob.schedule"], log.body["spec"]["schedule"]) where log.body["spec"]["schedule"] != nil
          - set(resource.attributes["sw.k8s.cronjob.concurrencypolicy"], log.body["spec"]["concurrencyPolicy"]) where log.body["spec"]["concurrencyPolicy"] != nil
          - set(resource.attributes["sw.k8s.cronjob.failedjobshistorylimit"], log.body["spec"]["failedJobsHistoryLimit"]) where log.body["spec"]["failedJobsHistoryLimit"] != nil
          - set(resource.attributes["sw.k8s.cronjob.successfuljobshistorylimit"], log.body["spec"]["successfulJobsHistoryLimit"]) where log.body["spec"]["successfulJobsHistoryLimit"] != nil
          - set(resource.attributes["sw.k8s.cronjob.active"], Len(log.body["status"]["active"])) where log.body["status"]["active"] != nil
          - set(resource.attributes["sw.k8s.cronjob.active"], 0) where log.body["status"]["active"] == nil
      - conditions:
          - log.body["kind"] == "Service"
        statements:
          - set(resource.attributes["sw.k8s.service.type"], log.body["spec"]["type"]) where log.body["spec"]["type"] != nil

  transform/set_labels_and_annotations_for_entities:
    error_mode: ignore
    log_statements:
      - statements:
          # assign entity prefix k8s.entity.annotations.*
{{- $conditions := list }}
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $condition := printf `log.body["kind"] == "%s"` $resourceKind }}
      {{- $conditions = append $conditions $condition }}
{{- end }}
{{- $joinedConditions := join " or " $conditions }}
          - set(log.cache["annotations"], log.body["metadata"]["annotations"]) where {{ $joinedConditions }}
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
          - flatten(log.cache["annotations"], "k8s.{{ $prefix }}.annotations") where log.body["kind"] == "{{ $resourceKind }}" and log.cache["annotations"] != nil
{{- end }}
          # Set annotations to resource attributes
          - merge_maps(resource.attributes, log.cache["annotations"], "upsert") where ({{ $joinedConditions }}) and log.cache["annotations"] != nil

          # assign entity prefix k8s.entity.labels.*
          - set(log.cache["labels"], log.body["metadata"]["labels"]) where {{ $joinedConditions }}

{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
          - flatten(log.cache["labels"], "k8s.{{ $prefix }}.labels") where log.body["kind"] == "{{ $resourceKind }}" and log.cache["labels"] != nil
{{- end }}
          
          # Set labels to resource attributes
          - merge_maps(resource.attributes, log.cache["labels"], "upsert") where ({{ $joinedConditions }}) and log.cache["labels"] != nil
  filter/k8s_collector_config_include:
    error_mode: ignore
    logs:
      log_record:
        - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"] != "values-config-map"

  transform/manifest:
      error_mode: ignore
      log_statements:
        - statements:
            # set event namespace where it will be stored in SWO.
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            
            # Add new attribute `watch-type` with type of the change - "ADDED", "MODIFIED", "DELETED"
            - set(log.attributes["watch.type"], log.body["type"]) where IsMap(log.body) and log.body["type"] != nil

            # in watch mode body has `object` attribute with the manifest, in pull mode body is the manifest
            # flaten body structure to have only raw manifest in body in all the cases
            - set(log.body, log.body["object"]) where IsMap(log.body) and log.body["object"] != nil

            # set attributes for the resource
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
            - set(log.attributes["k8s.{{$prefix}}.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"] != nil and log.body["kind"] == "{{$resourceKind}}"
{{- end }}
            # rename k8s.endpoints.name to k8s.endpoint.name if exists
            - set(log.attributes["k8s.endpoint.name"], log.attributes["k8s.endpoints.name"]) where log.attributes["k8s.endpoints.name"] != nil
            - delete_key(log.attributes, "k8s.endpoints.name") where log.attributes["k8s.endpoints.name"] != nil

            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["namespace"])
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["sw.k8s.ingress.type"], log.body["kind"]) where log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["k8s.object.kind"], log.body["kind"]) where log.body["kind"] != nil
            - set(log.attributes["k8s.object.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"] != nil

            # There are some attributes added by k8sobjects receiver, SWO do not need them so removing it
            - delete_key(log.attributes, "k8s.resource.name")
            - delete_key(log.attributes, "event.name")
            - delete_key(log.attributes, "event.domain")

  groupbyattrs/serviceendpointsmapping:
    keys:
      - sw.k8s.cluster.uid
      - sw.k8s.workload.ip
      - k8s.service.name
      - k8s.namespace.name

  transform/serviceendpointsmapping-renamepodip:
    error_mode: ignore
    log_statements:
      - statements:
          - set(resource.attributes["k8s.pod.ip"], resource.attributes["sw.k8s.workload.ip"]) where resource.attributes["sw.k8s.log.type"] == "serviceendpointsmapping" and resource.attributes["sw.k8s.workload.ip"] != nil

  transform/serviceendpointsmapping:
    error_mode: ignore
    log_statements:
      - statements:
          - set(resource.attributes["source.k8s.service.name"], resource.attributes["k8s.service.name"]) where resource.attributes["k8s.service.name"] != nil
          - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["k8s.namespace.name"]) where resource.attributes["k8s.namespace.name"] != nil
          
          - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["k8s.namespace.name"]) where resource.attributes["k8s.namespace.name"] != nil
          - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["k8s.deployment.name"]) where resource.attributes["k8s.deployment.name"] != nil
          - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["k8s.statefulset.name"]) where resource.attributes["k8s.statefulset.name"] != nil
          - set(resource.attributes["dest.k8s.replicaset.name"], resource.attributes["k8s.replicaset.name"]) where resource.attributes["k8s.replicaset.name"] != nil
          - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["k8s.daemonset.name"]) where resource.attributes["k8s.daemonset.name"] != nil

  transform/scope:
    log_statements:
      - statements:
        - set(scope.name, "")
        - set(scope.version, "")
  groupbyattrs/manifest:
    keys:
      - k8s.pod.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.replicaset.name
      - k8s.daemonset.name
      - k8s.job.name
      - k8s.cronjob.name
      - k8s.node.name
      - k8s.namespace.name
      - k8s.service.name
      - k8s.persistentvolume.name
      - k8s.persistentvolumeclaim.name
      - k8s.ingress.name
      - sw.k8s.ingress.type
      - k8s.configmap.name
      - k8s.role.name
      - k8s.rolebinding.name
      - k8s.clusterrole.name
      - k8s.clusterrolebinding.name
      - k8s.serviceaccount.name
      - k8s.endpoint.name
      - k8s.endpointslice.name
{{- if or (.Capabilities.APIVersions.Has "kustomize.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "kustomize.toolkit.fluxcd.io/v1beta2") }}
      - k8s.kustomization.name
{{- end }}
{{- if or (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1beta2") }}
      - k8s.gitrepository.name
{{- end }}

  resource/events:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: event
        action: insert

  resource/manifest:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: manifest
        action: insert

  resourcedetection/providers:
    timeout: 2s
    override: false
{{- if not .Values.openshift.enabled }}
    detectors: 
      - ec2
      - azure
      - gcp
    azure:
      # keep: cloud.account.id, cloud.platform, cloud.provider, cloud.region, azure.resourcegroup.name
      resource_attributes:
        azure.vm.name:
          enabled: false
        azure.vm.scaleset.name:
          enabled: false
        azure.vm.size:
          enabled: false
        host.id:
          enabled: false
        host.name:
          enabled: false  
    ec2:
      # keep: cloud.account.id, cloud.platform, cloud.provider, cloud.region
      resource_attributes:
        cloud.availability_zone:
          enabled: false
        host.id:
          enabled: false
        host.image.id:
          enabled: false
        host.name:
          enabled: false
        host.type:
          enabled: false
    gcp:
      # keep: cloud.account.id, cloud.platform, cloud.provider, cloud.region
      resource_attributes:
        cloud.availability_zone:
          enabled: false
        host.id:
          enabled: false
        host.name:
          enabled: false
        host.type:
          enabled: false
        gcp.gce.instance.hostname:
          enabled: false
        gcp.gce.instance.name:
          enabled: false
        k8s.cluster.name:
          enabled: false
{{- else }}
    detectors:     
      - openshift      
    openshift:
      # keep: cloud.platform, cloud.provider, cloud.region
      resource_attributes:
        k8s.cluster.name:
          enabled: false    
{{- end }}

  batch:
{{ toYaml .Values.otel.events.batch | indent 4 }}
  k8sattributes:
{{ include "common.k8s-instrumentation" . | indent 4 }}

  logdedup/entitystateevents: 
    interval: {{ quote .Values.otel.manifests.pull_every }}
    conditions: 
      - instrumentation_scope.attributes["otel.entity.event_as_log"] == true
    include_fields:
      - attributes.otel.entity.event.type
      - attributes.otel.entity_relationship.source_entity.id
      - attributes.otel.entity_relationship.destination_entity.id
      - attributes.otel.entity_relationship.type
      - attributes.otel.entity_relationship.source_entity.type
      - attributes.otel.entity_relationship.destination_entity.type

receivers:
  k8s_events:
{{- $root := . }}
{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.keepalive_events.enabled }}
  swok8sobjects/keepalive:
    auth_type: serviceAccount
{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.persistent_storage.enabled }}
    storage: file_storage/manifests
{{- end}}
    objects:
{{- if and .Values.otel.events.enabled .Values.otel.manifests.enabled }}
{{- if or (.Capabilities.APIVersions.Has "networking.istio.io/v1alpha3") (.Capabilities.APIVersions.Has "networking.istio.io/v1beta1") (.Capabilities.APIVersions.Has "networking.istio.io/v1") -}}
{{- $arrayOfWatchedResources = append $arrayOfWatchedResources "virtualservices" }}
{{- end }}
{{- if or (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1beta2") }}
{{- $arrayOfWatchedResources = append $arrayOfWatchedResources "gitrepositories" }}
{{- end }}
{{- range $index, $resource := $arrayOfWatchedResources }}
      - name: {{ $resource }}
        mode: pull
        interval: {{ quote $root.Values.otel.manifests.keepalive_events.pull_every }}
{{- end }}
{{- else }}
      - name: "configmaps"
        mode: pull
        interval: {{ quote .Values.otel.manifests.keepalive_events.pull_every }}
{{- end }}
{{- end}}

{{- if .Values.discovery.enabled }}
  swok8sdiscovery:
    auth_type: serviceAccount
{{- end }}

  swok8sobjects:
    auth_type: serviceAccount
    objects:
{{- if and .Values.otel.events.enabled .Values.otel.manifests.enabled }}
{{- if or (.Capabilities.APIVersions.Has "networking.istio.io/v1alpha3") (.Capabilities.APIVersions.Has "networking.istio.io/v1beta1") (.Capabilities.APIVersions.Has "networking.istio.io/v1") -}}
{{- $arrayOfWatchedResources = append $arrayOfWatchedResources "virtualservices" }}
{{- end }}
{{- if or (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1") (.Capabilities.APIVersions.Has "source.toolkit.fluxcd.io/v1beta2") }}
{{- $arrayOfWatchedResources = append $arrayOfWatchedResources "gitrepositories" }}
{{- end }}
{{- range $index, $resource := $arrayOfWatchedResources }}
      - name: {{ $resource }}
        mode: pull
        interval: {{ quote $root.Values.otel.manifests.pull_every }}
      - name : {{ $resource }}
        mode: watch
{{- end }}
{{- else }}
      - name: "configmaps"
        mode: pull
        interval: {{ quote .Values.otel.manifests.pull_every }}
      - name : "configmaps"
        mode: watch
{{- end }}

service:
  extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
    - file_storage/sending_queue
{{- end}}
{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.persistent_storage.enabled }}
    - file_storage/manifests
{{- end}}
    - health_check
{{- if .Values.diagnostics.profiling.enabled }}
    - pprof
{{- end }}
  pipelines:
{{- if .Values.otel.events.enabled }}
    logs:
      receivers:
        - k8s_events
      processors:
        - memory_limiter
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "true") }}
        - filter
{{- end }}
        - transform/severity
        - transform/namespace
        - transform/entity_attributes
        - resource/events
        - k8sattributes
{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
        - filter/namespaces
{{- end }}          
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "false") }}
        - filter
{{- end }}
        - transform/scope
        - batch
      exporters:
        - otlp
{{- end }}

{{- if .Values.discovery.enabled }}
    logs/discovery:
      receivers:
        - swok8sdiscovery
      processors:      
        - memory_limiter  
        - resource/events
        - transform/scope
        - batch
      exporters:
        - otlp
{{- end }}

    logs/manifests:
      receivers:
        - swok8sobjects
      processors:
        - memory_limiter
        - transform/manifest
        - groupbyattrs/manifest
        - transform/set_labels_and_annotations_for_entities
{{- if not (and .Values.otel.events.enabled .Values.otel.manifests.enabled) }}
        - filter/k8s_collector_config_include
{{- end }}
        - transform/extract_resource_attrs_from_manifests
        - transform/stringify_body
        - swok8sworkloadstatus
        - groupbyattrs/workloadstatus
        - resource/manifest
        - resourcedetection/providers
        - k8seventgeneration
        - groupbyattrs/serviceendpointsmapping
        - transform/serviceendpointsmapping-renamepodip
        - k8sattributes
{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
        - filter/namespaces
{{- end }}
{{- if .Values.otel.manifests.filter }}
        - filter/manifests
{{- end }}
      exporters:
        - routing/manifests

    logs/serviceendpointsmapping:
      receivers:
        - routing/manifests
      processors:
        - memory_limiter
        - transform/serviceendpointsmapping
      exporters:
        - solarwindsentity/serviceendpointsmapping

    logs/manifests-export:
      receivers:
        - routing/manifests
        - solarwindsentity/serviceendpointsmapping
      processors:
        - memory_limiter
        - logdedup/entitystateevents
        - transform/scope
        - batch
      exporters:
        - otlp

{{- if and .Values.otel.manifests.enabled .Values.otel.manifests.keepalive_events.enabled }}
    logs/manifests-keepalive:
      receivers:
        - swok8sobjects/keepalive
      processors:
        - memory_limiter
        - transform/manifest
        - groupbyattrs/manifest
{{- if not (and .Values.otel.events.enabled .Values.otel.manifests.enabled) }}
        - filter/k8s_collector_config_include
{{- end }}
        - resource/manifest
        - k8sattributes
        - k8seventgeneration
{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
        - filter/namespaces
{{- end }}
{{- if .Values.otel.manifests.filter }}
        - filter/manifests
{{- end }}
      exporters:
        - solarwindsentity/keepalive

    logs/stateevents:
      receivers:
        - solarwindsentity/keepalive
      processors:
        - memory_limiter
        - transform/scope
        - batch
      exporters:
        - otlp
{{- end }}

  telemetry:
{{- if .Values.otel.events.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.events.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.events.telemetry.metrics.enabled }}
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: {{ (split ":" .Values.otel.events.telemetry.metrics.address)._0 | quote }}
                port: {{ (split ":" .Values.otel.events.telemetry.metrics.address)._1 }}
{{- end }}