{{- $resourceMap := dict
    "pods" "Pod"
    "deployments" "Deployment"
    "statefulsets" "StatefulSet"
    "replicasets" "ReplicaSet"
    "daemonsets" "DaemonSet"
    "jobs" "Job"
    "cronjobs" "CronJob"
    "nodes" "Node"
    "services" "Service"
    "persistentvolumes" "PersistentVolume"
    "persistentvolumeclaims" "PersistentVolumeClaim"
    "ingresses" "Ingress"
    "configmaps" "ConfigMap"
    "namespaces" "Namespace"
}}
{{- $arrayOfWatchedResources := keys $resourceMap | sortAlpha }}
exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
    retry_on_failure:
      enabled: {{ .Values.otel.events.retry_on_failure.enabled }}
      initial_interval: {{ .Values.otel.events.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.otel.events.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.otel.events.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.otel.events.sending_queue.enabled }}
      num_consumers: {{ .Values.otel.events.sending_queue.num_consumers }}
      queue_size: {{ .Values.otel.events.sending_queue.queue_size }}
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
      storage: file_storage/sending_queue
{{- end }}
    timeout: {{ .Values.otel.events.timeout }}
extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
  file_storage/sending_queue:
    directory: /var/lib/swo/sending_queue
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133

processors:
  memory_limiter:
{{ toYaml .Values.otel.events.memory_limiter | indent 4 }}

{{- if .Values.otel.events.filter }}
  filter:
    logs:
{{ toYaml .Values.otel.events.filter | indent 6 }}
{{- end }}
{{- if .Values.otel.manifests.filter }}
  filter/manifests:
    logs:
{{ toYaml .Values.otel.manifests.filter | indent 6 }}
{{- end }}
  transform/severity:
    log_statements:
      - context: log
        statements:
          - set(severity_text, "Error") where
{{ include "common.events-error-conditions" . | indent 16}}
          - set(severity_number, 17) where
{{ include "common.events-error-conditions" . | indent 16}}

          - set(severity_text, "Warning") where
{{ include "common.events-warning-conditions" . | indent 16}}
          - set(severity_number, 13) where
{{ include "common.events-warning-conditions" . | indent 16}}
  transform/namespace:
    log_statements:
      - context: log
        statements:
          - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
  transform/entity_attributes:
    log_statements:
      - context: log
        statements:
          # do not create/update endities from events
          - set(resource.attributes["sw.entity.noupdate"], "true")

          - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Pod"
          - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Deployment"
          - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "StatefulSet"
          - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "ReplicaSet"
          - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "DaemonSet"
          - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Job"
          - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "CronJob"
          - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Node"
          - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"]) where attributes["k8s.namespace.name"] != nil
          - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"] != nil

  transform/stringify_body:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          # convert body to string
          - set(body, body.string)
  transform/set_status_for_pods:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(resource.attributes["sw.k8s.pod.status"], body["status"]["phase"]) where body["kind"] == "Pod" and body["status"]["phase"] != nil

  transform/set_labels_and_annotations_for_entities:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          # assign entity prefix k8s.entity.annotations.*
{{- $conditions := list }}
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $condition := printf `body["kind"] == "%s"` $resourceKind }}
      {{- $conditions = append $conditions $condition }}
{{- end }}
{{- $joinedConditions := join " or " $conditions }}
          - set(cache["annotations"], body["metadata"]["annotations"]) where {{ $joinedConditions }}
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
          - flatten(cache["annotations"], "k8s.{{ $prefix }}.annotations") where body["kind"] == "{{ $resourceKind }}" and cache["annotations"] != nil
{{- end }}
          # Set annotations to resource attributes
          - merge_maps(resource.attributes, cache["annotations"], "upsert") where ({{ $joinedConditions }}) and cache["annotations"] != nil

          # assign entity prefix k8s.entity.labels.*
          - set(cache["labels"], body["metadata"]["labels"]) where {{ $joinedConditions }}

{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
          - flatten(cache["labels"], "k8s.{{ $prefix }}.labels") where body["kind"] == "{{ $resourceKind }}" and cache["labels"] != nil
{{- end }}
          
          # Set labels to resource attributes
          - merge_maps(resource.attributes, cache["labels"], "upsert") where ({{ $joinedConditions }}) and cache["labels"] != nil
  filter/k8s_collector_config_include:
    error_mode: ignore
    logs:
      log_record:
        - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"] != "values-config-map"

  transform/manifest:
      error_mode: ignore
      log_statements:
        - context: log
          statements:
            # set event namespace where it will be stored in SWO.
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            
            # Add new attribute `watch-type` with type of the change - "ADDED", "MODIFIED", "DELETED"
            - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"] != nil

            # in watch mode body has `object` attribute with the manifest, in pull mode body is the manifest
            # flaten body structure to have only raw manifest in body in all the cases
            - set(body, body["object"]) where IsMap(body) and body["object"] != nil

            # set attributes for the resource
{{- range $index, $resourceName := $arrayOfWatchedResources }}
      {{- $resourceKind := get $resourceMap $resourceName }}
      {{- $prefix := lower $resourceKind }}
            - set(attributes["k8s.{{$prefix}}.name"], body["metadata"]["name"]) where body["kind"] == "{{$resourceKind}}"
{{- end }}
            - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
            - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"] == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["sw.k8s.ingress.type"], body["kind"]) where body["kind"] == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil

            # There are some attributes added by k8sobjects receiver, SWO do not need them so removing it
            - delete_key(attributes, "k8s.resource.name")
            - delete_key(attributes, "event.name")
            - delete_key(attributes, "event.domain")
  transform/scope:
    log_statements:
      - context: scope
        statements:
          - set(name, "")
          - set(version, "")

  groupbyattrs/manifest:
    keys:
      - k8s.pod.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.replicaset.name
      - k8s.daemonset.name
      - k8s.job.name
      - k8s.cronjob.name
      - k8s.node.name
      - k8s.namespace.name
      - k8s.service.name
      - k8s.persistentvolume.name
      - k8s.persistentvolumeclaim.name
      - k8s.ingress.name
      - sw.k8s.ingress.type
      - k8s.configmap.name

  resource/events:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: event
        action: insert

  resource/manifest:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: manifest
        action: insert

  resourcedetection/providers:
    timeout: 2s
    override: false
{{- if not .Values.openshift.enabled }}
    detectors: 
      - ec2
      - azure
    azure:
      # keep: cloud.account.id, cloud.platform, cloud.provider, cloud.region, azure.resourcegroup.name
      resource_attributes:
        azure.vm.name:
          enabled: false
        azure.vm.scaleset.name:
          enabled: false
        azure.vm.size:
          enabled: false
        host.id:
          enabled: false
        host.name:
          enabled: false  
    ec2:
      # keep: cloud.account.id, cloud.platform, cloud.provider, cloud.region
      resource_attributes:
        cloud.availability_zone:
          enabled: false
        host.id:
          enabled: false
        host.image.id:
          enabled: false
        host.name:
          enabled: false
        host.type:
          enabled: false
{{- else }}
    detectors:     
      - openshift      
    openshift:
      # keep: cloud.platform, cloud.provider, cloud.region
      resource_attributes:
        k8s.cluster.name:
          enabled: false    
{{- end }}

  batch:
{{ toYaml .Values.otel.events.batch | indent 4 }}
  k8sattributes:
{{ include "common.k8s-instrumentation" . | indent 4 }}

receivers:
  k8s_events:
  k8sobjects:
    auth_type: serviceAccount
    objects:
{{- if and .Values.otel.events.enabled .Values.otel.manifests.enabled }}
{{- if or (.Capabilities.APIVersions.Has "networking.istio.io/v1alpha3") (.Capabilities.APIVersions.Has "networking.istio.io/v1beta1") (.Capabilities.APIVersions.Has "networking.istio.io/v1") -}}
{{- $arrayOfWatchedResources = append $arrayOfWatchedResources "virtualservices" }}
{{- end }}
{{- $root := . }}
{{- range $index, $resource := $arrayOfWatchedResources }}
      - name: {{ $resource }}
        mode: pull
        interval: {{ quote $root.Values.otel.manifests.pull_every }}
      - name : {{ $resource }}
        mode: watch
{{- end }}
{{- else }}
      - name: "configmaps"
        mode: pull
        interval: {{ quote .Values.otel.manifests.pull_every }}
      - name : "configmaps"
        mode: watch
{{- end }}

service:
  extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
    - file_storage/sending_queue
{{- end}}
    - health_check
  pipelines:
{{- if .Values.otel.events.enabled }}
    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "true") }}
        - filter
{{- end }}
        - transform/severity
        - transform/namespace
        - transform/entity_attributes
        - resource/events
        - k8sattributes
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "false") }}
        - filter
{{- end }}
        - transform/scope
        - batch
      receivers:
        - k8s_events
{{- end }}
    logs/manifests:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - transform/manifest
        - groupbyattrs/manifest
        - transform/set_labels_and_annotations_for_entities
        - transform/set_status_for_pods
        - transform/stringify_body
        - resource/manifest
        - resourcedetection/providers
        - k8sattributes
{{- if not (and .Values.otel.events.enabled .Values.otel.manifests.enabled) }}
        - filter/k8s_collector_config_include
{{- end }}
{{- if .Values.otel.manifests.filter }}
        - filter/manifests
{{- end }}
        - transform/scope
        - batch
      receivers:
        - k8sobjects
  telemetry:
{{- if .Values.otel.events.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.events.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.events.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.events.telemetry.metrics.address }}
{{- end }}