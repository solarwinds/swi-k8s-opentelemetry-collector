exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
extensions:
  health_check: {}
  memory_ballast:
{{ toYaml .Values.otel.events.memory_ballast | indent 4 }}

processors:
  memory_limiter:
{{ toYaml .Values.otel.events.memory_limiter | indent 4 }}

{{- if .Values.otel.events.filter }}
  filter:
    logs:
{{ toYaml .Values.otel.events.filter | indent 6 }}
{{- end }}
  transform/severity:
    log_statements:
      - context: log
        statements:
          - set(severity_text, "Error") where
{{ include "common.events-error-conditions" . | indent 16}}
          - set(severity_number, 17) where
{{ include "common.events-error-conditions" . | indent 16}}

          - set(severity_text, "Warning") where
{{ include "common.events-warning-conditions" . | indent 16}}
          - set(severity_number, 13) where
{{ include "common.events-warning-conditions" . | indent 16}}
  transform/namespace:
    log_statements:
      - context: log
        statements:
          - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
  transform/entity_attributes:
    log_statements:
      - context: log
        statements:
          - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Pod"
          - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Deployment"
          - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "StatefulSet"
          - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "ReplicaSet"
          - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "DaemonSet"
          - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Job"
          - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "CronJob"
          - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Node"
          - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"]) where attributes["k8s.namespace.name"] != nil
          - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"] != nil
  transform/cleanup_attributes_for_nonexisting_entities:
    log_statements:
      - context: log
        statements:
          - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"] == "false"
          - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"] == "false"
          - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"] == "false"
          - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"] == "false"
          - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"] == "false"
          - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"] == "false"
          - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"] == "false"
          - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"] == "false"
          - delete_key(resource.attributes, "sw.k8s.pod.found")
          - delete_key(resource.attributes, "sw.k8s.deployment.found")
          - delete_key(resource.attributes, "sw.k8s.statefulset.found")
          - delete_key(resource.attributes, "sw.k8s.replicaset.found")
          - delete_key(resource.attributes, "sw.k8s.daemonset.found")
          - delete_key(resource.attributes, "sw.k8s.job.found")
          - delete_key(resource.attributes, "sw.k8s.cronjob.found")
          - delete_key(resource.attributes, "sw.k8s.node.found")
  resource/events:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: event
        action: insert
  batch:
{{ toYaml .Values.otel.events.batch | indent 4 }}
  k8sattributes:
{{ include "common.k8s-instrumentation" (tuple . .Values.otel.events.k8s_instrumentation.annotations.enabled .Values.otel.events.k8s_instrumentation.labels.enabled "true") | indent 4 }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.labels.excludePattern) }}
  resource/k8sattributes_labels_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.events.k8s_instrumentation.labels.excludePattern }}
{{- end }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.annotations.excludePattern) }}
  resource/k8sattributes_annotations_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.events.k8s_instrumentation.annotations.excludePattern }}
{{- end }}

receivers:
  k8s_events:

service:
  extensions:
    - health_check
    - memory_ballast
  pipelines:
{{- if .Values.otel.events.enabled }}
    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
{{- if .Values.otel.events.filter }}
        - filter
{{- end}}
        - transform/severity
        - transform/namespace
        - transform/entity_attributes
        - resource/events
        - k8sattributes
{{- if not (empty .Values.otel.events.k8s_instrumentation.labels.excludePattern) }}
        - resource/k8sattributes_labels_filter
{{- end }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.annotations.excludePattern) }}
        - resource/k8sattributes_annotations_filter
{{- end }}
        - transform/cleanup_attributes_for_nonexisting_entities
        - batch
      receivers:
        - k8s_events
{{- end }}
  telemetry:
{{- if .Values.otel.events.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.events.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.events.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.events.telemetry.metrics.address }}
{{- end }}