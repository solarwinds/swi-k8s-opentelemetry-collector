Custom events filter with new syntax:
  1: |
    events.config: |-
      connectors:
        forward/exportserviceendpointsmapping: {}
        routing/manifests:
          default_pipelines:
          - logs/manifests-export
          table:
          - condition: |
              attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
            context: resource
            pipelines:
            - logs/serviceendpointsmapping
        solarwindsentity/keepalive:
          schema:
            entities:
            - entity: KubernetesConfigMap
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.configmap.name
            - entity: KubernetesContainer
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
              - k8s.container.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesIngress
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.ingress.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesNode
              id:
              - sw.k8s.cluster.uid
              - k8s.node.name
            - entity: KubernetesPersistentVolume
              id:
              - sw.k8s.cluster.uid
              - k8s.persistentvolume.name
            - entity: KubernetesPersistentVolumeClaim
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.persistentvolumeclaim.name
            - entity: KubernetesPod
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesGitRepository
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.gitrepository.name
            - entity: KubernetesKustomization
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.kustomization.name
        solarwindsentity/serviceendpointsmapping:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            events:
              relationships:
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDeployment
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesReplicaSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 64
          send_batch_size: 64
          timeout: 1s
        filter:
          logs:
            log_record:
            - not(IsMatch(resource.attributes["k8s.namespace.name"], "^.*$"))
        filter/k8s_collector_config_include:
          error_mode: ignore
          logs:
            log_record:
            - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"]
              != "values-config-map"
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
          - k8s.role.name
          - k8s.rolebinding.name
          - k8s.clusterrole.name
          - k8s.clusterrolebinding.name
          - k8s.serviceaccount.name
          - k8s.endpoint.name
          - k8s.endpointslice.name
        groupbyattrs/serviceendpointsmapping:
          keys:
          - sw.k8s.cluster.uid
          - sw.k8s.workload.ip
          - k8s.service.name
          - k8s.namespace.name
        groupbyattrs/workloadstatus:
          keys:
          - sw.k8s.deployment.status
          - sw.k8s.statefulset.status
          - sw.k8s.daemonset.status
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: resource_attribute
              name: k8s.namespace.name
        k8seventgeneration: null
        logdedup/entitystateevents:
          conditions:
          - instrumentation_scope.attributes["otel.entity.event_as_log"] == true
          include_fields:
          - attributes.otel.entity.event.type
          - attributes.otel.entity_relationship.source_entity.id
          - attributes.otel.entity_relationship.destination_entity.id
          - attributes.otel.entity_relationship.type
          - attributes.otel.entity_relationship.source_entity.type
          - attributes.otel.entity_relationship.destination_entity.type
          interval: 60m
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        resourcedetection/providers:
          azure:
            resource_attributes:
              azure.vm.name:
                enabled: false
              azure.vm.scaleset.name:
                enabled: false
              azure.vm.size:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
          detectors:
          - ec2
          - azure
          - gcp
          ec2:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              host.id:
                enabled: false
              host.image.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
          gcp:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              gcp.gce.instance.hostname:
                enabled: false
              gcp.gce.instance.name:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
              k8s.cluster.name:
                enabled: false
          override: false
          timeout: 2s
        swok8sworkloadstatus: null
        transform/entity_attributes:
          log_statements:
          - statements:
            - set(resource.attributes["sw.entity.noupdate"], "true")
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.gitrepository.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "GitRepository"
            - set(resource.attributes["k8s.kustomization.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Kustomization"
            - set(resource.attributes["k8s.namespace.name"], log.attributes["k8s.namespace.name"])
              where log.attributes["k8s.namespace.name"] != nil
            - delete_key(log.attributes, "k8s.namespace.name") where log.attributes["k8s.namespace.name"]
              != nil
        transform/extract_resource_attrs_from_manifests:
          error_mode: ignore
          log_statements:
          - conditions:
            - log.body["kind"] == "Pod"
            statements:
            - set(resource.attributes["sw.k8s.pod.status"], log.body["status"]["phase"])
              where log.body["status"]["phase"] != nil
          - conditions:
            - log.body["kind"] == "CronJob"
            statements:
            - set(resource.attributes["sw.k8s.cronjob.suspended"], log.body["spec"]["suspend"])
              where log.body["spec"]["suspend"] != nil
            - set(resource.attributes["sw.k8s.cronjob.schedule"], log.body["spec"]["schedule"])
              where log.body["spec"]["schedule"] != nil
            - set(resource.attributes["sw.k8s.cronjob.concurrencypolicy"], log.body["spec"]["concurrencyPolicy"])
              where log.body["spec"]["concurrencyPolicy"] != nil
            - set(resource.attributes["sw.k8s.cronjob.failedjobshistorylimit"], log.body["spec"]["failedJobsHistoryLimit"])
              where log.body["spec"]["failedJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.successfuljobshistorylimit"], log.body["spec"]["successfulJobsHistoryLimit"])
              where log.body["spec"]["successfulJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], Len(log.body["status"]["active"]))
              where log.body["status"]["active"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], 0) where log.body["status"]["active"]
              == nil
          - conditions:
            - log.body["kind"] == "Service"
            statements:
            - set(resource.attributes["sw.k8s.service.type"], log.body["spec"]["type"])
              where log.body["spec"]["type"] != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(log.attributes["watch.type"], log.body["type"]) where IsMap(log.body)
              and log.body["type"] != nil
            - set(log.body, log.body["object"]) where IsMap(log.body) and log.body["object"]
              != nil
            - set(log.attributes["k8s.clusterrolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRoleBinding"
            - set(log.attributes["k8s.clusterrole.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRole"
            - set(log.attributes["k8s.configmap.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ConfigMap"
            - set(log.attributes["k8s.cronjob.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "CronJob"
            - set(log.attributes["k8s.daemonset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "DaemonSet"
            - set(log.attributes["k8s.deployment.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Deployment"
            - set(log.attributes["k8s.endpoints.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Endpoints"
            - set(log.attributes["k8s.endpointslice.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "EndpointSlice"
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Ingress"
            - set(log.attributes["k8s.job.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Job"
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Namespace"
            - set(log.attributes["k8s.node.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Node"
            - set(log.attributes["k8s.persistentvolumeclaim.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolumeClaim"
            - set(log.attributes["k8s.persistentvolume.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolume"
            - set(log.attributes["k8s.pod.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Pod"
            - set(log.attributes["k8s.replicaset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ReplicaSet"
            - set(log.attributes["k8s.rolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "RoleBinding"
            - set(log.attributes["k8s.role.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Role"
            - set(log.attributes["k8s.serviceaccount.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ServiceAccount"
            - set(log.attributes["k8s.service.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Service"
            - set(log.attributes["k8s.statefulset.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "StatefulSet"
            - set(log.attributes["k8s.endpoint.name"], log.attributes["k8s.endpoints.name"])
              where log.attributes["k8s.endpoints.name"] != nil
            - delete_key(log.attributes, "k8s.endpoints.name") where log.attributes["k8s.endpoints.name"]
              != nil
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["namespace"])
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["sw.k8s.ingress.type"], log.body["kind"]) where log.body["kind"]
              == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["k8s.object.kind"], log.body["kind"]) where log.body["kind"]
              != nil
            - set(log.attributes["k8s.object.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil
            - delete_key(log.attributes, "k8s.resource.name")
            - delete_key(log.attributes, "event.name")
            - delete_key(log.attributes, "event.domain")
          - conditions:
            - log.body["kind"] == "VulnerabilityReport"
            - log.body["kind"] == "ExposedSecretReport"
            statements:
            - set(log.attributes[Format("k8s.%s.name",[ToLowerCase(log.body["metadata"]["ownerReferences"][0]["kind"])])],
              log.body["metadata"]["ownerReferences"][0]["name"]) where Len(log.body["metadata"]["ownerReferences"])
              > 0
            - delete_key(log.attributes, "k8s.vulnerabilityreport.name")
            - delete_key(log.attributes, "k8s.exposedsecretreport.name")
        transform/namespace:
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/serviceendpointsmapping:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["source.k8s.service.name"], resource.attributes["k8s.service.name"])
              where resource.attributes["k8s.service.name"] != nil
            - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["k8s.deployment.name"])
              where resource.attributes["k8s.deployment.name"] != nil
            - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["k8s.statefulset.name"])
              where resource.attributes["k8s.statefulset.name"] != nil
            - set(resource.attributes["dest.k8s.replicaset.name"], resource.attributes["k8s.replicaset.name"])
              where resource.attributes["k8s.replicaset.name"] != nil
            - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["k8s.daemonset.name"])
              where resource.attributes["k8s.daemonset.name"] != nil
        transform/serviceendpointsmapping-renamepodip:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["k8s.pod.ip"], resource.attributes["sw.k8s.workload.ip"])
              where resource.attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
              and resource.attributes["sw.k8s.workload.ip"] != nil
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.cache["annotations"], log.body["metadata"]["annotations"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["annotations"], "k8s.clusterrolebinding.annotations") where
              log.body["kind"] == "ClusterRoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.clusterrole.annotations") where log.body["kind"]
              == "ClusterRole" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.configmap.annotations") where log.body["kind"]
              == "ConfigMap" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.cronjob.annotations") where log.body["kind"]
              == "CronJob" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.daemonset.annotations") where log.body["kind"]
              == "DaemonSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.deployment.annotations") where log.body["kind"]
              == "Deployment" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpoints.annotations") where log.body["kind"]
              == "Endpoints" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpointslice.annotations") where log.body["kind"]
              == "EndpointSlice" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.ingress.annotations") where log.body["kind"]
              == "Ingress" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.job.annotations") where log.body["kind"]
              == "Job" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.namespace.annotations") where log.body["kind"]
              == "Namespace" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.node.annotations") where log.body["kind"]
              == "Node" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolumeclaim.annotations")
              where log.body["kind"] == "PersistentVolumeClaim" and log.cache["annotations"]
              != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolume.annotations") where
              log.body["kind"] == "PersistentVolume" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.pod.annotations") where log.body["kind"]
              == "Pod" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.replicaset.annotations") where log.body["kind"]
              == "ReplicaSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.rolebinding.annotations") where log.body["kind"]
              == "RoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.role.annotations") where log.body["kind"]
              == "Role" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.serviceaccount.annotations") where
              log.body["kind"] == "ServiceAccount" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.service.annotations") where log.body["kind"]
              == "Service" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.statefulset.annotations") where log.body["kind"]
              == "StatefulSet" and log.cache["annotations"] != nil
            - merge_maps(resource.attributes, log.cache["annotations"], "upsert") where
              (log.body["kind"] == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole"
              or log.body["kind"] == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"]
              == "DaemonSet" or log.body["kind"] == "Deployment" or log.body["kind"] ==
              "Endpoints" or log.body["kind"] == "EndpointSlice" or log.body["kind"] ==
              "Ingress" or log.body["kind"] == "Job" or log.body["kind"] == "Namespace"
              or log.body["kind"] == "Node" or log.body["kind"] == "PersistentVolumeClaim"
              or log.body["kind"] == "PersistentVolume" or log.body["kind"] == "Pod" or
              log.body["kind"] == "ReplicaSet" or log.body["kind"] == "RoleBinding" or log.body["kind"]
              == "Role" or log.body["kind"] == "ServiceAccount" or log.body["kind"] == "Service"
              or log.body["kind"] == "StatefulSet") and log.cache["annotations"] != nil
            - set(log.cache["labels"], log.body["metadata"]["labels"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["labels"], "k8s.clusterrolebinding.labels") where log.body["kind"]
              == "ClusterRoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.clusterrole.labels") where log.body["kind"]
              == "ClusterRole" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.configmap.labels") where log.body["kind"]
              == "ConfigMap" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.cronjob.labels") where log.body["kind"]
              == "CronJob" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.daemonset.labels") where log.body["kind"]
              == "DaemonSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.deployment.labels") where log.body["kind"]
              == "Deployment" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpoints.labels") where log.body["kind"]
              == "Endpoints" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpointslice.labels") where log.body["kind"]
              == "EndpointSlice" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.ingress.labels") where log.body["kind"]
              == "Ingress" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.job.labels") where log.body["kind"] == "Job"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.namespace.labels") where log.body["kind"]
              == "Namespace" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.node.labels") where log.body["kind"] ==
              "Node" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolumeclaim.labels") where log.body["kind"]
              == "PersistentVolumeClaim" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolume.labels") where log.body["kind"]
              == "PersistentVolume" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.pod.labels") where log.body["kind"] == "Pod"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.replicaset.labels") where log.body["kind"]
              == "ReplicaSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.rolebinding.labels") where log.body["kind"]
              == "RoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.role.labels") where log.body["kind"] ==
              "Role" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.serviceaccount.labels") where log.body["kind"]
              == "ServiceAccount" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.service.labels") where log.body["kind"]
              == "Service" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.statefulset.labels") where log.body["kind"]
              == "StatefulSet" and log.cache["labels"] != nil
            - merge_maps(resource.attributes, log.cache["labels"], "upsert") where (log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet") and
              log.cache["labels"] != nil
        transform/severity:
          log_statements:
          - statements:
            - set(log.severity_text, "Error") where log.attributes["k8s.event.reason"] ==
              "Failed" or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_number, 17) where log.attributes["k8s.event.reason"] == "Failed"
              or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_text, "Warning") where log.attributes["k8s.event.reason"]
              == "ProbeWarning" or log.attributes["k8s.event.reason"] == "Unhealthy"
            - set(log.severity_number, 13) where log.attributes["k8s.event.reason"] == "ProbeWarning"
              or log.attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.body, log.body.string)
      receivers:
        k8s_events: null
        swok8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: clusterrolebindings
          - mode: watch
            name: clusterrolebindings
          - interval: 60m
            mode: pull
            name: clusterroles
          - mode: watch
            name: clusterroles
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: endpoints
          - mode: watch
            name: endpoints
          - interval: 60m
            mode: pull
            name: endpointslices
          - mode: watch
            name: endpointslices
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: namespaces
          - mode: watch
            name: namespaces
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: rolebindings
          - mode: watch
            name: rolebindings
          - interval: 60m
            mode: pull
            name: roles
          - mode: watch
            name: roles
          - interval: 60m
            mode: pull
            name: serviceaccounts
          - mode: watch
            name: serviceaccounts
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
        swok8sobjects/keepalive:
          auth_type: serviceAccount
          objects:
          - interval: 20m
            mode: pull
            name: clusterrolebindings
          - interval: 20m
            mode: pull
            name: clusterroles
          - interval: 20m
            mode: pull
            name: configmaps
          - interval: 20m
            mode: pull
            name: cronjobs
          - interval: 20m
            mode: pull
            name: daemonsets
          - interval: 20m
            mode: pull
            name: deployments
          - interval: 20m
            mode: pull
            name: endpoints
          - interval: 20m
            mode: pull
            name: endpointslices
          - interval: 20m
            mode: pull
            name: ingresses
          - interval: 20m
            mode: pull
            name: jobs
          - interval: 20m
            mode: pull
            name: namespaces
          - interval: 20m
            mode: pull
            name: nodes
          - interval: 20m
            mode: pull
            name: persistentvolumeclaims
          - interval: 20m
            mode: pull
            name: persistentvolumes
          - interval: 20m
            mode: pull
            name: pods
          - interval: 20m
            mode: pull
            name: replicasets
          - interval: 20m
            mode: pull
            name: rolebindings
          - interval: 20m
            mode: pull
            name: roles
          - interval: 20m
            mode: pull
            name: serviceaccounts
          - interval: 20m
            mode: pull
            name: services
          - interval: 20m
            mode: pull
            name: statefulsets
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - k8sattributes
            - filter
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - routing/manifests
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/extract_resource_attrs_from_manifests
            - transform/stringify_body
            - swok8sworkloadstatus
            - groupbyattrs/workloadstatus
            - resource/manifest
            - resourcedetection/providers
            - k8seventgeneration
            - groupbyattrs/serviceendpointsmapping
            - transform/serviceendpointsmapping-renamepodip
            - k8sattributes
            receivers:
            - swok8sobjects
          logs/manifests-export:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - logdedup/entitystateevents
            - transform/scope
            - batch
            receivers:
            - routing/manifests
            - solarwindsentity/serviceendpointsmapping
          logs/manifests-keepalive:
            exporters:
            - solarwindsentity/keepalive
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - resource/manifest
            - k8sattributes
            - k8seventgeneration
            receivers:
            - swok8sobjects/keepalive
          logs/serviceendpointsmapping:
            exporters:
            - solarwindsentity/serviceendpointsmapping
            processors:
            - memory_limiter
            - transform/serviceendpointsmapping
            receivers:
            - routing/manifests
          logs/stateevents:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch
            receivers:
            - solarwindsentity/keepalive
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Custom events filter with old syntax:
  1: |
    events.config: |-
      connectors:
        forward/exportserviceendpointsmapping: {}
        routing/manifests:
          default_pipelines:
          - logs/manifests-export
          table:
          - condition: |
              attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
            context: resource
            pipelines:
            - logs/serviceendpointsmapping
        solarwindsentity/keepalive:
          schema:
            entities:
            - entity: KubernetesConfigMap
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.configmap.name
            - entity: KubernetesContainer
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
              - k8s.container.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesIngress
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.ingress.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesNode
              id:
              - sw.k8s.cluster.uid
              - k8s.node.name
            - entity: KubernetesPersistentVolume
              id:
              - sw.k8s.cluster.uid
              - k8s.persistentvolume.name
            - entity: KubernetesPersistentVolumeClaim
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.persistentvolumeclaim.name
            - entity: KubernetesPod
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesGitRepository
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.gitrepository.name
            - entity: KubernetesKustomization
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.kustomization.name
        solarwindsentity/serviceendpointsmapping:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            events:
              relationships:
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDeployment
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesReplicaSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 64
          send_batch_size: 64
          timeout: 1s
        filter:
          logs:
            include:
              match_type: regexp
              record_attributes:
              - key: k8s.namespace.name
                value: ^.*$
        filter/k8s_collector_config_include:
          error_mode: ignore
          logs:
            log_record:
            - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"]
              != "values-config-map"
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
          - k8s.role.name
          - k8s.rolebinding.name
          - k8s.clusterrole.name
          - k8s.clusterrolebinding.name
          - k8s.serviceaccount.name
          - k8s.endpoint.name
          - k8s.endpointslice.name
        groupbyattrs/serviceendpointsmapping:
          keys:
          - sw.k8s.cluster.uid
          - sw.k8s.workload.ip
          - k8s.service.name
          - k8s.namespace.name
        groupbyattrs/workloadstatus:
          keys:
          - sw.k8s.deployment.status
          - sw.k8s.statefulset.status
          - sw.k8s.daemonset.status
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: resource_attribute
              name: k8s.namespace.name
        k8seventgeneration: null
        logdedup/entitystateevents:
          conditions:
          - instrumentation_scope.attributes["otel.entity.event_as_log"] == true
          include_fields:
          - attributes.otel.entity.event.type
          - attributes.otel.entity_relationship.source_entity.id
          - attributes.otel.entity_relationship.destination_entity.id
          - attributes.otel.entity_relationship.type
          - attributes.otel.entity_relationship.source_entity.type
          - attributes.otel.entity_relationship.destination_entity.type
          interval: 60m
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        resourcedetection/providers:
          azure:
            resource_attributes:
              azure.vm.name:
                enabled: false
              azure.vm.scaleset.name:
                enabled: false
              azure.vm.size:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
          detectors:
          - ec2
          - azure
          - gcp
          ec2:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              host.id:
                enabled: false
              host.image.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
          gcp:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              gcp.gce.instance.hostname:
                enabled: false
              gcp.gce.instance.name:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
              k8s.cluster.name:
                enabled: false
          override: false
          timeout: 2s
        swok8sworkloadstatus: null
        transform/entity_attributes:
          log_statements:
          - statements:
            - set(resource.attributes["sw.entity.noupdate"], "true")
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.gitrepository.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "GitRepository"
            - set(resource.attributes["k8s.kustomization.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Kustomization"
            - set(resource.attributes["k8s.namespace.name"], log.attributes["k8s.namespace.name"])
              where log.attributes["k8s.namespace.name"] != nil
            - delete_key(log.attributes, "k8s.namespace.name") where log.attributes["k8s.namespace.name"]
              != nil
        transform/extract_resource_attrs_from_manifests:
          error_mode: ignore
          log_statements:
          - conditions:
            - log.body["kind"] == "Pod"
            statements:
            - set(resource.attributes["sw.k8s.pod.status"], log.body["status"]["phase"])
              where log.body["status"]["phase"] != nil
          - conditions:
            - log.body["kind"] == "CronJob"
            statements:
            - set(resource.attributes["sw.k8s.cronjob.suspended"], log.body["spec"]["suspend"])
              where log.body["spec"]["suspend"] != nil
            - set(resource.attributes["sw.k8s.cronjob.schedule"], log.body["spec"]["schedule"])
              where log.body["spec"]["schedule"] != nil
            - set(resource.attributes["sw.k8s.cronjob.concurrencypolicy"], log.body["spec"]["concurrencyPolicy"])
              where log.body["spec"]["concurrencyPolicy"] != nil
            - set(resource.attributes["sw.k8s.cronjob.failedjobshistorylimit"], log.body["spec"]["failedJobsHistoryLimit"])
              where log.body["spec"]["failedJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.successfuljobshistorylimit"], log.body["spec"]["successfulJobsHistoryLimit"])
              where log.body["spec"]["successfulJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], Len(log.body["status"]["active"]))
              where log.body["status"]["active"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], 0) where log.body["status"]["active"]
              == nil
          - conditions:
            - log.body["kind"] == "Service"
            statements:
            - set(resource.attributes["sw.k8s.service.type"], log.body["spec"]["type"])
              where log.body["spec"]["type"] != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(log.attributes["watch.type"], log.body["type"]) where IsMap(log.body)
              and log.body["type"] != nil
            - set(log.body, log.body["object"]) where IsMap(log.body) and log.body["object"]
              != nil
            - set(log.attributes["k8s.clusterrolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRoleBinding"
            - set(log.attributes["k8s.clusterrole.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRole"
            - set(log.attributes["k8s.configmap.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ConfigMap"
            - set(log.attributes["k8s.cronjob.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "CronJob"
            - set(log.attributes["k8s.daemonset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "DaemonSet"
            - set(log.attributes["k8s.deployment.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Deployment"
            - set(log.attributes["k8s.endpoints.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Endpoints"
            - set(log.attributes["k8s.endpointslice.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "EndpointSlice"
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Ingress"
            - set(log.attributes["k8s.job.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Job"
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Namespace"
            - set(log.attributes["k8s.node.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Node"
            - set(log.attributes["k8s.persistentvolumeclaim.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolumeClaim"
            - set(log.attributes["k8s.persistentvolume.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolume"
            - set(log.attributes["k8s.pod.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Pod"
            - set(log.attributes["k8s.replicaset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ReplicaSet"
            - set(log.attributes["k8s.rolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "RoleBinding"
            - set(log.attributes["k8s.role.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Role"
            - set(log.attributes["k8s.serviceaccount.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ServiceAccount"
            - set(log.attributes["k8s.service.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Service"
            - set(log.attributes["k8s.statefulset.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "StatefulSet"
            - set(log.attributes["k8s.endpoint.name"], log.attributes["k8s.endpoints.name"])
              where log.attributes["k8s.endpoints.name"] != nil
            - delete_key(log.attributes, "k8s.endpoints.name") where log.attributes["k8s.endpoints.name"]
              != nil
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["namespace"])
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["sw.k8s.ingress.type"], log.body["kind"]) where log.body["kind"]
              == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["k8s.object.kind"], log.body["kind"]) where log.body["kind"]
              != nil
            - set(log.attributes["k8s.object.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil
            - delete_key(log.attributes, "k8s.resource.name")
            - delete_key(log.attributes, "event.name")
            - delete_key(log.attributes, "event.domain")
          - conditions:
            - log.body["kind"] == "VulnerabilityReport"
            - log.body["kind"] == "ExposedSecretReport"
            statements:
            - set(log.attributes[Format("k8s.%s.name",[ToLowerCase(log.body["metadata"]["ownerReferences"][0]["kind"])])],
              log.body["metadata"]["ownerReferences"][0]["name"]) where Len(log.body["metadata"]["ownerReferences"])
              > 0
            - delete_key(log.attributes, "k8s.vulnerabilityreport.name")
            - delete_key(log.attributes, "k8s.exposedsecretreport.name")
        transform/namespace:
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/serviceendpointsmapping:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["source.k8s.service.name"], resource.attributes["k8s.service.name"])
              where resource.attributes["k8s.service.name"] != nil
            - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["k8s.deployment.name"])
              where resource.attributes["k8s.deployment.name"] != nil
            - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["k8s.statefulset.name"])
              where resource.attributes["k8s.statefulset.name"] != nil
            - set(resource.attributes["dest.k8s.replicaset.name"], resource.attributes["k8s.replicaset.name"])
              where resource.attributes["k8s.replicaset.name"] != nil
            - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["k8s.daemonset.name"])
              where resource.attributes["k8s.daemonset.name"] != nil
        transform/serviceendpointsmapping-renamepodip:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["k8s.pod.ip"], resource.attributes["sw.k8s.workload.ip"])
              where resource.attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
              and resource.attributes["sw.k8s.workload.ip"] != nil
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.cache["annotations"], log.body["metadata"]["annotations"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["annotations"], "k8s.clusterrolebinding.annotations") where
              log.body["kind"] == "ClusterRoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.clusterrole.annotations") where log.body["kind"]
              == "ClusterRole" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.configmap.annotations") where log.body["kind"]
              == "ConfigMap" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.cronjob.annotations") where log.body["kind"]
              == "CronJob" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.daemonset.annotations") where log.body["kind"]
              == "DaemonSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.deployment.annotations") where log.body["kind"]
              == "Deployment" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpoints.annotations") where log.body["kind"]
              == "Endpoints" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpointslice.annotations") where log.body["kind"]
              == "EndpointSlice" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.ingress.annotations") where log.body["kind"]
              == "Ingress" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.job.annotations") where log.body["kind"]
              == "Job" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.namespace.annotations") where log.body["kind"]
              == "Namespace" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.node.annotations") where log.body["kind"]
              == "Node" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolumeclaim.annotations")
              where log.body["kind"] == "PersistentVolumeClaim" and log.cache["annotations"]
              != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolume.annotations") where
              log.body["kind"] == "PersistentVolume" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.pod.annotations") where log.body["kind"]
              == "Pod" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.replicaset.annotations") where log.body["kind"]
              == "ReplicaSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.rolebinding.annotations") where log.body["kind"]
              == "RoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.role.annotations") where log.body["kind"]
              == "Role" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.serviceaccount.annotations") where
              log.body["kind"] == "ServiceAccount" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.service.annotations") where log.body["kind"]
              == "Service" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.statefulset.annotations") where log.body["kind"]
              == "StatefulSet" and log.cache["annotations"] != nil
            - merge_maps(resource.attributes, log.cache["annotations"], "upsert") where
              (log.body["kind"] == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole"
              or log.body["kind"] == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"]
              == "DaemonSet" or log.body["kind"] == "Deployment" or log.body["kind"] ==
              "Endpoints" or log.body["kind"] == "EndpointSlice" or log.body["kind"] ==
              "Ingress" or log.body["kind"] == "Job" or log.body["kind"] == "Namespace"
              or log.body["kind"] == "Node" or log.body["kind"] == "PersistentVolumeClaim"
              or log.body["kind"] == "PersistentVolume" or log.body["kind"] == "Pod" or
              log.body["kind"] == "ReplicaSet" or log.body["kind"] == "RoleBinding" or log.body["kind"]
              == "Role" or log.body["kind"] == "ServiceAccount" or log.body["kind"] == "Service"
              or log.body["kind"] == "StatefulSet") and log.cache["annotations"] != nil
            - set(log.cache["labels"], log.body["metadata"]["labels"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["labels"], "k8s.clusterrolebinding.labels") where log.body["kind"]
              == "ClusterRoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.clusterrole.labels") where log.body["kind"]
              == "ClusterRole" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.configmap.labels") where log.body["kind"]
              == "ConfigMap" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.cronjob.labels") where log.body["kind"]
              == "CronJob" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.daemonset.labels") where log.body["kind"]
              == "DaemonSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.deployment.labels") where log.body["kind"]
              == "Deployment" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpoints.labels") where log.body["kind"]
              == "Endpoints" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpointslice.labels") where log.body["kind"]
              == "EndpointSlice" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.ingress.labels") where log.body["kind"]
              == "Ingress" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.job.labels") where log.body["kind"] == "Job"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.namespace.labels") where log.body["kind"]
              == "Namespace" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.node.labels") where log.body["kind"] ==
              "Node" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolumeclaim.labels") where log.body["kind"]
              == "PersistentVolumeClaim" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolume.labels") where log.body["kind"]
              == "PersistentVolume" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.pod.labels") where log.body["kind"] == "Pod"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.replicaset.labels") where log.body["kind"]
              == "ReplicaSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.rolebinding.labels") where log.body["kind"]
              == "RoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.role.labels") where log.body["kind"] ==
              "Role" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.serviceaccount.labels") where log.body["kind"]
              == "ServiceAccount" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.service.labels") where log.body["kind"]
              == "Service" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.statefulset.labels") where log.body["kind"]
              == "StatefulSet" and log.cache["labels"] != nil
            - merge_maps(resource.attributes, log.cache["labels"], "upsert") where (log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet") and
              log.cache["labels"] != nil
        transform/severity:
          log_statements:
          - statements:
            - set(log.severity_text, "Error") where log.attributes["k8s.event.reason"] ==
              "Failed" or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_number, 17) where log.attributes["k8s.event.reason"] == "Failed"
              or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_text, "Warning") where log.attributes["k8s.event.reason"]
              == "ProbeWarning" or log.attributes["k8s.event.reason"] == "Unhealthy"
            - set(log.severity_number, 13) where log.attributes["k8s.event.reason"] == "ProbeWarning"
              or log.attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.body, log.body.string)
      receivers:
        k8s_events: null
        swok8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: clusterrolebindings
          - mode: watch
            name: clusterrolebindings
          - interval: 60m
            mode: pull
            name: clusterroles
          - mode: watch
            name: clusterroles
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: endpoints
          - mode: watch
            name: endpoints
          - interval: 60m
            mode: pull
            name: endpointslices
          - mode: watch
            name: endpointslices
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: namespaces
          - mode: watch
            name: namespaces
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: rolebindings
          - mode: watch
            name: rolebindings
          - interval: 60m
            mode: pull
            name: roles
          - mode: watch
            name: roles
          - interval: 60m
            mode: pull
            name: serviceaccounts
          - mode: watch
            name: serviceaccounts
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
        swok8sobjects/keepalive:
          auth_type: serviceAccount
          objects:
          - interval: 20m
            mode: pull
            name: clusterrolebindings
          - interval: 20m
            mode: pull
            name: clusterroles
          - interval: 20m
            mode: pull
            name: configmaps
          - interval: 20m
            mode: pull
            name: cronjobs
          - interval: 20m
            mode: pull
            name: daemonsets
          - interval: 20m
            mode: pull
            name: deployments
          - interval: 20m
            mode: pull
            name: endpoints
          - interval: 20m
            mode: pull
            name: endpointslices
          - interval: 20m
            mode: pull
            name: ingresses
          - interval: 20m
            mode: pull
            name: jobs
          - interval: 20m
            mode: pull
            name: namespaces
          - interval: 20m
            mode: pull
            name: nodes
          - interval: 20m
            mode: pull
            name: persistentvolumeclaims
          - interval: 20m
            mode: pull
            name: persistentvolumes
          - interval: 20m
            mode: pull
            name: pods
          - interval: 20m
            mode: pull
            name: replicasets
          - interval: 20m
            mode: pull
            name: rolebindings
          - interval: 20m
            mode: pull
            name: roles
          - interval: 20m
            mode: pull
            name: serviceaccounts
          - interval: 20m
            mode: pull
            name: services
          - interval: 20m
            mode: pull
            name: statefulsets
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - k8sattributes
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - routing/manifests
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/extract_resource_attrs_from_manifests
            - transform/stringify_body
            - swok8sworkloadstatus
            - groupbyattrs/workloadstatus
            - resource/manifest
            - resourcedetection/providers
            - k8seventgeneration
            - groupbyattrs/serviceendpointsmapping
            - transform/serviceendpointsmapping-renamepodip
            - k8sattributes
            receivers:
            - swok8sobjects
          logs/manifests-export:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - logdedup/entitystateevents
            - transform/scope
            - batch
            receivers:
            - routing/manifests
            - solarwindsentity/serviceendpointsmapping
          logs/manifests-keepalive:
            exporters:
            - solarwindsentity/keepalive
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - resource/manifest
            - k8sattributes
            - k8seventgeneration
            receivers:
            - swok8sobjects/keepalive
          logs/serviceendpointsmapping:
            exporters:
            - solarwindsentity/serviceendpointsmapping
            processors:
            - memory_limiter
            - transform/serviceendpointsmapping
            receivers:
            - routing/manifests
          logs/stateevents:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch
            receivers:
            - solarwindsentity/keepalive
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Events config should match snapshot when using default values:
  1: |
    events.config: |-
      connectors:
        forward/exportserviceendpointsmapping: {}
        routing/manifests:
          default_pipelines:
          - logs/manifests-export
          table:
          - condition: |
              attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
            context: resource
            pipelines:
            - logs/serviceendpointsmapping
        solarwindsentity/keepalive:
          schema:
            entities:
            - entity: KubernetesConfigMap
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.configmap.name
            - entity: KubernetesContainer
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
              - k8s.container.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesIngress
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.ingress.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesNode
              id:
              - sw.k8s.cluster.uid
              - k8s.node.name
            - entity: KubernetesPersistentVolume
              id:
              - sw.k8s.cluster.uid
              - k8s.persistentvolume.name
            - entity: KubernetesPersistentVolumeClaim
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.persistentvolumeclaim.name
            - entity: KubernetesPod
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesGitRepository
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.gitrepository.name
            - entity: KubernetesKustomization
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.kustomization.name
        solarwindsentity/serviceendpointsmapping:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            events:
              relationships:
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDeployment
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesReplicaSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 64
          send_batch_size: 64
          timeout: 1s
        filter/k8s_collector_config_include:
          error_mode: ignore
          logs:
            log_record:
            - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"]
              != "values-config-map"
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
          - k8s.role.name
          - k8s.rolebinding.name
          - k8s.clusterrole.name
          - k8s.clusterrolebinding.name
          - k8s.serviceaccount.name
          - k8s.endpoint.name
          - k8s.endpointslice.name
        groupbyattrs/serviceendpointsmapping:
          keys:
          - sw.k8s.cluster.uid
          - sw.k8s.workload.ip
          - k8s.service.name
          - k8s.namespace.name
        groupbyattrs/workloadstatus:
          keys:
          - sw.k8s.deployment.status
          - sw.k8s.statefulset.status
          - sw.k8s.daemonset.status
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: resource_attribute
              name: k8s.namespace.name
        k8seventgeneration: null
        logdedup/entitystateevents:
          conditions:
          - instrumentation_scope.attributes["otel.entity.event_as_log"] == true
          include_fields:
          - attributes.otel.entity.event.type
          - attributes.otel.entity_relationship.source_entity.id
          - attributes.otel.entity_relationship.destination_entity.id
          - attributes.otel.entity_relationship.type
          - attributes.otel.entity_relationship.source_entity.type
          - attributes.otel.entity_relationship.destination_entity.type
          interval: 60m
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        resourcedetection/providers:
          azure:
            resource_attributes:
              azure.vm.name:
                enabled: false
              azure.vm.scaleset.name:
                enabled: false
              azure.vm.size:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
          detectors:
          - ec2
          - azure
          - gcp
          ec2:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              host.id:
                enabled: false
              host.image.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
          gcp:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              gcp.gce.instance.hostname:
                enabled: false
              gcp.gce.instance.name:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
              k8s.cluster.name:
                enabled: false
          override: false
          timeout: 2s
        swok8sworkloadstatus: null
        transform/entity_attributes:
          log_statements:
          - statements:
            - set(resource.attributes["sw.entity.noupdate"], "true")
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.gitrepository.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "GitRepository"
            - set(resource.attributes["k8s.kustomization.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Kustomization"
            - set(resource.attributes["k8s.namespace.name"], log.attributes["k8s.namespace.name"])
              where log.attributes["k8s.namespace.name"] != nil
            - delete_key(log.attributes, "k8s.namespace.name") where log.attributes["k8s.namespace.name"]
              != nil
        transform/extract_resource_attrs_from_manifests:
          error_mode: ignore
          log_statements:
          - conditions:
            - log.body["kind"] == "Pod"
            statements:
            - set(resource.attributes["sw.k8s.pod.status"], log.body["status"]["phase"])
              where log.body["status"]["phase"] != nil
          - conditions:
            - log.body["kind"] == "CronJob"
            statements:
            - set(resource.attributes["sw.k8s.cronjob.suspended"], log.body["spec"]["suspend"])
              where log.body["spec"]["suspend"] != nil
            - set(resource.attributes["sw.k8s.cronjob.schedule"], log.body["spec"]["schedule"])
              where log.body["spec"]["schedule"] != nil
            - set(resource.attributes["sw.k8s.cronjob.concurrencypolicy"], log.body["spec"]["concurrencyPolicy"])
              where log.body["spec"]["concurrencyPolicy"] != nil
            - set(resource.attributes["sw.k8s.cronjob.failedjobshistorylimit"], log.body["spec"]["failedJobsHistoryLimit"])
              where log.body["spec"]["failedJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.successfuljobshistorylimit"], log.body["spec"]["successfulJobsHistoryLimit"])
              where log.body["spec"]["successfulJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], Len(log.body["status"]["active"]))
              where log.body["status"]["active"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], 0) where log.body["status"]["active"]
              == nil
          - conditions:
            - log.body["kind"] == "Service"
            statements:
            - set(resource.attributes["sw.k8s.service.type"], log.body["spec"]["type"])
              where log.body["spec"]["type"] != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(log.attributes["watch.type"], log.body["type"]) where IsMap(log.body)
              and log.body["type"] != nil
            - set(log.body, log.body["object"]) where IsMap(log.body) and log.body["object"]
              != nil
            - set(log.attributes["k8s.clusterrolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRoleBinding"
            - set(log.attributes["k8s.clusterrole.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRole"
            - set(log.attributes["k8s.configmap.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ConfigMap"
            - set(log.attributes["k8s.cronjob.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "CronJob"
            - set(log.attributes["k8s.daemonset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "DaemonSet"
            - set(log.attributes["k8s.deployment.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Deployment"
            - set(log.attributes["k8s.endpoints.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Endpoints"
            - set(log.attributes["k8s.endpointslice.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "EndpointSlice"
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Ingress"
            - set(log.attributes["k8s.job.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Job"
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Namespace"
            - set(log.attributes["k8s.node.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Node"
            - set(log.attributes["k8s.persistentvolumeclaim.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolumeClaim"
            - set(log.attributes["k8s.persistentvolume.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolume"
            - set(log.attributes["k8s.pod.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Pod"
            - set(log.attributes["k8s.replicaset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ReplicaSet"
            - set(log.attributes["k8s.rolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "RoleBinding"
            - set(log.attributes["k8s.role.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Role"
            - set(log.attributes["k8s.serviceaccount.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ServiceAccount"
            - set(log.attributes["k8s.service.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Service"
            - set(log.attributes["k8s.statefulset.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "StatefulSet"
            - set(log.attributes["k8s.endpoint.name"], log.attributes["k8s.endpoints.name"])
              where log.attributes["k8s.endpoints.name"] != nil
            - delete_key(log.attributes, "k8s.endpoints.name") where log.attributes["k8s.endpoints.name"]
              != nil
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["namespace"])
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["sw.k8s.ingress.type"], log.body["kind"]) where log.body["kind"]
              == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["k8s.object.kind"], log.body["kind"]) where log.body["kind"]
              != nil
            - set(log.attributes["k8s.object.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil
            - delete_key(log.attributes, "k8s.resource.name")
            - delete_key(log.attributes, "event.name")
            - delete_key(log.attributes, "event.domain")
          - conditions:
            - log.body["kind"] == "VulnerabilityReport"
            - log.body["kind"] == "ExposedSecretReport"
            statements:
            - set(log.attributes[Format("k8s.%s.name",[ToLowerCase(log.body["metadata"]["ownerReferences"][0]["kind"])])],
              log.body["metadata"]["ownerReferences"][0]["name"]) where Len(log.body["metadata"]["ownerReferences"])
              > 0
            - delete_key(log.attributes, "k8s.vulnerabilityreport.name")
            - delete_key(log.attributes, "k8s.exposedsecretreport.name")
        transform/namespace:
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/serviceendpointsmapping:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["source.k8s.service.name"], resource.attributes["k8s.service.name"])
              where resource.attributes["k8s.service.name"] != nil
            - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["k8s.deployment.name"])
              where resource.attributes["k8s.deployment.name"] != nil
            - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["k8s.statefulset.name"])
              where resource.attributes["k8s.statefulset.name"] != nil
            - set(resource.attributes["dest.k8s.replicaset.name"], resource.attributes["k8s.replicaset.name"])
              where resource.attributes["k8s.replicaset.name"] != nil
            - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["k8s.daemonset.name"])
              where resource.attributes["k8s.daemonset.name"] != nil
        transform/serviceendpointsmapping-renamepodip:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["k8s.pod.ip"], resource.attributes["sw.k8s.workload.ip"])
              where resource.attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
              and resource.attributes["sw.k8s.workload.ip"] != nil
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.cache["annotations"], log.body["metadata"]["annotations"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["annotations"], "k8s.clusterrolebinding.annotations") where
              log.body["kind"] == "ClusterRoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.clusterrole.annotations") where log.body["kind"]
              == "ClusterRole" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.configmap.annotations") where log.body["kind"]
              == "ConfigMap" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.cronjob.annotations") where log.body["kind"]
              == "CronJob" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.daemonset.annotations") where log.body["kind"]
              == "DaemonSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.deployment.annotations") where log.body["kind"]
              == "Deployment" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpoints.annotations") where log.body["kind"]
              == "Endpoints" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpointslice.annotations") where log.body["kind"]
              == "EndpointSlice" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.ingress.annotations") where log.body["kind"]
              == "Ingress" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.job.annotations") where log.body["kind"]
              == "Job" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.namespace.annotations") where log.body["kind"]
              == "Namespace" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.node.annotations") where log.body["kind"]
              == "Node" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolumeclaim.annotations")
              where log.body["kind"] == "PersistentVolumeClaim" and log.cache["annotations"]
              != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolume.annotations") where
              log.body["kind"] == "PersistentVolume" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.pod.annotations") where log.body["kind"]
              == "Pod" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.replicaset.annotations") where log.body["kind"]
              == "ReplicaSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.rolebinding.annotations") where log.body["kind"]
              == "RoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.role.annotations") where log.body["kind"]
              == "Role" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.serviceaccount.annotations") where
              log.body["kind"] == "ServiceAccount" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.service.annotations") where log.body["kind"]
              == "Service" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.statefulset.annotations") where log.body["kind"]
              == "StatefulSet" and log.cache["annotations"] != nil
            - merge_maps(resource.attributes, log.cache["annotations"], "upsert") where
              (log.body["kind"] == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole"
              or log.body["kind"] == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"]
              == "DaemonSet" or log.body["kind"] == "Deployment" or log.body["kind"] ==
              "Endpoints" or log.body["kind"] == "EndpointSlice" or log.body["kind"] ==
              "Ingress" or log.body["kind"] == "Job" or log.body["kind"] == "Namespace"
              or log.body["kind"] == "Node" or log.body["kind"] == "PersistentVolumeClaim"
              or log.body["kind"] == "PersistentVolume" or log.body["kind"] == "Pod" or
              log.body["kind"] == "ReplicaSet" or log.body["kind"] == "RoleBinding" or log.body["kind"]
              == "Role" or log.body["kind"] == "ServiceAccount" or log.body["kind"] == "Service"
              or log.body["kind"] == "StatefulSet") and log.cache["annotations"] != nil
            - set(log.cache["labels"], log.body["metadata"]["labels"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["labels"], "k8s.clusterrolebinding.labels") where log.body["kind"]
              == "ClusterRoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.clusterrole.labels") where log.body["kind"]
              == "ClusterRole" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.configmap.labels") where log.body["kind"]
              == "ConfigMap" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.cronjob.labels") where log.body["kind"]
              == "CronJob" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.daemonset.labels") where log.body["kind"]
              == "DaemonSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.deployment.labels") where log.body["kind"]
              == "Deployment" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpoints.labels") where log.body["kind"]
              == "Endpoints" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpointslice.labels") where log.body["kind"]
              == "EndpointSlice" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.ingress.labels") where log.body["kind"]
              == "Ingress" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.job.labels") where log.body["kind"] == "Job"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.namespace.labels") where log.body["kind"]
              == "Namespace" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.node.labels") where log.body["kind"] ==
              "Node" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolumeclaim.labels") where log.body["kind"]
              == "PersistentVolumeClaim" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolume.labels") where log.body["kind"]
              == "PersistentVolume" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.pod.labels") where log.body["kind"] == "Pod"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.replicaset.labels") where log.body["kind"]
              == "ReplicaSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.rolebinding.labels") where log.body["kind"]
              == "RoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.role.labels") where log.body["kind"] ==
              "Role" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.serviceaccount.labels") where log.body["kind"]
              == "ServiceAccount" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.service.labels") where log.body["kind"]
              == "Service" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.statefulset.labels") where log.body["kind"]
              == "StatefulSet" and log.cache["labels"] != nil
            - merge_maps(resource.attributes, log.cache["labels"], "upsert") where (log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet") and
              log.cache["labels"] != nil
        transform/severity:
          log_statements:
          - statements:
            - set(log.severity_text, "Error") where log.attributes["k8s.event.reason"] ==
              "Failed" or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_number, 17) where log.attributes["k8s.event.reason"] == "Failed"
              or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_text, "Warning") where log.attributes["k8s.event.reason"]
              == "ProbeWarning" or log.attributes["k8s.event.reason"] == "Unhealthy"
            - set(log.severity_number, 13) where log.attributes["k8s.event.reason"] == "ProbeWarning"
              or log.attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.body, log.body.string)
      receivers:
        k8s_events: null
        swok8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: clusterrolebindings
          - mode: watch
            name: clusterrolebindings
          - interval: 60m
            mode: pull
            name: clusterroles
          - mode: watch
            name: clusterroles
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: endpoints
          - mode: watch
            name: endpoints
          - interval: 60m
            mode: pull
            name: endpointslices
          - mode: watch
            name: endpointslices
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: namespaces
          - mode: watch
            name: namespaces
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: rolebindings
          - mode: watch
            name: rolebindings
          - interval: 60m
            mode: pull
            name: roles
          - mode: watch
            name: roles
          - interval: 60m
            mode: pull
            name: serviceaccounts
          - mode: watch
            name: serviceaccounts
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
        swok8sobjects/keepalive:
          auth_type: serviceAccount
          objects:
          - interval: 20m
            mode: pull
            name: clusterrolebindings
          - interval: 20m
            mode: pull
            name: clusterroles
          - interval: 20m
            mode: pull
            name: configmaps
          - interval: 20m
            mode: pull
            name: cronjobs
          - interval: 20m
            mode: pull
            name: daemonsets
          - interval: 20m
            mode: pull
            name: deployments
          - interval: 20m
            mode: pull
            name: endpoints
          - interval: 20m
            mode: pull
            name: endpointslices
          - interval: 20m
            mode: pull
            name: ingresses
          - interval: 20m
            mode: pull
            name: jobs
          - interval: 20m
            mode: pull
            name: namespaces
          - interval: 20m
            mode: pull
            name: nodes
          - interval: 20m
            mode: pull
            name: persistentvolumeclaims
          - interval: 20m
            mode: pull
            name: persistentvolumes
          - interval: 20m
            mode: pull
            name: pods
          - interval: 20m
            mode: pull
            name: replicasets
          - interval: 20m
            mode: pull
            name: rolebindings
          - interval: 20m
            mode: pull
            name: roles
          - interval: 20m
            mode: pull
            name: serviceaccounts
          - interval: 20m
            mode: pull
            name: services
          - interval: 20m
            mode: pull
            name: statefulsets
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - k8sattributes
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - routing/manifests
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/extract_resource_attrs_from_manifests
            - transform/stringify_body
            - swok8sworkloadstatus
            - groupbyattrs/workloadstatus
            - resource/manifest
            - resourcedetection/providers
            - k8seventgeneration
            - groupbyattrs/serviceendpointsmapping
            - transform/serviceendpointsmapping-renamepodip
            - k8sattributes
            receivers:
            - swok8sobjects
          logs/manifests-export:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - logdedup/entitystateevents
            - transform/scope
            - batch
            receivers:
            - routing/manifests
            - solarwindsentity/serviceendpointsmapping
          logs/manifests-keepalive:
            exporters:
            - solarwindsentity/keepalive
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - resource/manifest
            - k8sattributes
            - k8seventgeneration
            receivers:
            - swok8sobjects/keepalive
          logs/serviceendpointsmapping:
            exporters:
            - solarwindsentity/serviceendpointsmapping
            processors:
            - memory_limiter
            - transform/serviceendpointsmapping
            receivers:
            - routing/manifests
          logs/stateevents:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch
            receivers:
            - solarwindsentity/keepalive
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Events config should not contain manifest collection pipeline when disabled:
  1: |
    events.config: |-
      connectors:
        forward/exportserviceendpointsmapping: {}
        routing/manifests:
          default_pipelines:
          - logs/manifests-export
          table:
          - condition: |
              attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
            context: resource
            pipelines:
            - logs/serviceendpointsmapping
        solarwindsentity/serviceendpointsmapping:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesReplicaSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.replicaset.name
            events:
              relationships:
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesDeployment
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
              - action: update
                attributes: []
                conditions: []
                context: log
                destination_entity: KubernetesReplicaSet
                source_entity: KubernetesService
                type: KubernetesServiceRoutesTo
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 64
          send_batch_size: 64
          timeout: 1s
        filter/k8s_collector_config_include:
          error_mode: ignore
          logs:
            log_record:
            - resource.attributes["k8s.configmap.labels.swo.cloud.solarwinds.com/config-type"]
              != "values-config-map"
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
          - k8s.role.name
          - k8s.rolebinding.name
          - k8s.clusterrole.name
          - k8s.clusterrolebinding.name
          - k8s.serviceaccount.name
          - k8s.endpoint.name
          - k8s.endpointslice.name
        groupbyattrs/serviceendpointsmapping:
          keys:
          - sw.k8s.cluster.uid
          - sw.k8s.workload.ip
          - k8s.service.name
          - k8s.namespace.name
        groupbyattrs/workloadstatus:
          keys:
          - sw.k8s.deployment.status
          - sw.k8s.statefulset.status
          - sw.k8s.daemonset.status
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: resource_attribute
              name: k8s.namespace.name
        k8seventgeneration: null
        logdedup/entitystateevents:
          conditions:
          - instrumentation_scope.attributes["otel.entity.event_as_log"] == true
          include_fields:
          - attributes.otel.entity.event.type
          - attributes.otel.entity_relationship.source_entity.id
          - attributes.otel.entity_relationship.destination_entity.id
          - attributes.otel.entity_relationship.type
          - attributes.otel.entity_relationship.source_entity.type
          - attributes.otel.entity_relationship.destination_entity.type
          interval: 60m
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        resourcedetection/providers:
          azure:
            resource_attributes:
              azure.vm.name:
                enabled: false
              azure.vm.scaleset.name:
                enabled: false
              azure.vm.size:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
          detectors:
          - ec2
          - azure
          - gcp
          ec2:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              host.id:
                enabled: false
              host.image.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
          gcp:
            resource_attributes:
              cloud.availability_zone:
                enabled: false
              gcp.gce.instance.hostname:
                enabled: false
              gcp.gce.instance.name:
                enabled: false
              host.id:
                enabled: false
              host.name:
                enabled: false
              host.type:
                enabled: false
              k8s.cluster.name:
                enabled: false
          override: false
          timeout: 2s
        swok8sworkloadstatus: null
        transform/entity_attributes:
          log_statements:
          - statements:
            - set(resource.attributes["sw.entity.noupdate"], "true")
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.gitrepository.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "GitRepository"
            - set(resource.attributes["k8s.kustomization.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Kustomization"
            - set(resource.attributes["k8s.namespace.name"], log.attributes["k8s.namespace.name"])
              where log.attributes["k8s.namespace.name"] != nil
            - delete_key(log.attributes, "k8s.namespace.name") where log.attributes["k8s.namespace.name"]
              != nil
        transform/extract_resource_attrs_from_manifests:
          error_mode: ignore
          log_statements:
          - conditions:
            - log.body["kind"] == "Pod"
            statements:
            - set(resource.attributes["sw.k8s.pod.status"], log.body["status"]["phase"])
              where log.body["status"]["phase"] != nil
          - conditions:
            - log.body["kind"] == "CronJob"
            statements:
            - set(resource.attributes["sw.k8s.cronjob.suspended"], log.body["spec"]["suspend"])
              where log.body["spec"]["suspend"] != nil
            - set(resource.attributes["sw.k8s.cronjob.schedule"], log.body["spec"]["schedule"])
              where log.body["spec"]["schedule"] != nil
            - set(resource.attributes["sw.k8s.cronjob.concurrencypolicy"], log.body["spec"]["concurrencyPolicy"])
              where log.body["spec"]["concurrencyPolicy"] != nil
            - set(resource.attributes["sw.k8s.cronjob.failedjobshistorylimit"], log.body["spec"]["failedJobsHistoryLimit"])
              where log.body["spec"]["failedJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.successfuljobshistorylimit"], log.body["spec"]["successfulJobsHistoryLimit"])
              where log.body["spec"]["successfulJobsHistoryLimit"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], Len(log.body["status"]["active"]))
              where log.body["status"]["active"] != nil
            - set(resource.attributes["sw.k8s.cronjob.active"], 0) where log.body["status"]["active"]
              == nil
          - conditions:
            - log.body["kind"] == "Service"
            statements:
            - set(resource.attributes["sw.k8s.service.type"], log.body["spec"]["type"])
              where log.body["spec"]["type"] != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(log.attributes["watch.type"], log.body["type"]) where IsMap(log.body)
              and log.body["type"] != nil
            - set(log.body, log.body["object"]) where IsMap(log.body) and log.body["object"]
              != nil
            - set(log.attributes["k8s.clusterrolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRoleBinding"
            - set(log.attributes["k8s.clusterrole.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ClusterRole"
            - set(log.attributes["k8s.configmap.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ConfigMap"
            - set(log.attributes["k8s.cronjob.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "CronJob"
            - set(log.attributes["k8s.daemonset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "DaemonSet"
            - set(log.attributes["k8s.deployment.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Deployment"
            - set(log.attributes["k8s.endpoints.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Endpoints"
            - set(log.attributes["k8s.endpointslice.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "EndpointSlice"
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Ingress"
            - set(log.attributes["k8s.job.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Job"
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Namespace"
            - set(log.attributes["k8s.node.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Node"
            - set(log.attributes["k8s.persistentvolumeclaim.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolumeClaim"
            - set(log.attributes["k8s.persistentvolume.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "PersistentVolume"
            - set(log.attributes["k8s.pod.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Pod"
            - set(log.attributes["k8s.replicaset.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "ReplicaSet"
            - set(log.attributes["k8s.rolebinding.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "RoleBinding"
            - set(log.attributes["k8s.role.name"], log.body["metadata"]["name"]) where log.body["metadata"]["name"]
              != nil and log.body["kind"] == "Role"
            - set(log.attributes["k8s.serviceaccount.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "ServiceAccount"
            - set(log.attributes["k8s.service.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil and log.body["kind"] == "Service"
            - set(log.attributes["k8s.statefulset.name"], log.body["metadata"]["name"])
              where log.body["metadata"]["name"] != nil and log.body["kind"] == "StatefulSet"
            - set(log.attributes["k8s.endpoint.name"], log.attributes["k8s.endpoints.name"])
              where log.attributes["k8s.endpoints.name"] != nil
            - delete_key(log.attributes, "k8s.endpoints.name") where log.attributes["k8s.endpoints.name"]
              != nil
            - set(log.attributes["k8s.namespace.name"], log.body["metadata"]["namespace"])
            - set(log.attributes["k8s.ingress.name"], log.body["metadata"]["name"]) where
              log.body["kind"] == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["sw.k8s.ingress.type"], log.body["kind"]) where log.body["kind"]
              == "Ingress" or log.body["kind"] == "VirtualService"
            - set(log.attributes["k8s.object.kind"], log.body["kind"]) where log.body["kind"]
              != nil
            - set(log.attributes["k8s.object.name"], log.body["metadata"]["name"]) where
              log.body["metadata"]["name"] != nil
            - delete_key(log.attributes, "k8s.resource.name")
            - delete_key(log.attributes, "event.name")
            - delete_key(log.attributes, "event.domain")
          - conditions:
            - log.body["kind"] == "VulnerabilityReport"
            - log.body["kind"] == "ExposedSecretReport"
            statements:
            - set(log.attributes[Format("k8s.%s.name",[ToLowerCase(log.body["metadata"]["ownerReferences"][0]["kind"])])],
              log.body["metadata"]["ownerReferences"][0]["name"]) where Len(log.body["metadata"]["ownerReferences"])
              > 0
            - delete_key(log.attributes, "k8s.vulnerabilityreport.name")
            - delete_key(log.attributes, "k8s.exposedsecretreport.name")
        transform/namespace:
          log_statements:
          - statements:
            - set(log.attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/serviceendpointsmapping:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["source.k8s.service.name"], resource.attributes["k8s.service.name"])
              where resource.attributes["k8s.service.name"] != nil
            - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["k8s.namespace.name"])
              where resource.attributes["k8s.namespace.name"] != nil
            - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["k8s.deployment.name"])
              where resource.attributes["k8s.deployment.name"] != nil
            - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["k8s.statefulset.name"])
              where resource.attributes["k8s.statefulset.name"] != nil
            - set(resource.attributes["dest.k8s.replicaset.name"], resource.attributes["k8s.replicaset.name"])
              where resource.attributes["k8s.replicaset.name"] != nil
            - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["k8s.daemonset.name"])
              where resource.attributes["k8s.daemonset.name"] != nil
        transform/serviceendpointsmapping-renamepodip:
          error_mode: ignore
          log_statements:
          - statements:
            - set(resource.attributes["k8s.pod.ip"], resource.attributes["sw.k8s.workload.ip"])
              where resource.attributes["sw.k8s.log.type"] == "serviceendpointsmapping"
              and resource.attributes["sw.k8s.workload.ip"] != nil
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.cache["annotations"], log.body["metadata"]["annotations"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["annotations"], "k8s.clusterrolebinding.annotations") where
              log.body["kind"] == "ClusterRoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.clusterrole.annotations") where log.body["kind"]
              == "ClusterRole" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.configmap.annotations") where log.body["kind"]
              == "ConfigMap" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.cronjob.annotations") where log.body["kind"]
              == "CronJob" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.daemonset.annotations") where log.body["kind"]
              == "DaemonSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.deployment.annotations") where log.body["kind"]
              == "Deployment" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpoints.annotations") where log.body["kind"]
              == "Endpoints" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.endpointslice.annotations") where log.body["kind"]
              == "EndpointSlice" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.ingress.annotations") where log.body["kind"]
              == "Ingress" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.job.annotations") where log.body["kind"]
              == "Job" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.namespace.annotations") where log.body["kind"]
              == "Namespace" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.node.annotations") where log.body["kind"]
              == "Node" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolumeclaim.annotations")
              where log.body["kind"] == "PersistentVolumeClaim" and log.cache["annotations"]
              != nil
            - flatten(log.cache["annotations"], "k8s.persistentvolume.annotations") where
              log.body["kind"] == "PersistentVolume" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.pod.annotations") where log.body["kind"]
              == "Pod" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.replicaset.annotations") where log.body["kind"]
              == "ReplicaSet" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.rolebinding.annotations") where log.body["kind"]
              == "RoleBinding" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.role.annotations") where log.body["kind"]
              == "Role" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.serviceaccount.annotations") where
              log.body["kind"] == "ServiceAccount" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.service.annotations") where log.body["kind"]
              == "Service" and log.cache["annotations"] != nil
            - flatten(log.cache["annotations"], "k8s.statefulset.annotations") where log.body["kind"]
              == "StatefulSet" and log.cache["annotations"] != nil
            - merge_maps(resource.attributes, log.cache["annotations"], "upsert") where
              (log.body["kind"] == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole"
              or log.body["kind"] == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"]
              == "DaemonSet" or log.body["kind"] == "Deployment" or log.body["kind"] ==
              "Endpoints" or log.body["kind"] == "EndpointSlice" or log.body["kind"] ==
              "Ingress" or log.body["kind"] == "Job" or log.body["kind"] == "Namespace"
              or log.body["kind"] == "Node" or log.body["kind"] == "PersistentVolumeClaim"
              or log.body["kind"] == "PersistentVolume" or log.body["kind"] == "Pod" or
              log.body["kind"] == "ReplicaSet" or log.body["kind"] == "RoleBinding" or log.body["kind"]
              == "Role" or log.body["kind"] == "ServiceAccount" or log.body["kind"] == "Service"
              or log.body["kind"] == "StatefulSet") and log.cache["annotations"] != nil
            - set(log.cache["labels"], log.body["metadata"]["labels"]) where log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet"
            - flatten(log.cache["labels"], "k8s.clusterrolebinding.labels") where log.body["kind"]
              == "ClusterRoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.clusterrole.labels") where log.body["kind"]
              == "ClusterRole" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.configmap.labels") where log.body["kind"]
              == "ConfigMap" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.cronjob.labels") where log.body["kind"]
              == "CronJob" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.daemonset.labels") where log.body["kind"]
              == "DaemonSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.deployment.labels") where log.body["kind"]
              == "Deployment" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpoints.labels") where log.body["kind"]
              == "Endpoints" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.endpointslice.labels") where log.body["kind"]
              == "EndpointSlice" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.ingress.labels") where log.body["kind"]
              == "Ingress" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.job.labels") where log.body["kind"] == "Job"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.namespace.labels") where log.body["kind"]
              == "Namespace" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.node.labels") where log.body["kind"] ==
              "Node" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolumeclaim.labels") where log.body["kind"]
              == "PersistentVolumeClaim" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.persistentvolume.labels") where log.body["kind"]
              == "PersistentVolume" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.pod.labels") where log.body["kind"] == "Pod"
              and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.replicaset.labels") where log.body["kind"]
              == "ReplicaSet" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.rolebinding.labels") where log.body["kind"]
              == "RoleBinding" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.role.labels") where log.body["kind"] ==
              "Role" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.serviceaccount.labels") where log.body["kind"]
              == "ServiceAccount" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.service.labels") where log.body["kind"]
              == "Service" and log.cache["labels"] != nil
            - flatten(log.cache["labels"], "k8s.statefulset.labels") where log.body["kind"]
              == "StatefulSet" and log.cache["labels"] != nil
            - merge_maps(resource.attributes, log.cache["labels"], "upsert") where (log.body["kind"]
              == "ClusterRoleBinding" or log.body["kind"] == "ClusterRole" or log.body["kind"]
              == "ConfigMap" or log.body["kind"] == "CronJob" or log.body["kind"] == "DaemonSet"
              or log.body["kind"] == "Deployment" or log.body["kind"] == "Endpoints" or
              log.body["kind"] == "EndpointSlice" or log.body["kind"] == "Ingress" or log.body["kind"]
              == "Job" or log.body["kind"] == "Namespace" or log.body["kind"] == "Node"
              or log.body["kind"] == "PersistentVolumeClaim" or log.body["kind"] == "PersistentVolume"
              or log.body["kind"] == "Pod" or log.body["kind"] == "ReplicaSet" or log.body["kind"]
              == "RoleBinding" or log.body["kind"] == "Role" or log.body["kind"] == "ServiceAccount"
              or log.body["kind"] == "Service" or log.body["kind"] == "StatefulSet") and
              log.cache["labels"] != nil
        transform/severity:
          log_statements:
          - statements:
            - set(log.severity_text, "Error") where log.attributes["k8s.event.reason"] ==
              "Failed" or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_number, 17) where log.attributes["k8s.event.reason"] == "Failed"
              or log.attributes["k8s.event.reason"] == "BackOff" or log.attributes["k8s.event.reason"]
              == "FailedKillPod" or log.attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or log.attributes["k8s.event.reason"] == "NetworkNotReady" or log.attributes["k8s.event.reason"]
              == "InspectFailed" or log.attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or log.attributes["k8s.event.reason"] == "NodeNotReady" or log.attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or log.attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or log.attributes["k8s.event.reason"] == "FailedAttachVolume" or log.attributes["k8s.event.reason"]
              == "FailedMount" or log.attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or log.attributes["k8s.event.reason"] == "FileSystemResizeFailed" or log.attributes["k8s.event.reason"]
              == "FailedMapVolume" or log.attributes["k8s.event.reason"] == "ContainerGCFailed"
              or log.attributes["k8s.event.reason"] == "ImageGCFailed" or log.attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or log.attributes["k8s.event.reason"]
              == "FailedCreatePodSandBox" or log.attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or log.attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch"
              or log.attributes["k8s.event.reason"] == "InvalidDiskCapacity" or log.attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or log.attributes["k8s.event.reason"] == "FailedSync"
              or log.attributes["k8s.event.reason"] == "FailedValidation" or log.attributes["k8s.event.reason"]
              == "FailedPostStartHook" or log.attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(log.severity_text, "Warning") where log.attributes["k8s.event.reason"]
              == "ProbeWarning" or log.attributes["k8s.event.reason"] == "Unhealthy"
            - set(log.severity_number, 13) where log.attributes["k8s.event.reason"] == "ProbeWarning"
              or log.attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.body, log.body.string)
      receivers:
        k8s_events: null
        swok8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - k8sattributes
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - routing/manifests
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - filter/k8s_collector_config_include
            - transform/extract_resource_attrs_from_manifests
            - transform/stringify_body
            - swok8sworkloadstatus
            - groupbyattrs/workloadstatus
            - resource/manifest
            - resourcedetection/providers
            - k8seventgeneration
            - groupbyattrs/serviceendpointsmapping
            - transform/serviceendpointsmapping-renamepodip
            - k8sattributes
            receivers:
            - swok8sobjects
          logs/manifests-export:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - logdedup/entitystateevents
            - transform/scope
            - batch
            receivers:
            - routing/manifests
            - solarwindsentity/serviceendpointsmapping
          logs/serviceendpointsmapping:
            exporters:
            - solarwindsentity/serviceendpointsmapping
            processors:
            - memory_limiter
            - transform/serviceendpointsmapping
            receivers:
            - routing/manifests
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
