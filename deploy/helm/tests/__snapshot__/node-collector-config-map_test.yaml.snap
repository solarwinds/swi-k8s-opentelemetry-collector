Custom logs filter with new syntax:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/metric-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
        k8s_observer:
          auth_type: serviceAccount
          node: ${NODE_NAME}
          observe_nodes: true
          observe_pods: true
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          - action: insert
            from_attribute: kubernetes_io_hostname
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/logs:
          logs:
            log_record:
            - not(IsMatch(resource.attributes["k8s.namespace.name"], "^.*$"))
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], resource.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], resource.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: container-parser
            type: container
          - field: resource["k8s.container.restart_count"]
            type: remove
          - field: attributes["log.file.path"]
            type: remove
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/discovery/http:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                != "https"
            prometheus/discovery/https:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                == "https"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
        receiver_creator/node:
          receivers:
            prometheus/node:
              config:
                config:
                  scrape_configs:
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes-cadvisor
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics/cadvisor
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "k8s.node"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        - k8s_observer
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            - filter/logs
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - k8sattributes
            - filter/remove_temporary_metrics
            - transform/scope
            - batch/metrics
            receivers:
            - forward/metric-exporter
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/node:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/receiver
            - filter/remove_internal
            - attributes/remove_prometheus_attributes
            - attributes/unify_node_attribute
            - transform/unify_node_attribute
            - metricstransform/rename
            - metricstransform/preprocessing
            - filter/remove_internal_postprocessing
            - attributes/remove_temp
            - cumulativetodelta/cadvisor
            - deltatorate/cadvisor
            - groupbyattrs/node
            - groupbyattrs/pod
            - groupbyattrs/all
            - resource/metrics
            - resource/all
            receivers:
            - receiver_creator/node
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Custom logs filter with old syntax:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/metric-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
        k8s_observer:
          auth_type: serviceAccount
          node: ${NODE_NAME}
          observe_nodes: true
          observe_pods: true
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          - action: insert
            from_attribute: kubernetes_io_hostname
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/logs:
          logs:
            include:
              match_type: regexp
              record_attributes:
              - key: k8s.namespace.name
                value: ^.*$
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], log.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], log.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: get-format
            routes:
            - expr: body matches "^\\{"
              output: parser-docker
            - expr: body matches "^[^ Z]+ "
              output: parser-crio
            - expr: body matches "^[^ Z]+Z"
              output: parser-containerd
            type: router
          - id: parser-crio
            output: merge-cri-lines
            parse_to: body
            regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$
            timestamp:
              layout: "2006-01-02T15:04:05.999999999-07:00"
              layout_type: gotime
              parse_from: body.time
            type: regex_parser
          - id: parser-containerd
            output: merge-cri-lines
            parse_to: body
            regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: body.time
            type: regex_parser
          - id: parser-docker
            output: merge-docker-lines
            parse_to: body
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: body.time
            type: json_parser
          - combine_field: body.log
            combine_with: ""
            id: merge-docker-lines
            is_last_entry: body.log matches "\n$"
            max_unmatched_batch_size: 1
            output: merge-multiline-logs
            source_identifier: attributes["log.file.path"]
            type: recombine
          - combine_field: body.log
            combine_with: ""
            id: merge-cri-lines
            is_last_entry: body.logtag == "F"
            max_unmatched_batch_size: 1
            output: merge-multiline-logs
            overwrite_with: newest
            source_identifier: attributes["log.file.path"]
            type: recombine
          - combine_field: body.log
            combine_with: ""
            id: merge-multiline-logs
            is_first_entry: body.log matches "^\\[?\\d{4}-\\d{1,2}-\\d{1,2}.\\d{2}:\\d{2}:\\d{2}.*"
            max_unmatched_batch_size: 1
            output: extract-metadata-from-filepath
            source_identifier: attributes["log.file.path"]
            type: recombine
          - id: extract-metadata-from-filepath
            parse_from: attributes["log.file.path"]
            regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<run_id>\d+)\.log$
            type: regex_parser
          - from: body.stream
            id: move-attributes
            to: attributes["stream"]
            type: move
          - from: attributes.container_name
            to: attributes["k8s.container.name"]
            type: move
          - from: attributes.namespace
            to: attributes["k8s.namespace.name"]
            type: move
          - from: attributes.pod_name
            to: attributes["k8s.pod.name"]
            type: move
          - field: attributes.run_id
            type: remove
          - from: attributes.uid
            to: attributes["k8s.pod.uid"]
            type: move
          - field: attributes["log.file.path"]
            type: remove
          - field: body.time
            type: remove
          - from: body.log
            to: body
            type: move
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/discovery/http:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                != "https"
            prometheus/discovery/https:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                == "https"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
        receiver_creator/node:
          receivers:
            prometheus/node:
              config:
                config:
                  scrape_configs:
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes-cadvisor
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics/cadvisor
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "k8s.node"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        - k8s_observer
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - filter/logs
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - k8sattributes
            - filter/remove_temporary_metrics
            - transform/scope
            - batch/metrics
            receivers:
            - forward/metric-exporter
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/node:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/receiver
            - filter/remove_internal
            - attributes/remove_prometheus_attributes
            - attributes/unify_node_attribute
            - transform/unify_node_attribute
            - metricstransform/rename
            - metricstransform/preprocessing
            - filter/remove_internal_postprocessing
            - attributes/remove_temp
            - cumulativetodelta/cadvisor
            - deltatorate/cadvisor
            - groupbyattrs/node
            - groupbyattrs/pod
            - groupbyattrs/all
            - resource/metrics
            - resource/all
            receivers:
            - receiver_creator/node
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Node collector config should match snapshot when autodiscovery is disabled:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/metric-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
        k8s_observer:
          auth_type: serviceAccount
          node: ${NODE_NAME}
          observe_nodes: true
          observe_pods: true
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          - action: insert
            from_attribute: kubernetes_io_hostname
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], resource.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], resource.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: container-parser
            type: container
          - field: resource["k8s.container.restart_count"]
            type: remove
          - field: attributes["log.file.path"]
            type: remove
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
        receiver_creator/node:
          receivers:
            prometheus/node:
              config:
                config:
                  scrape_configs:
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes-cadvisor
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics/cadvisor
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "k8s.node"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        - k8s_observer
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - k8sattributes
            - filter/remove_temporary_metrics
            - transform/scope
            - batch/metrics
            receivers:
            - forward/metric-exporter
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/node:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/receiver
            - filter/remove_internal
            - attributes/remove_prometheus_attributes
            - attributes/unify_node_attribute
            - transform/unify_node_attribute
            - metricstransform/rename
            - metricstransform/preprocessing
            - filter/remove_internal_postprocessing
            - attributes/remove_temp
            - cumulativetodelta/cadvisor
            - deltatorate/cadvisor
            - groupbyattrs/node
            - groupbyattrs/pod
            - groupbyattrs/all
            - resource/metrics
            - resource/all
            receivers:
            - receiver_creator/node
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Node collector config should match snapshot when fargate is enabled:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/metric-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
        k8s_observer:
          auth_type: serviceAccount
          node: ${NODE_NAME}
          observe_nodes: true
          observe_pods: true
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], resource.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], resource.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: container-parser
            type: container
          - field: resource["k8s.container.restart_count"]
            type: remove
          - field: attributes["log.file.path"]
            type: remove
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/discovery/http:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                != "https"
            prometheus/discovery/https:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                == "https"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        - k8s_observer
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - k8sattributes
            - filter/remove_temporary_metrics
            - transform/scope
            - batch/metrics
            receivers:
            - forward/metric-exporter
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Node collector config should match snapshot when fargate is enabled and autodiscovery is disabled:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], resource.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], resource.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: container-parser
            type: container
          - field: resource["k8s.container.restart_count"]
            type: remove
          - field: attributes["log.file.path"]
            type: remove
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
Node collector config should match snapshot when using default values:
  1: |
    logs.config: |
      connectors:
        forward/discovery-istio-metrics-clean: {}
        forward/istio-workload-service-filtering: {}
        forward/istio-workload-workload-filtering: {}
        forward/logs-exporter: {}
        forward/metric-exporter: {}
        forward/not-relationship-state-events: {}
        forward/relationship-state-events-workload-service: {}
        forward/relationship-state-events-workload-workload: {}
        routing/discovered_metrics:
          default_pipelines:
          - metrics/discovery-custom
          table:
          - condition: |
              IsMatch(name, "k8s.istio_")
            context: metric
            pipelines:
            - metrics/discovery-istio
        solarwindsentity/istio-workload-service:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
        solarwindsentity/istio-workload-workload:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            events:
              relationships:
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - istio
                - tcp
                - http
                - grpc
                conditions:
                - metric.name == "k8s.istio_request_bytes.delta"
                - metric.name == "k8s.istio_response_bytes.delta"
                - metric.name == "k8s.istio_requests.delta"
                - metric.name == "k8s.istio_tcp_sent_bytes.delta"
                - metric.name == "k8s.istio_tcp_received_bytes.delta"
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          timeout: 15s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        file_storage/checkpoints:
          directory: /var/lib/swo/checkpoints
          fsync: true
          timeout: 5s
        health_check:
          endpoint: 0.0.0.0:13133
        k8s_observer:
          auth_type: serviceAccount
          node: ${NODE_NAME}
          observe_nodes: true
          observe_pods: true
      processors:
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*__swo_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          - action: insert
            from_attribute: kubernetes_io_hostname
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
        batch/logs:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/metrics:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        batch/stateevents:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        cumulativetodelta/cadvisor:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
          max_staleness: 180s
        cumulativetodelta/istio-metrics:
          include:
            match_type: strict
            metrics:
            - k8s.istio_request_bytes.rate
            - k8s.istio_response_bytes.rate
            - k8s.istio_request_duration_milliseconds_sum__swo_temp
            - k8s.istio_request_duration_milliseconds_count__swo_temp
            - k8s.istio_requests.rate
            - k8s.istio_tcp_sent_bytes.rate
            - k8s.istio_tcp_received_bytes.rate
            - k8s.istio_request_bytes.delta
            - k8s.istio_response_bytes.delta
            - k8s.istio_requests.delta
            - k8s.istio_tcp_sent_bytes.delta
            - k8s.istio_tcp_received_bytes.delta
          max_staleness: 180s
        deltatorate/cadvisor:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        deltatorate/istio-metrics:
          metrics:
          - k8s.istio_request_bytes.rate
          - k8s.istio_response_bytes.rate
          - k8s.istio_request_duration_milliseconds_sum__swo_temp
          - k8s.istio_request_duration_milliseconds_count__swo_temp
          - k8s.istio_requests.rate
          - k8s.istio_tcp_sent_bytes.rate
          - k8s.istio_tcp_received_bytes.rate
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds"
              or name == "k8s.etcd_disk_backend_commit_duration_seconds")
        filter/keep-entity-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_state")
        filter/keep-not-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - not(datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil)))
        filter/keep-relationship-state-events:
          logs:
            log_record:
            - not(attributes["otel.entity.event.type"] == "entity_relationship_state")
        filter/keep-workload-service-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["source_workload_type"]
              == "" or ((datapoint.attributes["destination_service_type"] == "" or datapoint.attributes["destination_service_type"]
              == nil) and (datapoint.attributes["dest.sw.server.address.fqdn"] == "" or
              datapoint.attributes["dest.sw.server.address.fqdn"] == nil))
        filter/keep-workload-workload-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload_type"] == nil or datapoint.attributes["destination_workload_type"]
              == nil or datapoint.attributes["source_workload_type"] == "" or datapoint.attributes["destination_workload_type"]
              == ""
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*__swo_temp$")
        filter/self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - datapoint.attributes["source_workload"] == datapoint.attributes["destination_workload"]
              and datapoint.attributes["source_workload_namespace"] == datapoint.attributes["destination_workload_namespace"]
        filter/zero-delta-values:
          error_mode: ignore
          metrics:
            datapoint:
            - IsMatch(metric.name, ".*\\.delta$") and value_double == 0.0
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/common-all:
          keys:
          - k8s.container.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - host.name
          - service.name
        groupbyattrs/istio-relationships:
          keys:
          - sw.k8s.cluster.uid
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.namespace.name
          - dest.k8s.service.name
          - dest.sw.server.address.fqdn
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
          filter:
            node_from_env_var: NODE_NAME
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_mib: 800
          spike_limit_mib: 300
        metricsgeneration/istio-metrics:
          rules:
          - metric1: k8s.istio_request_duration_milliseconds_sum__swo_temp
            metric2: k8s.istio_request_duration_milliseconds_count__swo_temp
            name: k8s.istio_request_duration_milliseconds.rate
            operation: divide
            type: calculate
        metricstransform/istio-metrics:
          transforms:
          - action: insert
            include: k8s.istio_request_bytes_sum
            new_name: k8s.istio_request_bytes.rate
          - action: insert
            include: k8s.istio_response_bytes_sum
            new_name: k8s.istio_response_bytes.rate
          - action: insert
            include: k8s.istio_requests_total
            new_name: k8s.istio_requests.rate
          - action: insert
            include: k8s.istio_tcp_sent_bytes_total
            new_name: k8s.istio_tcp_sent_bytes.rate
          - action: insert
            include: k8s.istio_tcp_received_bytes_total
            new_name: k8s.istio_tcp_received_bytes.rate
          - action: insert
            include: k8s.istio_request_bytes.rate
            new_name: k8s.istio_request_bytes.delta
          - action: insert
            include: k8s.istio_response_bytes.rate
            new_name: k8s.istio_response_bytes.delta
          - action: insert
            include: k8s.istio_requests.rate
            new_name: k8s.istio_requests.delta
          - action: insert
            include: k8s.istio_tcp_sent_bytes.rate
            new_name: k8s.istio_tcp_sent_bytes.delta
          - action: insert
            include: k8s.istio_tcp_received_bytes.rate
            new_name: k8s.istio_tcp_received_bytes.delta
        metricstransform/preprocessing:
          transforms:
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total__swo_temp|k8s.container_fs_writes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total__swo_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total__swo_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total__swo_temp|k8s.container_fs_writes_bytes_total__swo_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate__swo_temp|k8s.pod.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate__swo_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate__swo_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate__swo_temp|k8s.pod.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate__swo_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate__swo_temp|k8s.node.fs.writes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate__swo_temp|k8s.node.fs.writes.bytes.rate__swo_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
              namespace: ""
              pod: ""
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        metricstransform/rename/discovery:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/all:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: upsert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: istio
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        resource/container:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: container
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/journal:
          attributes:
          - action: insert
            key: sw.k8s.log.type
            value: journal
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: k8s.node.name
            value: ${NODE_NAME}
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        swok8sworkloadtype/istio:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: source_workload
            namespace_attr: source_workload_namespace
            workload_type_attr: source_workload_type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            name_attr: destination_workload
            namespace_attr: destination_workload_namespace
            workload_type_attr: destination_workload_type
          - expected_types:
            - services
            name_attr: destination_service_name
            namespace_attr: destination_service_namespace
            workload_type_attr: destination_service_type
        transform/istio-metric-datapoints:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["destination_service"])
              where metric.name == "k8s.istio_request_bytes_sum" and IsMatch(datapoint.attributes["destination_service"],
              "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["destination_service"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["destination_service"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
        transform/istio-metrics:
          metric_statements:
          - statements:
            - extract_sum_metric(true) where (metric.name == "k8s.istio_request_bytes" or
              metric.name == "k8s.istio_response_bytes" or metric.name == "k8s.istio_request_duration_milliseconds")
            - extract_count_metric(true) where (metric.name == "k8s.istio_request_duration_milliseconds")
            - set(metric.name, "k8s.istio_request_duration_milliseconds_sum__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_sum"
            - set(metric.name, "k8s.istio_request_duration_milliseconds_count__swo_temp")
              where metric.name == "k8s.istio_request_duration_milliseconds_count"
            - set(resource.attributes["istio"], "true")
        transform/istio-parse-service-fqdn:
          error_mode: ignore
          metric_statements:
          - context: datapoint
            statements:
            - set(datapoint.attributes["destination_service_name"], datapoint.attributes["destination_service"])
              where IsMatch(datapoint.attributes["destination_service"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*(\\.(svc|svc\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*))?(:\\d+)?$")
              and datapoint.attributes["destination_service_name"] == "PassthroughCluster"
            - replace_pattern(datapoint.attributes["destination_service_name"], "^([a-zA-Z0-9][-a-zA-Z0-9]*)\\..*$",
              "$$1") where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.")
            - set(datapoint.attributes["destination_service_namespace"], datapoint.attributes["destination_service"])
              where datapoint.attributes["destination_service_name"] != nil and IsMatch(datapoint.attributes["destination_service_name"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$") and datapoint.attributes["destination_service_namespace"]
              == "unknown"
            - replace_pattern(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.([a-zA-Z0-9][-a-zA-Z0-9]*)(\\..*)?$",
              "$$1") where datapoint.attributes["destination_service_namespace"] != nil
              and IsMatch(datapoint.attributes["destination_service_namespace"], "^[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9]*")
            - set(datapoint.attributes["destination_service_type"], "Service") where (datapoint.attributes["destination_service_type"]
              == nil or datapoint.attributes["destination_service_type"] == "") and datapoint.attributes["destination_service_name"]
              != nil and IsMatch(datapoint.attributes["destination_service_name"], "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
              and datapoint.attributes["destination_service_namespace"] != nil and IsMatch(datapoint.attributes["destination_service_namespace"],
              "^[a-zA-Z0-9][-a-zA-Z0-9]*$")
        transform/istio-relationship-types:
          metric_statements:
          - statements:
            - set(resource.attributes["tcp"], "true") where (metric.name == "k8s.istio_tcp_sent_bytes_total"
              or metric.name == "k8s.istio_tcp_received_bytes_total") and datapoint.attributes["request_protocol"]
              == "tcp"
            - set(resource.attributes["http"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "http"
            - set(resource.attributes["grpc"], "true") where (metric.name == "k8s.istio_request_bytes.delta"
              or metric.name == "k8s.istio_response_bytes.delta") and datapoint.attributes["request_protocol"]
              == "grpc"
        transform/istio-workload-service:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.service.name"], datapoint.attributes["destination_service_name"])
            where datapoint.attributes["destination_service_type"] == "Service"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_service_namespace"])
        transform/istio-workload-workload:
          metric_statements:
          - set(datapoint.attributes["source.k8s.deployment.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "Deployment"
          - set(datapoint.attributes["source.k8s.statefulset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["source.k8s.daemonset.name"], datapoint.attributes["source_workload"])
            where datapoint.attributes["source_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["source.k8s.namespace.name"], datapoint.attributes["source_workload_namespace"])
          - set(datapoint.attributes["dest.k8s.deployment.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "Deployment"
          - set(datapoint.attributes["dest.k8s.statefulset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "StatefulSet"
          - set(datapoint.attributes["dest.k8s.daemonset.name"], datapoint.attributes["destination_workload"])
            where datapoint.attributes["destination_workload_type"] == "DaemonSet"
          - set(datapoint.attributes["dest.k8s.namespace.name"], datapoint.attributes["destination_workload_namespace"])
        transform/only-relationship-resource-attributes:
          metric_statements:
          - set(resource.attributes["sw.server.address.fqdn"], resource.attributes["dest.sw.server.address.fqdn"])
            where resource.attributes["dest.sw.server.address.fqdn"] != nil
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
        transform/syslogify:
          error_mode: ignore
          log_statements:
          - statements:
            - set(log.attributes["host.name"], resource.attributes["k8s.pod.name"])
            - set(log.attributes["service.name"], resource.attributes["k8s.container.name"])
        transform/unify_node_attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and datapoint.attributes["k8s.node.name"]
              == nil
      receivers:
        filelog:
          encoding: utf-8
          exclude:
          - /var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log
          fingerprint_size: 1kb
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          max_concurrent_files: 10
          max_log_size: 1MiB
          operators:
          - id: container-parser
            type: container
          - field: resource["k8s.container.restart_count"]
            type: remove
          - field: attributes["log.file.path"]
            type: remove
          poll_interval: 200ms
          start_at: end
          storage: file_storage/checkpoints
        journald:
          files:
          - /*/log/journal/**/*
          units:
          - kubelet
          - docker
          - containerd
        receiver_creator/discovery:
          receivers:
            prometheus/controller-manager:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-controller-manager
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:10257'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && labels["component"] == "kube-controller-manager"
            prometheus/discovery/http:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                != "https"
            prometheus/discovery/https:
              config:
                config:
                  scrape_configs:
                  - authorization:
                      credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                      type: Bearer
                    enable_http2: true
                    follow_redirects: true
                    honor_labels: true
                    honor_timestamps: false
                    job_name: pod
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"]
                      : "/metrics"`'
                    scheme: https
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"]
                        : 9090`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"]
                == "https"
            prometheus/etcd:
              config:
                config:
                  scrape_configs:
                  - honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-etcd
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: http
                    scrape_interval: 60s
                    static_configs:
                    - targets:
                      - '`endpoint`:2379'
              rule: type == "pod" && labels["component"] == "etcd"
          watch_observers:
          - k8s_observer
        receiver_creator/node:
          receivers:
            prometheus/node:
              config:
                config:
                  scrape_configs:
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes-cadvisor
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics/cadvisor
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    honor_labels: true
                    honor_timestamps: false
                    job_name: kubernetes-nodes
                    metric_relabel_configs:
                    - action: replace
                      regex: (.+)
                      replacement: $1
                      source_labels:
                      - service_name
                      target_label: job
                    - action: labeldrop
                      regex: ^service_name$
                    metrics_path: /metrics
                    scheme: https
                    scrape_interval: 60s
                    scrape_timeout: 10s
                    static_configs:
                    - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
                    tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
              rule: type == "k8s.node"
          watch_observers:
          - k8s_observer
      service:
        extensions:
        - file_storage/checkpoints
        - health_check
        - k8s_observer
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - batch/logs
            receivers:
            - forward/logs-exporter
          logs/container:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - transform/syslogify
            - groupbyattrs/common-all
            - resource/container
            - k8sattributes
            receivers:
            - filelog
          logs/journal:
            exporters:
            - forward/logs-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/journal
            receivers:
            - journald
          logs/stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-entity-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          logs/stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/keep-relationship-state-events
            - transform/scope
            - logdedup/solarwindsentity
            - batch/stateevents
            receivers:
            - solarwindsentity/istio-workload-workload
            - solarwindsentity/istio-workload-service
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - k8sattributes
            - filter/remove_temporary_metrics
            - transform/scope
            - batch/metrics
            receivers:
            - forward/metric-exporter
          metrics/discovery-custom:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio:
            exporters:
            - forward/relationship-state-events-workload-workload
            - forward/relationship-state-events-workload-service
            - forward/not-relationship-state-events
            processors:
            - memory_limiter
            - transform/istio-parse-service-fqdn
            - swok8sworkloadtype/istio
            - transform/istio-metrics
            - transform/istio-metric-datapoints
            - metricstransform/istio-metrics
            - cumulativetodelta/istio-metrics
            - deltatorate/istio-metrics
            - metricsgeneration/istio-metrics
            - groupbyattrs/common-all
            - resource/all
            receivers:
            - routing/discovered_metrics
          metrics/discovery-istio-clean:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - resource/clean-temporary-attributes
            receivers:
            - forward/discovery-istio-metrics-clean
          metrics/discovery-scrape:
            exporters:
            - routing/discovered_metrics
            processors:
            - memory_limiter
            - metricstransform/rename/discovery
            receivers:
            - receiver_creator/discovery
          metrics/node:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/receiver
            - filter/remove_internal
            - attributes/remove_prometheus_attributes
            - attributes/unify_node_attribute
            - transform/unify_node_attribute
            - metricstransform/rename
            - metricstransform/preprocessing
            - filter/remove_internal_postprocessing
            - attributes/remove_temp
            - cumulativetodelta/cadvisor
            - deltatorate/cadvisor
            - groupbyattrs/node
            - groupbyattrs/pod
            - groupbyattrs/all
            - resource/metrics
            - resource/all
            receivers:
            - receiver_creator/node
          metrics/not-relationship-state-events-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            processors:
            - memory_limiter
            - filter/keep-not-relationships
            receivers:
            - forward/not-relationship-state-events
          metrics/relationship-state-events-workload-service-filtering:
            exporters:
            - solarwindsentity/istio-workload-service
            processors:
            - memory_limiter
            - filter/zero-delta-values
            receivers:
            - forward/istio-workload-service-filtering
          metrics/relationship-state-events-workload-service-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-service-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-service-relationships
            - transform/istio-workload-service
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-service
          metrics/relationship-state-events-workload-workload-filtering:
            exporters:
            - solarwindsentity/istio-workload-workload
            processors:
            - memory_limiter
            - filter/zero-delta-values
            - filter/self-loop-relationships
            receivers:
            - forward/istio-workload-workload-filtering
          metrics/relationship-state-events-workload-workload-preparation:
            exporters:
            - forward/discovery-istio-metrics-clean
            - forward/istio-workload-workload-filtering
            processors:
            - memory_limiter
            - filter/keep-workload-workload-relationships
            - transform/istio-workload-workload
            - groupbyattrs/istio-relationships
            - transform/only-relationship-resource-attributes
            - transform/istio-relationship-types
            receivers:
            - forward/relationship-state-events-workload-workload
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
