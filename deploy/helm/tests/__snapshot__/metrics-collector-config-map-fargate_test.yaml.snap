Metrics config should match snapshot when using default values:
  1: |
    metrics.config: |-
      connectors:
        forward/metric-exporter: null
        forward/prometheus: null
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 20
            queue_size: 1000
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        attributes/attributes_namespace_status:
          actions:
          - action: insert
            from_attribute: phase
            key: sw.k8s.namespace.status
          include:
            match_type: regexp
            metric_names:
            - k8s.kube_namespace_status_phase
        attributes/attributes_pod_status:
          actions:
          - action: insert
            from_attribute: phase
            key: sw.k8s.pod.status
          include:
            match_type: regexp
            metric_names:
            - kube_pod_status_phase
        attributes/identify_init_container:
          actions:
          - action: insert
            key: sw.k8s.container.init
            value: "true"
          include:
            match_type: regexp
            metric_names:
            - kube_pod_init_container_.*
        attributes/identify_standard_container:
          actions:
          - action: insert
            key: sw.k8s.container.init
            value: "false"
          include:
            match_type: regexp
            metric_names:
            - kube_pod_container_.*
        attributes/remove_prometheus_attributes:
          actions:
          - action: delete
            key: prometheus
          - action: delete
            key: prometheus_replica
        attributes/remove_prometheus_attributes_endpoint:
          actions:
          - action: delete
            key: endpoint
          exclude:
            match_type: regexp
            metric_names:
            - kube_endpoint_.*
        attributes/remove_temp:
          actions:
          - action: delete
            key: temp
            pattern: (.*_temp$)|(^\$.*)
          include:
            match_type: regexp
            metric_names:
            - .*
        attributes/unify_endpoint_attribute:
          actions:
          - action: insert
            from_attribute: endpoint
            key: k8s.service.name
          include:
            match_type: regexp
            metric_names:
            - kube_endpoint_.*
        attributes/unify_node_attribute:
          actions:
          - action: insert
            from_attribute: node
            key: k8s.node.name
          include:
            match_type: regexp
            metric_names:
            - container_.*
            - kube_node_.*
            - kube_pod_info
            - kube_pod_container_resource_requests
            - kube_pod_container_resource_limits
            - kube_pod_init_container_resource_requests
            - kube_pod_init_container_resource_limits
            - k8s.node_cpu_hourly_cost
            - k8s.node_gpu_hourly_cost
            - k8s.node_ram_hourly_cost
            - k8s.node_total_hourly_cost
            - k8s.node_gpu_count
            - k8s.kubecost_node_is_spot
        attributes/unify_pod_attribute:
          actions:
          - action: insert
            from_attribute: uid
            key: k8s.pod.uid
          include:
            match_type: regexp
            metric_names:
            - kube_pod_.*
        attributes/unify_service_attribute:
          actions:
          - action: insert
            from_attribute: service
            key: k8s.service.name
          - action: insert
            from_attribute: external_name
            key: sw.k8s.service.external_name
          - action: insert
            from_attribute: type
            key: sw.k8s.service.type
          - action: insert
            from_attribute: cluster_ip
            key: sw.k8s.cluster.ip
          include:
            match_type: regexp
            metric_names:
            - kube_service_.*
        attributes/unify_volume_attribute:
          actions:
          - action: insert
            from_attribute: volumename
            key: persistentvolume
          - action: insert
            from_attribute: name
            key: persistentvolumeclaim
          - action: upsert
            from_attribute: claim_namespace
            key: namespace
          include:
            match_type: regexp
            metric_names:
            - kube_persistentvolumeclaim_.*
            - kube_persistentvolume_claim_ref
        batch:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        cumulativetodelta:
          include:
            match_type: strict
            metrics:
            - k8s.node.cpu.usage.seconds.rate
            - k8s.pod.cpu.usage.seconds.rate
            - k8s.container.fs.iops
            - k8s.container.fs.throughput
            - k8s.container.cpu.usage.seconds.rate
            - k8s.container.network.bytes_received
            - k8s.container.network.bytes_transmitted
            - k8s.pod.fs.iops
            - k8s.pod.fs.throughput
            - k8s.pod.fs.reads.rate
            - k8s.pod.fs.writes.rate
            - k8s.pod.fs.reads.bytes.rate
            - k8s.pod.fs.writes.bytes.rate
            - k8s.pod.network.bytes_received
            - k8s.pod.network.bytes_transmitted
            - k8s.pod.network.packets_received
            - k8s.pod.network.packets_transmitted
            - k8s.pod.network.receive_packets_dropped
            - k8s.pod.network.transmit_packets_dropped
            - k8s.node.fs.iops
            - k8s.node.fs.throughput
            - k8s.node.network.bytes_received
            - k8s.node.network.bytes_transmitted
            - k8s.node.network.packets_received
            - k8s.node.network.packets_transmitted
            - k8s.node.network.receive_packets_dropped
            - k8s.node.network.transmit_packets_dropped
            - apiserver_request_not_failed_temp
            - apiserver_request_total_temp
        deltatorate:
          metrics:
          - k8s.node.cpu.usage.seconds.rate
          - k8s.pod.cpu.usage.seconds.rate
          - k8s.container.fs.iops
          - k8s.container.fs.throughput
          - k8s.container.cpu.usage.seconds.rate
          - k8s.container.network.bytes_received
          - k8s.container.network.bytes_transmitted
          - k8s.pod.fs.iops
          - k8s.pod.fs.throughput
          - k8s.pod.fs.reads.rate
          - k8s.pod.fs.writes.rate
          - k8s.pod.fs.reads.bytes.rate
          - k8s.pod.fs.writes.bytes.rate
          - k8s.pod.network.bytes_received
          - k8s.pod.network.bytes_transmitted
          - k8s.pod.network.packets_received
          - k8s.pod.network.packets_transmitted
          - k8s.pod.network.receive_packets_dropped
          - k8s.pod.network.transmit_packets_dropped
          - k8s.node.fs.iops
          - k8s.node.fs.throughput
          - k8s.node.network.bytes_received
          - k8s.node.network.bytes_transmitted
          - k8s.node.network.packets_received
          - k8s.node.network.packets_transmitted
          - k8s.node.network.receive_packets_dropped
          - k8s.node.network.transmit_packets_dropped
        filter/ebpf:
          metrics:
            metric:
            - IsMatch(name, "^ebpf_net.*$")
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.apiserver_request_duration_seconds"
              or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.coredns_dns_request_duration_seconds"
              or name == "k8s.coredns_dns_request_size_bytes" or name == "k8s.coredns_dns_response_size_bytes")
        filter/kube-state-metrics:
          metrics:
            metric:
            - "not(\nname == \"kube_deployment_created\" or\nname == \"kube_deployment_created\"
              or\nname == \"kube_daemonset_created\" or\nname == \"kube_namespace_created\"
              or\nname == \"kube_node_info\" or\nname == \"kube_node_created\" or\nname
              == \"kube_node_status_capacity\" or\nname == \"kube_node_status_condition\"
              or\nname == \"kube_pod_created\" or\nname == \"kube_pod_info\" or\nname ==
              \"kube_pod_owner\" or\nname == \"kube_pod_completion_time\" or\nname == \"kube_pod_status_phase\"
              or\nname == \"kube_pod_status_ready\" or\nname == \"kube_pod_status_reason\"
              or\nname == \"kube_pod_start_time\" or \nIsMatch(name, \"^kube_pod_container_.*$\")
              or \nIsMatch(name, \"^kube_pod_init_container_.*$\") or \nname == \"kube_namespace_status_phase\"
              or\nname == \"kube_deployment_spec_replicas\" or\nname == \"kube_deployment_spec_paused\"
              or\nname == \"kube_deployment_status_replicas\" or\nname == \"kube_deployment_status_replicas_ready\"
              or\nname == \"kube_deployment_status_replicas_available\" or\nname == \"kube_deployment_status_replicas_updated\"
              or\nname == \"kube_deployment_status_replicas_unavailable\" or\nname == \"kube_deployment_status_condition\"
              or\nname == \"kube_replicaset_owner\" or\nname == \"kube_replicaset_created\"
              or\nname == \"kube_replicaset_spec_replicas\" or\nname == \"kube_replicaset_status_ready_replicas\"
              or\nname == \"kube_replicaset_status_replicas\" or\nname == \"kube_statefulset_replicas\"
              or\nname == \"kube_statefulset_status_replicas_ready\" or\nname == \"kube_statefulset_status_replicas_current\"
              or\nname == \"kube_statefulset_status_replicas_updated\" or\nname == \"kube_statefulset_created\"
              or\nname == \"kube_daemonset_status_current_number_scheduled\" or\nname ==
              \"kube_daemonset_status_desired_number_scheduled\" or\nname == \"kube_daemonset_status_updated_number_scheduled\"
              or\nname == \"kube_daemonset_status_number_available\" or\nname == \"kube_daemonset_status_number_misscheduled\"
              or\nname == \"kube_daemonset_status_number_ready\" or\nname == \"kube_daemonset_status_number_unavailable\"
              or\nname == \"kube_resourcequota\" or\nname == \"kube_node_status_allocatable\"
              or\nname == \"kube_node_spec_unschedulable\" or\nname == \"kube_job_info\"
              or\nname == \"kube_job_owner\" or\nname == \"kube_job_created\" or\nname ==
              \"kube_job_complete\" or\nname == \"kube_job_failed\" or\nname == \"kube_job_status_active\"
              or\nname == \"kube_job_status_succeeded\" or\nname == \"kube_job_status_failed\"
              or\nname == \"kube_job_status_start_time\" or\nname == \"kube_job_status_completion_time\"
              or\nname == \"kube_job_spec_completions\" or\nname == \"kube_job_spec_parallelism\"
              or\nname == \"kube_persistentvolume_capacity_bytes\" or\nname == \"kube_persistentvolume_info\"
              or\nname == \"kube_persistentvolume_status_phase\" or\nname == \"kube_persistentvolume_claim_ref\"
              or\nname == \"kube_persistentvolume_created\" or\nname == \"kube_persistentvolumeclaim_info\"
              or\nname == \"kube_persistentvolumeclaim_access_mode\" or\nname == \"kube_persistentvolumeclaim_status_phase\"
              or\nname == \"kube_persistentvolumeclaim_resource_requests_storage_bytes\"
              or\nname == \"kube_persistentvolumeclaim_created\" or\nname == \"kube_pod_spec_volumes_persistentvolumeclaims_info\"
              or\nname == \"kube_service_info\" or\nname == \"kube_service_created\" or\nname
              == \"kube_service_spec_type\" or\nname == \"kube_service_spec_external_ip\"
              or\nname == \"kube_service_status_load_balancer_ingress\" or\nname == \"kube_endpoint_address_not_ready\"
              or\nname == \"kube_endpoint_address_available\" or\nname == \"kube_endpoint_info\"
              or\nname == \"kube_endpoint_created\" or\nname == \"kube_endpoint_ports\"
              or\nname == \"kube_endpoint_address\"\n)\n"
        filter/preprocessing:
          error_mode: ignore
          metrics:
            datapoint:
            - metric.name == "k8s.kube_node_status_ready" and value_double != 1
            - metric.name == "k8s.deployment.condition.available" and value_double != 1
            - metric.name == "k8s.deployment.condition.progressing" and value_double !=
              1
            - metric.name == "k8s.deployment.condition.replicafailure" and value_double
              != 1
            - metric.name == "k8s.pod.status.reason" and value_double != 1
            - metric.name == "k8s.kube_pod_status_phase" and value_double != 1
            - metric.name == "k8s.kube_pod_start_time" and value_double == 0
            - metric.name == "k8s.kube_pod_completion_time" and value_double == 0
            - metric.name == "k8s.persistentvolume.status.phase" and value_double != 1
            - metric.name == "k8s.persistentvolumeclaim.status.phase" and value_double !=
              1
            - metric.name == "k8s.kube_node_created" and value_double == 0
            - metric.name == "k8s.kube_pod_created" and value_double == 0
            - metric.name == "k8s.kube_deployment_created" and value_double == 0
            - metric.name == "k8s.kube_daemonset_created" and value_double == 0
            - metric.name == "k8s.kube_namespace_status_phase" and value_double != 1
            - metric.name == "k8s.kube_namespace_created" and value_double == 0
            - metric.name == "k8s.kube_statefulset_created" and value_double == 0
            - metric.name == "k8s.kube_job_created" and value_double == 0
            - metric.name == "k8s.kube_job_status_completion_time" and value_double == 0
            - metric.name == "k8s.kube_job_status_start_time" and value_double == 0
            - metric.name == "k8s.container.status" and value_double != 1
        filter/prometheus-node-metrics:
          metrics:
            metric:
            - |
              not(
              name == "container_cpu_usage_seconds_total" or
              name == "container_spec_cpu_quota" or
              name == "container_spec_cpu_period" or
              name == "container_memory_working_set_bytes" or
              name == "container_spec_memory_limit_bytes" or
              name == "container_cpu_cfs_throttled_periods_total" or
              name == "container_cpu_cfs_periods_total" or
              name == "container_fs_reads_total" or
              name == "container_fs_writes_total" or
              name == "container_fs_reads_bytes_total" or
              name == "container_fs_writes_bytes_total" or
              name == "container_fs_usage_bytes" or
              name == "container_network_receive_bytes_total" or
              name == "container_network_transmit_bytes_total" or
              name == "container_network_receive_packets_total" or
              name == "container_network_transmit_packets_total" or
              name == "container_network_receive_packets_dropped_total" or
              name == "container_network_transmit_packets_dropped_total" or
              name == "apiserver_request_total" or
              name == "apiserver_request_duration_seconds" or
              name == "workqueue_adds_total" or
              name == "workqueue_depth" or
              name == "workqueue_queue_duration_seconds" or
              name == "kubelet_volume_stats_available_percent" or
              name == "kubelet_volume_stats_capacity_bytes" or
              name == "kubernetes_build_info" or
              name == "coredns_build_info" or
              name == "coredns_dns_requests_total" or
              name == "coredns_dns_request_size_bytes" or
              name == "coredns_dns_responses_total" or
              name == "coredns_dns_response_size_bytes" or
              name == "coredns_dns_request_duration_seconds" or
              name == "coredns_cache_entries" or
              name == "coredns_cache_hits_total" or
              name == "coredns_cache_misses_total" or
              name == "certmanager_certificate_expiration_timestamp_seconds" or
              name == "certmanager_certificate_ready_status" or
              name == "certmanager_certificate_renewal_timestamp_seconds" or
              name == "certmanager_clock_time_seconds" or
              name == "certmanager_clock_time_seconds_gauge" or
              name == "certmanager_controller_sync_call_count" or
              name == "certmanager_http_acme_client_request_count"
              )
        filter/receiver:
          metrics:
            metric:
            - name == "scrape_duration_seconds"
            - name == "scrape_samples_post_metric_relabeling"
            - name == "scrape_samples_scraped"
            - name == "scrape_series_added"
            - name == "up"
        filter/remove_internal:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*")
              == false
        filter/remove_internal_postprocessing:
          metrics:
            datapoint:
            - attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*")
              == true
        filter/remove_temporary_metrics:
          metrics:
            metric:
            - IsMatch(name , ".*_temp")
        groupbyattrs/all:
          keys:
          - kubelet_version
          - container_runtime_version
          - provider_id
          - os_image
          - namespace
          - uid
          - k8s.pod.uid
          - pod_ip
          - host_ip
          - created_by_kind
          - created_by_name
          - host_network
          - priority_class
          - container_id
          - container
          - image
          - image_id
          - k8s.node.name
          - sw.k8s.pod.status
          - sw.k8s.namespace.status
          - sw.k8s.node.status
          - sw.k8s.container.status
          - sw.k8s.container.init
          - daemonset
          - statefulset
          - deployment
          - replicaset
          - job_name
          - cronjob
          - sw.k8s.cluster.version
          - internal_ip
          - job_condition
          - persistentvolumeclaim
          - persistentvolume
          - sw.k8s.persistentvolumeclaim.status
          - sw.k8s.persistentvolume.status
          - storageclass
          - access_mode
          - k8s.service.name
          - sw.k8s.service.external_name
          - sw.k8s.service.type
          - sw.k8s.cluster.ip
        groupbyattrs/node:
          keys:
          - k8s.node.name
        groupbyattrs/pod:
          keys:
          - namespace
          - pod
        memory_limiter:
          check_interval: 1s
          limit_mib: 2560
          spike_limit_mib: 512
        metricsgeneration/cluster:
          rules:
          - metric1: apiserver_request_not_failed_temp
            metric2: apiserver_request_total_temp
            name: k8s.apiserver.request.successrate
            operation: percent
            type: calculate
            unit: Percent
        metricstransform/aggregate_node_level:
          transforms:
          - action: insert
            include: k8s.kube_pod_info
            new_name: k8s.node.pods
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
        metricstransform/aggregate_pod_level:
          transforms:
          - action: insert
            include: k8s.kube_pod_container_info
            new_name: k8s.pod.containers
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
        metricstransform/preprocessing:
          transforms:
          - action: insert
            experimental_match_labels:
              condition: Ready
            include: k8s.kube_node_status_condition
            new_name: k8s.kube_node_status_ready
            operations:
            - action: update_label
              label: status
              value_actions:
              - new_value: Ready
                value: "true"
              - new_value: NotReady
                value: "false"
              - new_value: Unknown
                value: unknown
            - action: update_label
              label: status
              new_label: sw.k8s.node.status
          - action: insert
            experimental_match_labels:
              condition: Available
            include: k8s.kube_deployment_status_condition
            new_name: k8s.deployment.condition.available
            operations:
            - action: update_label
              label: status
              new_label: sw.k8s.deployment.condition.available
          - action: insert
            experimental_match_labels:
              condition: Progressing
            include: k8s.kube_deployment_status_condition
            new_name: k8s.deployment.condition.progressing
            operations:
            - action: update_label
              label: status
              new_label: sw.k8s.deployment.condition.progressing
          - action: insert
            experimental_match_labels:
              condition: ReplicaFailure
            include: k8s.kube_deployment_status_condition
            new_name: k8s.deployment.condition.replicafailure
            operations:
            - action: update_label
              label: status
              new_label: sw.k8s.deployment.condition.replicafailure
          - action: insert
            include: k8s.kube_persistentvolume_status_phase
            new_name: k8s.persistentvolume.status.phase
            operations:
            - action: update_label
              label: phase
              new_label: sw.k8s.persistentvolume.status
          - action: insert
            include: k8s.kube_persistentvolumeclaim_status_phase
            new_name: k8s.persistentvolumeclaim.status.phase
            operations:
            - action: update_label
              label: phase
              new_label: sw.k8s.persistentvolumeclaim.status
          - action: insert
            include: k8s.container_fs_reads_total
            new_name: k8s.container_fs_reads_total_temp
          - action: insert
            include: k8s.container_fs_writes_total
            new_name: k8s.container_fs_writes_total_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
            match_type: regexp
            new_name: k8s.container.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_fs_reads_bytes_total
            new_name: k8s.container_fs_reads_bytes_total_temp
          - action: insert
            include: k8s.container_fs_writes_bytes_total
            new_name: k8s.container_fs_writes_bytes_total_temp
          - action: combine
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
            match_type: regexp
            new_name: k8s.container.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - container
              - pod
              - namespace
            submatch_case: lower
          - action: insert
            include: k8s.container_network_receive_bytes_total
            new_name: k8s.container.network.bytes_received
          - action: insert
            include: k8s.container_network_transmit_bytes_total
            new_name: k8s.container.network.bytes_transmitted
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_cpu_usage_seconds_total
            match_type: regexp
            new_name: k8s.pod.cpu.usage.seconds.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.container.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              container: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_memory_working_set_bytes
            match_type: regexp
            new_name: k8s.pod.memory.working_set
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.pod.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.pod.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.pod.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_reads_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.reads.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_writes_bytes_total
            match_type: regexp
            new_name: k8s.pod.fs.writes.bytes.rate
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.pod.fs.reads.rate_temp
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.pod.fs.writes.rate_temp
          - action: combine
            include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
            match_type: regexp
            new_name: k8s.pod.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.pod.fs.reads.bytes.rate_temp
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.pod.fs.writes.bytes.rate_temp
          - action: combine
            include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
            match_type: regexp
            new_name: k8s.pod.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
            submatch_case: lower
          - action: insert
            experimental_match_labels:
              k8s.node.name: \S+
              namespace: \S+
              pod: \S+
            include: k8s.container_fs_usage_bytes
            match_type: regexp
            new_name: k8s.pod.fs.usage.bytes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_cpu_usage_seconds_total
            new_name: k8s.node.cpu.usage.seconds.rate
          - action: insert
            experimental_match_labels:
              id: /
            include: k8s.container_memory_working_set_bytes
            new_name: k8s.node.memory.working_set
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_bytes_total
            match_type: regexp
            new_name: k8s.node.network.bytes_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_received
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_total
            match_type: regexp
            new_name: k8s.node.network.packets_transmitted
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_receive_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.receive_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              id: /
              k8s.node.name: \S+
            include: k8s.container_network_transmit_packets_dropped_total
            match_type: regexp
            new_name: k8s.node.network.transmit_packets_dropped
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.rate
            new_name: k8s.node.fs.reads.rate_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.rate
            new_name: k8s.node.fs.writes.rate_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.reads.bytes.rate
            new_name: k8s.node.fs.reads.bytes.rate_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            include: k8s.pod.fs.writes.bytes.rate
            new_name: k8s.node.fs.writes.bytes.rate_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: combine
            include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
            match_type: regexp
            new_name: k8s.node.fs.iops
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: combine
            include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
            match_type: regexp
            new_name: k8s.node.fs.throughput
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
            submatch_case: lower
          - action: insert
            include: k8s.pod.fs.usage.bytes
            new_name: k8s.node.fs.usage
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_pod_container_resource_limits
            new_name: k8s.container.spec.cpu.limit_temp
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_pod_init_container_resource_limits
            new_name: k8s.initcontainer.spec.cpu.limit_temp
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_pod_container_resource_requests
            new_name: k8s.container.spec.cpu.requests_temp
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_pod_init_container_resource_requests
            new_name: k8s.initcontainer.spec.cpu.requests_temp
          - action: combine
            include: (k8s.container.spec.cpu.requests_temp|k8s.initcontainer.spec.cpu.requests_temp)
            match_type: regexp
            new_name: k8s.container.spec.cpu.requests
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_pod_container_resource_requests
            new_name: k8s.container.spec.memory.requests_temp
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_pod_init_container_resource_requests
            new_name: k8s.initcontainer.spec.memory.requests_temp
          - action: combine
            include: (k8s.container.spec.memory.requests_temp|k8s.initcontainer.spec.memory.requests_temp)
            match_type: regexp
            new_name: k8s.container.spec.memory.requests
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_pod_container_resource_limits
            match_type: regexp
            new_name: k8s.container.spec.memory.limit_temp
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_pod_init_container_resource_limits
            match_type: regexp
            new_name: k8s.initcontainer.spec.memory.limit_temp
          - action: insert
            include: k8s.kube_pod_container_status_waiting
            new_name: k8s.kube_pod_container_status_waiting_only_temp
          - action: insert
            include: k8s.kube_pod_container_status_running
            new_name: k8s.kube_pod_container_status_running_only_temp
          - action: insert
            include: k8s.kube_pod_container_status_terminated
            new_name: k8s.kube_pod_container_status_terminated_only_temp
          - action: combine
            include: ^k8s.kube_pod_container_status_(?P<status>[^_]*)_only_temp$
            match_type: regexp
            new_name: k8s.container.status_temp
            operations:
            - action: update_label
              label: status
              new_label: sw.k8s.container.status
            submatch_case: lower
          - action: insert
            include: k8s.kube_pod_init_container_status_waiting
            new_name: k8s.kube_pod_init_container_status_waiting_only_temp
          - action: insert
            include: k8s.kube_pod_init_container_status_running
            new_name: k8s.kube_pod_init_container_status_running_only_temp
          - action: insert
            include: k8s.kube_pod_init_container_status_terminated
            new_name: k8s.kube_pod_init_container_status_terminated_only_temp
          - action: combine
            include: ^k8s.kube_pod_init_container_status_(?P<status>[^_]*)_only_temp$
            match_type: regexp
            new_name: k8s.initcontainer.status_temp
            operations:
            - action: update_label
              label: status
              new_label: sw.k8s.container.status
            submatch_case: lower
          - action: combine
            include: (k8s.initcontainer.status_temp|k8s.container.status_temp)
            match_type: regexp
            new_name: k8s.container.status
            submatch_case: lower
          - action: insert
            include: k8s.container.spec.cpu.limit_temp
            new_name: k8s.pod.spec.cpu.limit
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: combine
            include: (k8s.container.spec.cpu.limit_temp|k8s.initcontainer.spec.cpu.limit_temp)
            match_type: regexp
            new_name: k8s.container.spec.cpu.limit
          - action: insert
            include: k8s.container.spec.memory.limit_temp
            new_name: k8s.pod.spec.memory.limit
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: combine
            include: (k8s.container.spec.memory.limit_temp|k8s.initcontainer.spec.memory.limit_temp)
            match_type: regexp
            new_name: k8s.container.spec.memory.limit
          - action: insert
            include: k8s.kube_pod_container_status_running
            new_name: k8s.pod.containers.running
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
          - action: insert
            include: k8s.container.spec.cpu.requests
            new_name: k8s.pod.spec.cpu.requests
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            include: k8s.container.spec.memory.requests
            new_name: k8s.pod.spec.memory.requests
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - pod
              - namespace
              - k8s.node.name
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: DaemonSet
            include: k8s.kube_pod_owner
            new_name: k8s.kube.pod.owner.daemonset
            operations:
            - action: update_label
              label: owner_name
              new_label: daemonset
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: ReplicaSet
            include: k8s.kube_pod_owner
            new_name: k8s.kube.pod.owner.replicaset
            operations:
            - action: update_label
              label: owner_name
              new_label: replicaset
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: StatefulSet
            include: k8s.kube_pod_owner
            new_name: k8s.kube.pod.owner.statefulset
            operations:
            - action: update_label
              label: owner_name
              new_label: statefulset
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: Job
            include: k8s.kube_pod_owner
            new_name: k8s.kube.pod.owner.job
            operations:
            - action: update_label
              label: owner_name
              new_label: job_name
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: Deployment
            include: k8s.kube_replicaset_owner
            new_name: k8s.kube.replicaset.owner.deployment
            operations:
            - action: update_label
              label: owner_name
              new_label: deployment
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_node_status_capacity
            new_name: k8s.node.cpu.capacity
          - action: insert
            experimental_match_labels:
              resource: cpu
            include: k8s.kube_node_status_allocatable
            new_name: k8s.node.cpu.allocatable
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_node_status_capacity
            new_name: k8s.node.memory.capacity
          - action: insert
            experimental_match_labels:
              resource: memory
            include: k8s.kube_node_status_allocatable
            new_name: k8s.node.memory.allocatable
          - action: insert
            experimental_match_labels:
              condition: Ready
              status: "true"
            include: k8s.kube_node_status_condition
            new_name: k8s.node.status.condition.ready
          - action: insert
            experimental_match_labels:
              condition: NetworkUnavailable
              status: "true"
            include: k8s.kube_node_status_condition
            new_name: k8s.node.status.condition.networkunavailable
          - action: insert
            experimental_match_labels:
              condition: PIDPressure
              status: "true"
            include: k8s.kube_node_status_condition
            new_name: k8s.node.status.condition.pidpressure
          - action: insert
            experimental_match_labels:
              condition: MemoryPressure
              status: "true"
            include: k8s.kube_node_status_condition
            new_name: k8s.node.status.condition.memorypressure
          - action: insert
            experimental_match_labels:
              condition: DiskPressure
              status: "true"
            include: k8s.kube_node_status_condition
            new_name: k8s.node.status.condition.diskpressure
          - action: insert
            experimental_match_labels:
              phase: Running
            include: k8s.kube_pod_status_phase
            new_name: k8s.pod.status.phase.running_temp
          - action: insert
            include: k8s.kube_pod_info
            new_name: k8s.cluster.pods
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.kube_node_info
            new_name: k8s.cluster.nodes
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.status.condition.ready
            new_name: k8s.cluster.nodes.ready
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.status.condition.ready
            new_name: k8s.cluster.nodes.ready.avg
            operations:
            - action: aggregate_labels
              aggregation_type: mean
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.container.spec.memory.requests
            new_name: k8s.cluster.spec.memory.requests
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.container.spec.cpu.requests
            new_name: k8s.cluster.spec.cpu.requests
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.pod.status.phase.running_temp
            new_name: k8s.cluster.pods.running
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.cpu.capacity
            new_name: k8s.cluster.cpu.capacity
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.cpu.allocatable
            new_name: k8s.cluster.cpu.allocatable
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.memory.capacity
            new_name: k8s.cluster.memory.capacity
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.node.memory.allocatable
            new_name: k8s.cluster.memory.allocatable
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            experimental_match_labels:
              scrape_job: .*apiservers.*
            include: k8s.kubernetes_build_info
            match_type: regexp
            new_name: k8s.cluster.version
            operations:
            - action: update_label
              label: git_version
              new_label: sw.k8s.cluster.version
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - sw.k8s.cluster.version
          - action: update
            include: k8s.kubernetes_build_info
            new_name: k8s.kubernetes_build_info_temp
          - action: insert
            experimental_match_labels:
              code: ^(([0-3]|[6-9])\d\d)|(4([0-1]|[3-9])\d)|(42[0-8])$
            include: k8s.apiserver_request_total
            match_type: regexp
            new_name: apiserver_request_not_failed_temp
          - action: update
            include: apiserver_request_not_failed_temp
            new_name: apiserver_request_not_failed_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            include: k8s.apiserver_request_total
            new_name: apiserver_request_total_temp
            operations:
            - action: aggregate_labels
              aggregation_type: sum
              label_set:
              - dummy_label_workaround
          - action: insert
            experimental_match_labels:
              owner_is_controller: "true"
              owner_kind: CronJob
            include: k8s.kube_job_owner
            new_name: k8s.kube.job.owner.cronjob
            operations:
            - action: update_label
              label: owner_name
              new_label: cronjob
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(kube_|container_|kubernetes_|kubelet_|workqueue_|apiserver_|coredns_|etcd_|certmanager_)(.*)$$
            match_type: regexp
            new_name: k8s.$${1}$${2}
        metricstransform/rename-otel:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/metrics:
          attributes:
          - action: delete
            key: service.name
          - action: delete
            key: service.instance.id
          - action: delete
            key: net.host.name
          - action: delete
            key: net.host.port
          - action: delete
            key: http.scheme
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            from_attribute: kubelet_version
            key: sw.k8s.node.version
          - action: insert
            from_attribute: container_runtime_version
            key: sw.k8s.node.container.runtime.version
          - action: insert
            from_attribute: provider_id
            key: sw.k8s.node.provider.id
          - action: insert
            from_attribute: os_image
            key: sw.k8s.node.os.image
          - action: insert
            from_attribute: internal_ip
            key: sw.k8s.node.ip.internal
          - action: insert
            from_attribute: namespace
            key: k8s.namespace.name
          - action: insert
            from_attribute: pod
            key: k8s.pod.name
          - action: insert
            from_attribute: pod_ip
            key: sw.k8s.pod.ip
          - action: insert
            from_attribute: host_ip
            key: sw.k8s.pod.host.ip
          - action: insert
            from_attribute: created_by_kind
            key: sw.k8s.pod.createdby.kind
          - action: insert
            from_attribute: created_by_name
            key: sw.k8s.pod.createdby.name
          - action: insert
            from_attribute: host_network
            key: sw.k8s.pod.host.network
          - action: insert
            from_attribute: priority_class
            key: sw.k8s.pod.priority_class
          - action: extract
            key: container_id
            pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
          - action: insert
            from_attribute: extracted_container_id
            key: container.id
          - action: insert
            from_attribute: extracted_container_runtime
            key: container.runtime
          - action: insert
            from_attribute: container
            key: k8s.container.name
          - action: insert
            from_attribute: image_id
            key: k8s.container.image.id
          - action: insert
            from_attribute: image
            key: k8s.container.image.name
          - action: insert
            from_attribute: replicaset
            key: k8s.replicaset.name
          - action: insert
            from_attribute: deployment
            key: k8s.deployment.name
          - action: insert
            from_attribute: statefulset
            key: k8s.statefulset.name
          - action: insert
            from_attribute: daemonset
            key: k8s.daemonset.name
          - action: insert
            from_attribute: job_name
            key: k8s.job.name
          - action: insert
            from_attribute: job_condition
            key: k8s.job.condition
          - action: insert
            from_attribute: cronjob
            key: k8s.cronjob.name
          - action: insert
            from_attribute: persistentvolume
            key: k8s.persistentvolume.name
          - action: insert
            from_attribute: persistentvolumeclaim
            key: k8s.persistentvolumeclaim.name
        resource/otlp-metrics:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
        swk8sattributes:
          auth_type: serviceAccount
          cronjob:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.cronjob.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          daemonset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.daemonset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          deployment:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.deployment.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          extract:
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          job:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.job.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          node:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.node.name
            extract: null
          passthrough: false
          persistentvolume:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolume.name
            extract: null
          persistentvolumeclaim:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolumeclaim.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          replicaset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.replicaset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          service:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.service.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
          set_object_existence: true
          statefulset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.statefulset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract: null
        transform:
          metric_statements:
          - context: datapoint
            statements:
            - set(attributes["job_condition"], "Active") where IsMatch(metric.name, "^.*kube_job_status_active$")
              == true and value_double > 0
            - set(attributes["job_condition"], "Failed") where IsMatch(metric.name, "^.*kube_job_failed$")
              == true and IsMatch(attributes["condition"], "^true$") == true and value_double
              > 0
            - set(attributes["job_condition"], "Complete") where IsMatch(metric.name, "^.*kube_job_complete$")
              == true and IsMatch(attributes["condition"], "^true$") == true and value_double
              > 0
        transform/cleanup_attributes_for_nonexisting_entities:
          metric_statements:
          - context: metric
            statements:
            - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
              == "false"
            - delete_key(resource.attributes, "sw.k8s.pod.found")
            - delete_key(resource.attributes, "sw.k8s.deployment.found")
            - delete_key(resource.attributes, "sw.k8s.statefulset.found")
            - delete_key(resource.attributes, "sw.k8s.replicaset.found")
            - delete_key(resource.attributes, "sw.k8s.daemonset.found")
            - delete_key(resource.attributes, "sw.k8s.job.found")
            - delete_key(resource.attributes, "sw.k8s.cronjob.found")
            - delete_key(resource.attributes, "sw.k8s.node.found")
        transform/scope:
          metric_statements:
          - context: scope
            statements:
            - set(name, "")
            - set(version, "")
        transform/unify_node_attribute:
          metric_statements:
          - context: datapoint
            statements:
            - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"])
              where IsMatch(metric.name, "^(container_.*)$") == true and attributes["k8s.node.name"]
              == nil
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
        prometheus/kube-state-metrics:
          config:
            scrape_configs:
            - honor_labels: true
              honor_timestamps: false
              job_name: kube-state-metrics
              metrics_path: /metrics
              scheme: http
              scrape_interval: 60s
              static_configs:
              - targets:
                - ${KUBE_STATE_METRICS_URL}
        prometheus/node-metrics:
          config:
            scrape_configs:
            - authorization:
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                type: Bearer
              enable_http2: true
              follow_redirects: true
              honor_timestamps: false
              job_name: kubernetes-nodes-cadvisor
              kubernetes_sd_configs:
              - enable_http2: true
                follow_redirects: true
                kubeconfig_file: ""
                role: node
              metrics_path: /metrics
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
                replacement: $$1
                separator: ;
              - action: replace
                regex: (.*)
                replacement: kubernetes.default.svc:443
                separator: ;
                target_label: __address__
              - action: replace
                regex: (.+)
                replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
                separator: ;
                source_labels:
                - __meta_kubernetes_node_name
                target_label: __metrics_path__
              - replacement: kubernetes-nodes-cadvisor
                source_labels:
                - __address__
                target_label: scrape_job
              scheme: https
              scrape_interval: 60s
              scrape_timeout: 10s
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
            - authorization:
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                type: Bearer
              enable_http2: true
              follow_redirects: true
              honor_timestamps: false
              job_name: kubernetes-nodes
              kubernetes_sd_configs:
              - enable_http2: true
                follow_redirects: true
                kubeconfig_file: ""
                role: node
              metrics_path: /metrics
              relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
                replacement: $$1
                separator: ;
              - action: replace
                regex: (.*)
                replacement: kubernetes.default.svc:443
                separator: ;
                target_label: __address__
              - action: replace
                regex: (.+)
                replacement: /api/v1/nodes/$$1/proxy/metrics
                separator: ;
                source_labels:
                - __meta_kubernetes_node_name
                target_label: __metrics_path__
              - replacement: kubernetes-nodes
                source_labels:
                - __address__
                target_label: scrape_job
              scheme: https
              scrape_interval: 60s
              scrape_timeout: 10s
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
            - authorization:
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                type: Bearer
              enable_http2: true
              follow_redirects: true
              honor_timestamps: false
              job_name: kubernetes-apiservers
              kubernetes_sd_configs:
              - enable_http2: true
                follow_redirects: true
                kubeconfig_file: ""
                role: endpoints
              metrics_path: /metrics
              relabel_configs:
              - action: keep
                regex: default;kubernetes;https
                replacement: $$1
                separator: ;
                source_labels:
                - __meta_kubernetes_namespace
                - __meta_kubernetes_service_name
                - __meta_kubernetes_endpoint_port_name
              - replacement: kubernetes-apiservers
                source_labels:
                - __address__
                target_label: scrape_job
              scheme: https
              scrape_interval: 60s
              scrape_timeout: 10s
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
            - honor_timestamps: false
              job_name: kubernetes-coredns
              kubernetes_sd_configs:
              - enable_http2: true
                follow_redirects: true
                role: endpoints
              relabel_configs:
              - action: keep
                regex: kube-dns;kube-system;metrics
                source_labels:
                - __meta_kubernetes_service_name
                - __meta_kubernetes_namespace
                - __meta_kubernetes_endpoint_port_name
              - replacement: kubernetes-coredns
                source_labels:
                - __address__
                target_label: scrape_job
              scrape_interval: 60s
              scrape_timeout: 10s
            - honor_timestamps: false
              job_name: cert-manager
              kubernetes_sd_configs:
              - enable_http2: true
                follow_redirects: true
                role: endpoints
              relabel_configs:
              - action: keep
                regex: cert-manager
                source_labels:
                - __meta_kubernetes_service_label_app_kubernetes_io_instance
                - __meta_kubernetes_service_label_app_kubernetes_io_name
              scrape_interval: 60s
              scrape_timeout: 10s
      service:
        extensions:
        - health_check
        pipelines:
          metrics:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter/histograms
            - transform/scope
            - batch
            receivers:
            - forward/metric-exporter
          metrics/kubestatemetrics:
            exporters:
            - forward/prometheus
            processors:
            - memory_limiter
            - filter/kube-state-metrics
            receivers:
            - prometheus/kube-state-metrics
          metrics/otlp:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/ebpf
            - metricstransform/rename-otel
            - resource/otlp-metrics
            receivers:
            - otlp
          metrics/prometheus:
            exporters:
            - forward/metric-exporter
            processors:
            - memory_limiter
            - filter/receiver
            - transform
            - filter/remove_internal
            - attributes/remove_prometheus_attributes
            - attributes/remove_prometheus_attributes_endpoint
            - attributes/unify_node_attribute
            - transform/unify_node_attribute
            - attributes/unify_volume_attribute
            - attributes/unify_service_attribute
            - attributes/unify_endpoint_attribute
            - attributes/unify_pod_attribute
            - attributes/identify_init_container
            - attributes/identify_standard_container
            - metricstransform/rename
            - metricstransform/preprocessing
            - filter/preprocessing
            - filter/remove_internal_postprocessing
            - attributes/remove_temp
            - attributes/attributes_pod_status
            - attributes/attributes_namespace_status
            - cumulativetodelta
            - deltatorate
            - metricsgeneration/cluster
            - groupbyattrs/node
            - metricstransform/aggregate_node_level
            - groupbyattrs/pod
            - metricstransform/aggregate_pod_level
            - groupbyattrs/all
            - resource/metrics
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - filter/remove_temporary_metrics
            receivers:
            - forward/prometheus
          metrics/prometheus-node-metrics:
            exporters:
            - forward/prometheus
            processors:
            - memory_limiter
            - filter/prometheus-node-metrics
            receivers:
            - prometheus/node-metrics
        telemetry:
          logs:
            level: info
          metrics:
            address: 0.0.0.0:8888
