Gateway config should match snapshot when using default values:
  1: |
    gateway.config: |
      connectors:
        forward/beyla-relationships: {}
        forward/metrics_common: {}
        routing/metrics:
          default_pipelines:
          - metrics
          table:
          - condition: "name == \"http.client.request.duration\" or\nname == \"http.client.request.body.size\"
              or\nname == \"http.client.response.body.size\" or\nname == \"http.server.request.duration\"
              or \nname == \"http.server.request.body.size\" or\nname == \"http.server.response.body.size\"
              or\nname == \"rpc.client.duration\" or \nname == \"rpc.server.duration\" or
              \nname == \"beyla.network.flow.bytes\"\n"
            context: metric
            pipelines:
            - metrics/beyla-network-entities-and-relationships
        solarwindsentity/beyla-entities:
          schema:
            entities:
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              entities:
              - action: update
                context: metric
                entity: PublicNetworkLocation
        solarwindsentity/beyla-relationships:
          destination_prefix: dest.
          schema:
            entities:
            - entity: KubernetesDeployment
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.deployment.name
            - entity: KubernetesStatefulSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.statefulset.name
            - entity: KubernetesDaemonSet
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.daemonset.name
            - entity: KubernetesJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.job.name
            - entity: KubernetesCronJob
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.cronjob.name
            - entity: KubernetesService
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.service.name
            - entity: KubernetesPod
              id:
              - sw.k8s.cluster.uid
              - k8s.namespace.name
              - k8s.pod.name
            - entity: KubernetesNode
              id:
              - sw.k8s.cluster.uid
              - k8s.node.name
            - entity: PublicNetworkLocation
              id:
              - sw.server.address.fqdn
            events:
              relationships:
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesNode
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesPod
                source_entity: KubernetesDeployment
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesNode
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesPod
                source_entity: KubernetesStatefulSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDaemonSet
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesNode
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesPod
                source_entity: KubernetesDaemonSet
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesService
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: PublicNetworkLocation
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesDeployment
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesStatefulSet
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesJob
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesNode
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
              - action: update
                attributes:
                - beyla
                - tcp
                - http
                - grpc
                conditions: []
                context: metric
                destination_entity: KubernetesPod
                source_entity: KubernetesJob
                type: KubernetesCommunicatesWith
          source_prefix: source.
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
            swi-reporter: k8s-monitoring swo-k8s-collector/1.0.0
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          timeout: 30s
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        attributes/clean-attributes-otlp-metrics:
          actions:
          - action: delete
            key: k8s.cluster.name
        batch:
          send_batch_max_size: 1024
          send_batch_size: 1024
          timeout: 1s
        filter/beyla-self-loop-relationships:
          error_mode: ignore
          metrics:
            datapoint:
            - |
              (
                (resource.attributes["source.k8s.deployment.name"] == resource.attributes["dest.k8s.deployment.name"] and resource.attributes["source.k8s.deployment.name"] != nil) or
                (resource.attributes["source.k8s.statefulset.name"] == resource.attributes["dest.k8s.statefulset.name"] and resource.attributes["source.k8s.statefulset.name"] != nil) or
                (resource.attributes["source.k8s.daemonset.name"] == resource.attributes["dest.k8s.daemonset.name"] and resource.attributes["source.k8s.daemonset.name"] != nil) or
                (resource.attributes["source.k8s.service.name"] == resource.attributes["dest.k8s.service.name"] and resource.attributes["source.k8s.service.name"] != nil) or
                (resource.attributes["source.k8s.job.name"] == resource.attributes["dest.k8s.job.name"] and resource.attributes["source.k8s.job.name"] != nil) or
                (resource.attributes["source.k8s.pod.name"] == resource.attributes["dest.k8s.pod.name"] and resource.attributes["source.k8s.pod.name"] != nil) or
                (resource.attributes["source.k8s.node.name"] == resource.attributes["dest.k8s.node.name"] and resource.attributes["source.k8s.node.name"] != nil) or
                (datapoint.attributes["source.k8s.deployment.name"] == datapoint.attributes["dest.k8s.deployment.name"] and datapoint.attributes["source.k8s.deployment.name"] != nil) or
                (datapoint.attributes["source.k8s.statefulset.name"] == datapoint.attributes["dest.k8s.statefulset.name"] and datapoint.attributes["source.k8s.statefulset.name"] != nil) or
                (datapoint.attributes["source.k8s.daemonset.name"] == datapoint.attributes["dest.k8s.daemonset.name"] and datapoint.attributes["source.k8s.daemonset.name"] != nil) or
                (datapoint.attributes["source.k8s.service.name"] == datapoint.attributes["dest.k8s.service.name"] and datapoint.attributes["source.k8s.service.name"] != nil) or
                (datapoint.attributes["source.k8s.job.name"] == datapoint.attributes["dest.k8s.job.name"] and datapoint.attributes["source.k8s.job.name"] != nil) or
                (datapoint.attributes["source.k8s.pod.name"] == datapoint.attributes["dest.k8s.pod.name"] and datapoint.attributes["source.k8s.pod.name"] != nil) or
                (datapoint.attributes["source.k8s.node.name"] == datapoint.attributes["dest.k8s.node.name"] and datapoint.attributes["source.k8s.node.name"] != nil)
              ) and (
                resource.attributes["source.k8s.namespace.name"] == resource.attributes["dest.k8s.namespace.name"] or
                datapoint.attributes["source.k8s.namespace.name"] == datapoint.attributes["dest.k8s.namespace.name"]
              )
        filter/histograms:
          metrics:
            metric:
            - type == METRIC_DATA_TYPE_HISTOGRAM
        filter/otlp-metrics:
          metrics:
            metric:
            - IsMatch(name, "^ebpf_net.*$")
        groupbyattrs/beyla-entity-ids:
          keys:
          - dest.sw.server.address.fqdn
          - source.sw.server.address.fqdn
          - sw.server.address.fqdn
          - sw.k8s.dst.workload.type
          - sw.k8s.dst.workload.name
          - sw.k8s.dst.workload.namespace
          - sw.k8s.src.workload.type
          - sw.k8s.src.workload.name
          - sw.k8s.src.workload.namespace
        groupbyattrs/beyla-entity-ids-after-transform:
          keys:
          - source.k8s.deployment.name
          - source.k8s.statefulset.name
          - source.k8s.daemonset.name
          - source.k8s.service.name
          - source.k8s.job.name
          - source.k8s.node.name
          - source.k8s.pod.name
          - source.k8s.namespace.name
          - dest.k8s.deployment.name
          - dest.k8s.statefulset.name
          - dest.k8s.daemonset.name
          - dest.k8s.service.name
          - dest.k8s.job.name
          - dest.k8s.node.name
          - dest.k8s.pod.name
          - dest.k8s.namespace.name
        groupbyattrs/beyla-relationship-types:
          keys:
          - tcp
          - http
          - grpc
        k8sattributes:
          auth_type: serviceAccount
          extract:
            metadata:
            - k8s.pod.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          passthrough: false
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: resource_attribute
              name: k8s.namespace.name
        logdedup/solarwindsentity: {}
        memory_limiter:
          check_interval: 1s
          limit_percentage: 80
          spike_limit_percentage: 25
        metricstransform/rename:
          transforms:
          - action: update
            include: ^(.*)$$
            match_type: regexp
            new_name: k8s.$${1}
        resource:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: upsert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
        resource/clean-temporary-attributes:
          attributes:
          - action: delete
            key: beyla
          - action: delete
            key: tcp
          - action: delete
            key: http
          - action: delete
            key: grpc
        swok8sworkloadtype/beyla:
          workload_mappings:
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            - services
            - jobs
            - cronjobs
            - pods
            - nodes
            name_attr: k8s.src.owner.name
            namespace_attr: k8s.src.namespace
            prefer_owner_for_pods: true
            workload_name_attr: sw.k8s.src.workload.name
            workload_namespace_attr: sw.k8s.src.workload.namespace
            workload_type_attr: sw.k8s.src.workload.type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            - services
            - jobs
            - cronjobs
            - pods
            - nodes
            name_attr: k8s.dst.owner.name
            namespace_attr: k8s.dst.namespace
            prefer_owner_for_pods: true
            workload_name_attr: sw.k8s.dst.workload.name
            workload_namespace_attr: sw.k8s.dst.workload.namespace
            workload_type_attr: sw.k8s.dst.workload.type
          - expected_types:
            - deployments
            - daemonsets
            - statefulsets
            - services
            - jobs
            - cronjobs
            - pods
            - nodes
            name_attr: resource.k8s.owner.name
            namespace_attr: resource.k8s.namespace.name
            prefer_owner_for_pods: true
            workload_name_attr: resource.sw.k8s.workload.name
            workload_namespace_attr: resource.sw.k8s.workload.namespace
            workload_type_attr: resource.sw.k8s.workload.type
          - address_attr: server.address
            expected_types:
            - deployments
            - daemonsets
            - statefulsets
            - services
            - jobs
            - cronjobs
            - pods
            - nodes
            namespace_attr: k8s.namespace.name
            prefer_owner_for_pods: true
            workload_name_attr: sw.k8s.dst.workload.name
            workload_namespace_attr: sw.k8s.dst.workload.namespace
            workload_type_attr: sw.k8s.dst.workload.type
          - address_attr: client.address
            expected_types:
            - deployments
            - daemonsets
            - statefulsets
            - services
            - jobs
            - cronjobs
            - pods
            - nodes
            namespace_attr: k8s.namespace.name
            prefer_owner_for_pods: true
            workload_name_attr: sw.k8s.src.workload.name
            workload_namespace_attr: sw.k8s.src.workload.namespace
            workload_type_attr: sw.k8s.src.workload.type
        transform/beyla-entity-ids:
          metric_statements:
          - conditions:
            - resource.attributes["sw.k8s.src.workload.name"] != nil
            statements:
            - set(resource.attributes["source.k8s.deployment.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "Deployment"
            - set(resource.attributes["source.k8s.statefulset.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "StatefulSet"
            - set(resource.attributes["source.k8s.daemonset.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "DaemonSet"
            - set(resource.attributes["source.k8s.service.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "Service"
            - set(resource.attributes["source.k8s.job.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "Job"
            - set(resource.attributes["source.k8s.node.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "Node"
            - set(resource.attributes["source.k8s.pod.name"], resource.attributes["sw.k8s.src.workload.name"])
              where resource.attributes["sw.k8s.src.workload.type"] == "Pod"
          - statements:
            - set(resource.attributes["source.k8s.namespace.name"], resource.attributes["sw.k8s.src.workload.namespace"])
              where resource.attributes["sw.k8s.src.workload.namespace"] != nil
          - conditions:
            - resource.attributes["sw.k8s.dst.workload.name"] != nil
            statements:
            - set(resource.attributes["dest.k8s.deployment.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "Deployment"
            - set(resource.attributes["dest.k8s.statefulset.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "StatefulSet"
            - set(resource.attributes["dest.k8s.daemonset.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "DaemonSet"
            - set(resource.attributes["dest.k8s.service.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "Service"
            - set(resource.attributes["dest.k8s.job.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "Job"
            - set(resource.attributes["dest.k8s.node.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "Node"
            - set(resource.attributes["dest.k8s.pod.name"], resource.attributes["sw.k8s.dst.workload.name"])
              where resource.attributes["sw.k8s.dst.workload.type"] == "Pod"
          - statements:
            - set(resource.attributes["dest.k8s.namespace.name"], resource.attributes["sw.k8s.dst.workload.namespace"])
              where resource.attributes["sw.k8s.dst.workload.namespace"] != nil
          - conditions:
            - resource.attributes["sw.k8s.src.workload.name"] == nil and resource.attributes["sw.k8s.workload.name"]
              != nil and (IsMatch(metric.name, "^(http\\.client\\.)|(rpc\\.client\\.)")
              or (metric.name == "beyla.network.flow.bytes" and datapoint.attributes["direction"]
              == "request"))
            statements:
            - set(datapoint.attributes["source.k8s.deployment.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Deployment"
            - set(datapoint.attributes["source.k8s.statefulset.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "StatefulSet"
            - set(datapoint.attributes["source.k8s.daemonset.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "DaemonSet"
            - set(datapoint.attributes["source.k8s.service.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Service"
            - set(datapoint.attributes["source.k8s.job.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Job"
            - set(datapoint.attributes["source.k8s.node.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Node"
            - set(datapoint.attributes["source.k8s.pod.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Pod"
          - statements:
            - set(datapoint.attributes["source.k8s.namespace.name"], resource.attributes["sw.k8s.workload.namespace"])
              where resource.attributes["source.k8s.namespace.name"] == nil and resource.attributes["sw.k8s.workload.namespace"]
              != nil and (IsMatch(metric.name, "^(http\\.client\\.)|(rpc\\.client\\.)")
              or metric.name == "beyla.network.flow.bytes" and datapoint.attributes["direction"]
              == "request")
          - conditions:
            - resource.attributes["sw.k8s.dst.workload.name"] == nil and resource.attributes["sw.k8s.workload.name"]
              != nil and (IsMatch(metric.name, "^(http\\.server\\.)|(rpc\\.server\\.)")
              or (metric.name == "beyla.network.flow.bytes" and datapoint.attributes["direction"]
              == "response"))
            statements:
            - set(datapoint.attributes["dest.k8s.deployment.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Deployment"
            - set(datapoint.attributes["dest.k8s.statefulset.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "StatefulSet"
            - set(datapoint.attributes["dest.k8s.daemonset.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "DaemonSet"
            - set(datapoint.attributes["dest.k8s.service.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Service"
            - set(datapoint.attributes["dest.k8s.job.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Job"
            - set(datapoint.attributes["dest.k8s.node.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Node"
            - set(datapoint.attributes["dest.k8s.pod.name"], resource.attributes["sw.k8s.workload.name"])
              where resource.attributes["sw.k8s.workload.type"] == "Pod"
          - statements:
            - set(datapoint.attributes["dest.k8s.namespace.name"], resource.attributes["sw.k8s.workload.namespace"])
              where resource.attributes["dest.k8s.namespace.name"] == nil and resource.attributes["sw.k8s.workload.namespace"]
              != nil and (IsMatch(metric.name, "^(http\\.server\\.)|(rpc\\.server\\.)")
              or metric.name == "beyla.network.flow.bytes" and datapoint.attributes["direction"]
              == "response")
          - statements:
            - set(resource.attributes["beyla"], "true")
        transform/beyla-fqdn-attribute:
          metric_statements:
          - statements:
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["server.address"])
              where IsMatch(metric.name, "^http\\.client\\.") and datapoint.attributes["sw.k8s.dst.workload.type"]
              == nil and IsMatch(datapoint.attributes["server.address"], "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["server.address"], ".*\\.cluster\\.local\\.?$"))
              and not(IsMatch(datapoint.attributes["server.address"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
            - replace_pattern(datapoint.attributes["dest.sw.server.address.fqdn"], "^(https?://)?([^/:]+)(:\\d+)?$",
              "$$2") where datapoint.attributes["dest.sw.server.address.fqdn"] != nil
            - set(datapoint.attributes["dest.sw.server.address.fqdn"], datapoint.attributes["dst.address"])
              where IsMatch(metric.name, "^beyla\\.network\\.") and datapoint.attributes["sw.k8s.dst.workload.type"]
              == nil and IsMatch(datapoint.attributes["dst.address"], "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["dst.address"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["dst.address"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
            - set(datapoint.attributes["source.sw.server.address.fqdn"], datapoint.attributes["src.address"])
              where IsMatch(metric.name, "^beyla\\.network\\.") and datapoint.attributes["sw.k8s.src.workload.type"]
              == nil and IsMatch(datapoint.attributes["src.address"], "^(https?://)?[a-zA-Z0-9][-a-zA-Z0-9]*\\.[a-zA-Z0-9][-a-zA-Z0-9\\.]*(:\\d+)?$")
              and not(IsMatch(datapoint.attributes["src.address"], ".*\\.cluster\\.local$"))
              and not(IsMatch(datapoint.attributes["src.address"], "^(https?://)?\\d+\\.\\d+\\.\\d+\\.\\d+(:\\d+)?$"))
            - set(datapoint.attributes["sw.server.address.fqdn"], datapoint.attributes["dest.sw.server.address.fqdn"])
              where datapoint.attributes["dest.sw.server.address.fqdn"] != nil
            - set(datapoint.attributes["sw.server.address.fqdn"], datapoint.attributes["source.sw.server.address.fqdn"])
              where datapoint.attributes["source.sw.server.address.fqdn"] != nil
        transform/beyla-keep-only-entity-relation-attributes:
          metric_statements:
          - keep_matching_keys(resource.attributes, "^(sw\\.k8s\\.cluster\\.uid)|(source\\..*)|(dest\\..*)|(beyla)|(tcp)|(http)|(grpc)$")
        transform/beyla-relationship-types:
          metric_statements:
          - set(datapoint.attributes["tcp"], "true") where metric.name == "beyla.network.flow.bytes"
          - set(datapoint.attributes["http"], "true") where IsMatch(metric.name, "^http\\.")
          - set(datapoint.attributes["grpc"], "true") where IsMatch(metric.name, "^rpc\\.")
        transform/scope:
          log_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          metric_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
          trace_statements:
          - statements:
            - set(scope.name, "")
            - set(scope.version, "")
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - k8sattributes
            - resource
            - transform/scope
            - batch
            receivers:
            - otlp
          logs/beyla-stateevents-entities:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - logdedup/solarwindsentity
            - batch
            receivers:
            - solarwindsentity/beyla-entities
          logs/beyla-stateevents-relationships:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/scope
            - logdedup/solarwindsentity
            - batch
            receivers:
            - solarwindsentity/beyla-relationships
          metrics:
            exporters:
            - forward/metrics_common
            processors:
            - memory_limiter
            - filter/histograms
            receivers:
            - routing/metrics
          metrics/beyla-network-entities-and-relationships:
            exporters:
            - forward/metrics_common
            - forward/beyla-relationships
            - solarwindsentity/beyla-entities
            processors:
            - memory_limiter
            - swok8sworkloadtype/beyla
            - transform/beyla-fqdn-attribute
            - groupbyattrs/beyla-entity-ids
            - transform/beyla-entity-ids
            - transform/beyla-relationship-types
            - groupbyattrs/beyla-relationship-types
            - groupbyattrs/beyla-entity-ids-after-transform
            - resource
            receivers:
            - routing/metrics
          metrics/beyla-stateevents-relationships-filter-attributes:
            exporters:
            - solarwindsentity/beyla-relationships
            processors:
            - transform/beyla-keep-only-entity-relation-attributes
            - filter/beyla-self-loop-relationships
            receivers:
            - forward/beyla-relationships
          metrics/common_in:
            exporters:
            - routing/metrics
            processors:
            - memory_limiter
            receivers:
            - otlp
          metrics/common_out:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - k8sattributes
            - metricstransform/rename
            - attributes/clean-attributes-otlp-metrics
            - resource/clean-temporary-attributes
            - resource
            - transform/scope
            - batch
            receivers:
            - forward/metrics_common
          traces:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - k8sattributes
            - resource
            - transform/scope
            - batch
            receivers:
            - otlp
        telemetry:
          logs:
            level: error
          metrics:
            readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
