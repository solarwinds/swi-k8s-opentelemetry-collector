exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
extensions:
  health_check: {}
  memory_ballast:
{{ toYaml .Values.otel.metrics.memory_ballast | indent 4 }}

processors:
  k8sattributes:
{{ include "common.k8s-instrumentation" (tuple . .Values.otel.metrics.k8s_instrumentation.annotations.enabled .Values.otel.metrics.k8s_instrumentation.labels.enabled "true") | indent 4 }}
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.labels.excludePattern) }}
  resource/k8sattributes_labels_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.metrics.k8s_instrumentation.labels.excludePattern }}
{{- end }}
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern) }}
  resource/k8sattributes_annotations_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern }}
{{- end }}
  memory_limiter:
{{ toYaml .Values.otel.metrics.memory_limiter | indent 4 }}
  transform:
    metric_statements:
      - context: datapoint
        statements:
          - convert_gauge_to_sum("cumulative", true) where IsMatch(metric.name, "^.*_total$") == true
          - set(attributes["job_condition"], "Active") where IsMatch(metric.name, "^.*kube_job_status_active$") == true and value_double > 0
          - set(attributes["job_condition"], "Failed") where IsMatch(metric.name, "^.*kube_job_failed$") == true and IsMatch(attributes["condition"], "^true$") == true and value_double > 0
          - set(attributes["job_condition"], "Complete") where IsMatch(metric.name, "^.*kube_job_complete$") == true and IsMatch(attributes["condition"], "^true$") == true and value_double > 0

  # Remove datapoints of internal k8s containers from metrics, excluding the "container_network_.+_total" metric where other datapoints don't exist
  # This is a workaround to not create container entities for POD containers
  filter/remove_internal:
    metrics:
      datapoint:
      - 'attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*") == false'

  # Remove datapoints of internal k8s containers from "container_network_.+_total" metrics after they were already processed
  # This is a workaround to not create container entities for POD containers
  filter/remove_internal_postprocessing:
    metrics:
      datapoint:
      - 'attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*") == true'

  # unify attributes
  attributes/unify_node_attribute:
    include:
      match_type: regexp
      metric_names:
        - container_.*
        - kube_node_.*
        - kube_pod_info
        - kube_pod_container_resource_requests
        - kube_pod_container_resource_limits
        - kube_pod_init_container_resource_requests
        - kube_pod_init_container_resource_limits
    actions:
      - key: k8s.node.name
        from_attribute: node
        action: insert
{{- if not .Values.aws_fargate.enabled }}
      - key: k8s.node.name
        from_attribute: kubernetes_io_hostname
        action: insert
{{- end }}

  transform/unify_node_attribute:
    metric_statements:
      - context: datapoint
        statements:
          # use "service.instance.id" for Node name when the attributes/unify_node_attribute processor failed to provide it
          - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"]) where IsMatch(metric.name, "^(container_.*)|(kube_node_.*)|(kube_pod_info)|(kube_pod_container_resource_requests)|(kube_pod_container_resource_limits)|(kube_pod_init_container_resource_requests)|(kube_pod_init_container_resource_limits)$") == true and attributes["k8s.node.name"] == nil

  attributes/unify_volume_attribute:
    include:
      match_type: regexp
      metric_names:
        - kube_persistentvolumeclaim_.*
        - kube_persistentvolume_claim_ref
    actions:
      - key: persistentvolume
        from_attribute: volumename
        action: insert
      # for kube_persistentvolume_claim_ref
      - key: persistentvolumeclaim
        from_attribute: name
        action: insert
      - key: namespace
        from_attribute: claim_namespace
        action: upsert

  attributes/unify_service_attribute:
    include:
      match_type: regexp
      metric_names:
        - kube_service_.*
    actions:
      - key: k8s.service.name
        from_attribute: service
        action: insert
      - key: sw.k8s.service.external_name
        from_attribute: external_name
        action: insert
      - key: sw.k8s.service.type
        from_attribute: type
        action: insert
      - key: sw.k8s.cluster.ip
        from_attribute: cluster_ip
        action: insert

  attributes/unify_endpoint_attribute:
    include:
      match_type: regexp
      metric_names:
        - kube_endpoint_.*
    actions:
      - key: k8s.service.name
        from_attribute: endpoint
        action: insert
  attributes/unify_pod_attribute:
    include:
      match_type: regexp
      metric_names:
        - kube_pod_.*
    actions:
      - key: k8s.pod.uid
        from_attribute: uid
        action: insert

  attributes/identify_init_container:
    include:
      match_type: regexp
      metric_names:
        - kube_pod_init_container_.*
    actions:
      - key: sw.k8s.container.init
        action: insert
        value: "true"
  attributes/identify_standard_container:
    include:
      match_type: regexp
      metric_names:
        - kube_pod_container_.*
    actions:
      - key: sw.k8s.container.init
        action: insert
        value: "false"
  attributes/remove_temp:
    include:
      match_type: regexp
      metric_names:
        - .*
    actions:
      - key: temp
        pattern: (.*_temp$)|(^\$.*) # attributes starting with $ are result of `combine` operations
        action: delete

  metricstransform/rename:
    transforms:
      # add `k8s.` suffix to all metrics that are clearly provided by Kubernetes
      - include: ^(kube_|container_|kubernetes_|kubelet_)(.*)$$
        match_type: regexp
        action: update
        new_name: k8s.$${1}$${2}
  # Transformations done on all metrics before any grouping
  swmetricstransform/preprocessing:
    transforms:
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "Ready" }
        action: insert
        new_name: k8s.kube_node_status_ready
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: status
            value_actions:
              - value: "true"
                new_value: "Ready"
              - value: "false"
                new_value: "NotReady"
              - value: unknown
                new_value: Unknown
          - action: update_label
            label: status
            new_label: sw.k8s.node.status
      - include: k8s.kube_deployment_status_condition
        experimental_match_labels: { "condition": "Available" }
        action: insert
        new_name: k8s.deployment.condition.available
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: status
            new_label: sw.k8s.deployment.condition.available
      - include: k8s.kube_deployment_status_condition
        experimental_match_labels: { "condition": "Progressing" }
        action: insert
        new_name: k8s.deployment.condition.progressing
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: status
            new_label: sw.k8s.deployment.condition.progressing
      - include: k8s.kube_deployment_status_condition
        experimental_match_labels: { "condition": "ReplicaFailure" }
        action: insert
        new_name: k8s.deployment.condition.replicafailure
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: status
            new_label: sw.k8s.deployment.condition.replicafailure
      - include: k8s.kube_pod_status_reason
        action: update
        new_name: k8s.pod.status.reason
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
      - include: k8s.kube_pod_status_phase
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
      - include: k8s.kube_pod_start_time
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_pod_completion_time
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_persistentvolume_status_phase
        action: insert
        new_name: k8s.persistentvolume.status.phase
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: phase
            new_label: sw.k8s.persistentvolume.status
      - include: k8s.kube_persistentvolumeclaim_status_phase
        action: insert
        new_name: k8s.persistentvolumeclaim.status.phase
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
          - action: update_label
            label: phase
            new_label: sw.k8s.persistentvolumeclaim.status
      - include: k8s.kube_node_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_pod_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_deployment_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_daemonset_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_namespace_status_phase
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
      - include: k8s.kube_namespace_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_statefulset_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_job_created
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_job_status_completion_time
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
      - include: k8s.kube_job_status_start_time
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 0
            datapoint_value_action: exclude
  metricstransform/preprocessing:
    transforms:  
      # Container metrics
      - include: k8s.kube_pod_container_resource_limits
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.container.spec.cpu.limit_temp
      - include: k8s.kube_pod_init_container_resource_limits
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.initcontainer.spec.cpu.limit_temp

      - include: k8s.kube_pod_container_resource_requests
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.container.spec.cpu.requests_temp
      - include: k8s.kube_pod_init_container_resource_requests
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.initcontainer.spec.cpu.requests_temp
      - include: (k8s.container.spec.cpu.requests_temp|k8s.initcontainer.spec.cpu.requests_temp)
        match_type: regexp
        action: combine
        new_name: k8s.container.spec.cpu.requests

      - include: k8s.kube_pod_container_resource_requests
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.container.spec.memory.requests_temp
      - include: k8s.kube_pod_init_container_resource_requests
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.initcontainer.spec.memory.requests_temp
      - include: (k8s.container.spec.memory.requests_temp|k8s.initcontainer.spec.memory.requests_temp)
        match_type: regexp
        action: combine
        new_name: k8s.container.spec.memory.requests

      - include: k8s.kube_pod_container_resource_limits
        action: insert
        match_type: regexp
        experimental_match_labels: { "resource": "memory" }
        new_name: k8s.container.spec.memory.limit_temp
      - include: k8s.kube_pod_init_container_resource_limits
        action: insert
        match_type: regexp
        experimental_match_labels: { "resource": "memory" }
        new_name: k8s.initcontainer.spec.memory.limit_temp

      - include: k8s.container_fs_reads_total
        action: insert
        new_name: k8s.container_fs_reads_total_temp
      - include: k8s.container_fs_writes_total
        action: insert
        new_name: k8s.container_fs_writes_total_temp
      - include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.container.fs.iops
        operations:
          - action: aggregate_labels
            label_set:  [container, pod, namespace]
            aggregation_type: sum

      - include: k8s.container_fs_reads_bytes_total
        action: insert
        new_name: k8s.container_fs_reads_bytes_total_temp
      - include: k8s.container_fs_writes_bytes_total
        action: insert
        new_name: k8s.container_fs_writes_bytes_total_temp
      - include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.container.fs.throughput
        operations:
          - action: aggregate_labels
            label_set:  [container, pod, namespace]
            aggregation_type: sum

      - include: k8s.container_network_receive_bytes_total
        action: insert        
        new_name: k8s.container.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert        
        new_name: k8s.container.network.bytes_transmitted

      - include: k8s.kube_pod_container_status_waiting
        action: insert
        new_name: k8s.kube_pod_container_status_waiting_only_temp
      - include: k8s.kube_pod_container_status_running
        action: insert
        new_name: k8s.kube_pod_container_status_running_only_temp
      - include: k8s.kube_pod_container_status_terminated
        action: insert
        new_name: k8s.kube_pod_container_status_terminated_only_temp
      - include: ^k8s.kube_pod_container_status_(?P<status>[^_]*)_only_temp$
        match_type: regexp
        action: combine
        new_name: k8s.container.status_temp
        submatch_case: lower
        operations:
          - action: update_label
            label: status
            new_label: sw.k8s.container.status
      - include: k8s.kube_pod_init_container_status_waiting
        action: insert
        new_name: k8s.kube_pod_init_container_status_waiting_only_temp
      - include: k8s.kube_pod_init_container_status_running
        action: insert
        new_name: k8s.kube_pod_init_container_status_running_only_temp
      - include: k8s.kube_pod_init_container_status_terminated
        action: insert
        new_name: k8s.kube_pod_init_container_status_terminated_only_temp
      - include: ^k8s.kube_pod_init_container_status_(?P<status>[^_]*)_only_temp$
        match_type: regexp
        action: combine
        new_name: k8s.initcontainer.status_temp
        submatch_case: lower
        operations:
          - action: update_label
            label: status
            new_label: sw.k8s.container.status
      - include: (k8s.initcontainer.status_temp|k8s.container.status_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        new_name: k8s.container.status

      # Pod resource metrics
      - include: k8s.container.spec.cpu.limit_temp
        action: insert
        new_name: k8s.pod.spec.cpu.limit
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: (k8s.container.spec.cpu.limit_temp|k8s.initcontainer.spec.cpu.limit_temp)
        match_type: regexp
        action: combine
        new_name: k8s.container.spec.cpu.limit
      - include: k8s.container.spec.memory.limit_temp
        action: insert
        new_name: k8s.pod.spec.memory.limit
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: (k8s.container.spec.memory.limit_temp|k8s.initcontainer.spec.memory.limit_temp)
        match_type: regexp
        action: combine
        new_name: k8s.container.spec.memory.limit

      - include: k8s.kube_pod_container_status_running
        action: insert
        new_name: k8s.pod.containers.running
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace]
            aggregation_type: sum
      - include: k8s.container.spec.cpu.requests
        action: insert
        new_name: k8s.pod.spec.cpu.requests
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container.spec.memory.requests
        action: insert
        new_name: k8s.pod.spec.memory.requests
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.pod.cpu.usage.seconds.rate
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        new_name: k8s.container.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        match_type: regexp
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.pod.memory.working_set
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container_network_receive_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.bytes_transmitted
      - include: k8s.container_network_receive_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.packets_received
      - include: k8s.container_network_transmit_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.packets_transmitted
      - include: k8s.container_network_receive_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.receive_packets_dropped
      - include: k8s.container_network_transmit_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.transmit_packets_dropped
      - include: k8s.kube_pod_owner
        experimental_match_labels: { "owner_kind": "DaemonSet", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.pod.owner.daemonset
        operations:
          - action: update_label
            label: owner_name
            new_label: daemonset
      - include: k8s.kube_pod_owner
        experimental_match_labels: { "owner_kind": "ReplicaSet", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.pod.owner.replicaset
        operations:
          - action: update_label
            label: owner_name
            new_label: replicaset
      - include: k8s.kube_pod_owner
        experimental_match_labels: { "owner_kind": "StatefulSet", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.pod.owner.statefulset
        operations:
          - action: update_label
            label: owner_name
            new_label: statefulset
      - include: k8s.kube_pod_owner
        experimental_match_labels: { "owner_kind": "Job", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.pod.owner.job
        operations:
          - action: update_label
            label: owner_name
            new_label: job_name
      - include: k8s.kube_replicaset_owner
        experimental_match_labels: { "owner_kind": "Deployment", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.replicaset.owner.deployment
        operations:
          - action: update_label
            label: owner_name
            new_label: deployment
      - include: k8s.container_fs_reads_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.reads.rate
      - include: k8s.container_fs_writes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.writes.rate
      - include: k8s.container_fs_reads_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.reads.bytes.rate
      - include: k8s.container_fs_writes_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.writes.bytes.rate
      - include: k8s.pod.fs.reads.rate
        action: insert
        new_name: k8s.pod.fs.reads.rate_temp
      - include: k8s.pod.fs.writes.rate
        action: insert
        new_name: k8s.pod.fs.writes.rate_temp
      - include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.iops
      - include: k8s.pod.fs.reads.bytes.rate
        action: insert
        new_name: k8s.pod.fs.reads.bytes.rate_temp
      - include: k8s.pod.fs.writes.bytes.rate
        action: insert
        new_name: k8s.pod.fs.writes.bytes.rate_temp
      - include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.throughput
      - include: k8s.container_fs_usage_bytes
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.usage.bytes
      # k8s.node.name metrics
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.memory.working_set
      - include: k8s.kube_node_status_capacity
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.node.cpu.capacity
      - include: k8s.kube_node_status_allocatable
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.node.cpu.allocatable
      - include: k8s.kube_node_status_capacity
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.node.memory.capacity
      - include: k8s.kube_node_status_allocatable
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.node.memory.allocatable
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "Ready", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.ready
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "NetworkUnavailable", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.networkunavailable
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "PIDPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.pidpressure
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "MemoryPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.memorypressure
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "DiskPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.diskpressure
      - include: k8s.container_network_receive_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.bytes_transmitted
      - include: k8s.container_network_receive_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.packets_received
      - include: k8s.container_network_transmit_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.packets_transmitted
      - include: k8s.container_network_receive_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.receive_packets_dropped
      - include: k8s.container_network_transmit_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.transmit_packets_dropped
      - include: k8s.pod.fs.reads.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.reads.rate_temp
      - include: k8s.pod.fs.writes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.writes.rate_temp
      - include: k8s.pod.fs.reads.bytes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.reads.bytes.rate_temp
      - include: k8s.pod.fs.writes.bytes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.writes.bytes.rate_temp
      - include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.iops
      - include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.throughput
      - include: k8s.pod.fs.usage.bytes
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.usage


      # Cluster metrics
      - include: k8s.kubernetes_build_info
        action: insert
        match_type: regexp
        experimental_match_labels: { "job": '.*apiservers.*' }
        new_name: k8s.cluster.version
        operations:
          - action: aggregate_labels
            label_set: [git_version]
            aggregation_type: sum
      - include: k8s.kubernetes_build_info
        action: update
        new_name: k8s.kubernetes_build_info_temp
      # Prometheus metrics
      - include: apiserver_request_total
        action: insert
        match_type: regexp
        # Alternative to (?!5\d\d|429) - Go regex does not support negative lookahead
        experimental_match_labels: { "code": '^(([0-3]|[6-9])\d\d)|(4([0-1]|[3-9])\d)|(42[0-8])$' }
        new_name: apiserver_request_not_failed_temp
      - include: apiserver_request_not_failed_temp
        action: update
        new_name: apiserver_request_not_failed_temp
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: apiserver_request_total
        action: insert
        new_name: apiserver_request_total_temp
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum

      # Job metrics
      - include: k8s.kube_job_owner
        experimental_match_labels: { "owner_kind": "CronJob", "owner_is_controller": "true" }
        action: insert
        new_name: k8s.kube.job.owner.cronjob
        operations:
          - action: update_label
            label: owner_name
            new_label: cronjob
  swmetricstransform/postprocessing:
    transforms:
      - include: k8s.container.status
        action: update
        operations:
          - action: filter_datapoints
            datapoint_value: 1
            datapoint_value_action: include
  cumulativetodelta:
    include:
      metrics:
        - k8s.node.cpu.usage.seconds.rate
        - k8s.pod.cpu.usage.seconds.rate
        - k8s.container.fs.iops
        - k8s.container.fs.throughput
        - k8s.container.cpu.usage.seconds.rate
        - k8s.container.network.bytes_received
        - k8s.container.network.bytes_transmitted
        - apiserver_request_not_failed_temp
        - apiserver_request_total_temp
        - k8s.pod.fs.iops
        - k8s.pod.fs.throughput
        - k8s.pod.fs.reads.rate
        - k8s.pod.fs.writes.rate
        - k8s.pod.fs.reads.bytes.rate
        - k8s.pod.fs.writes.bytes.rate
        - k8s.pod.network.bytes_received
        - k8s.pod.network.bytes_transmitted
        - k8s.pod.network.packets_received
        - k8s.pod.network.packets_transmitted
        - k8s.pod.network.receive_packets_dropped
        - k8s.pod.network.transmit_packets_dropped
        - k8s.node.fs.iops
        - k8s.node.fs.throughput
        - k8s.node.network.bytes_received
        - k8s.node.network.bytes_transmitted
        - k8s.node.network.packets_received
        - k8s.node.network.packets_transmitted
        - k8s.node.network.receive_packets_dropped
        - k8s.node.network.transmit_packets_dropped
      match_type: strict
  deltatorate:
    metrics:
      - k8s.node.cpu.usage.seconds.rate
      - k8s.pod.cpu.usage.seconds.rate
      - k8s.container.fs.iops
      - k8s.container.fs.throughput
      - k8s.container.cpu.usage.seconds.rate
      - k8s.container.network.bytes_received
      - k8s.container.network.bytes_transmitted
      - k8s.pod.fs.iops
      - k8s.pod.fs.throughput
      - k8s.pod.fs.reads.rate
      - k8s.pod.fs.writes.rate
      - k8s.pod.fs.reads.bytes.rate
      - k8s.pod.fs.writes.bytes.rate
      - k8s.pod.network.bytes_received
      - k8s.pod.network.bytes_transmitted
      - k8s.pod.network.packets_received
      - k8s.pod.network.packets_transmitted
      - k8s.pod.network.receive_packets_dropped
      - k8s.pod.network.transmit_packets_dropped
      - k8s.node.fs.iops
      - k8s.node.fs.throughput
      - k8s.node.network.bytes_received
      - k8s.node.network.bytes_transmitted
      - k8s.node.network.packets_received
      - k8s.node.network.packets_transmitted
      - k8s.node.network.receive_packets_dropped
      - k8s.node.network.transmit_packets_dropped
  experimental_metricsgeneration/cluster:
    rules:
      - name: k8s.apiserver.request.successrate
        unit: Percent
        type: calculate
        metric1: apiserver_request_not_failed_temp
        metric2: apiserver_request_total_temp
        operation: percent
  groupbyattrs/node:
    keys:
      - k8s.node.name
  # Transformations done after grouping per k8s.node.name
  metricstransform/aggregate_node_level:
    transforms:
      - include: k8s.kube_pod_info
        action: insert
        new_name: k8s.node.pods
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  groupbyattrs/pod:
    keys:
      - namespace
      - pod
  # Transformations done after grouping per pod
  metricstransform/aggregate_pod_level:
    transforms:
      - include: k8s.kube_pod_container_info
        action: insert
        new_name: k8s.pod.containers
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  groupbyattrs/all:
    keys:
      - kubelet_version
      - container_runtime_version
      - provider_id
      - os_image
      - namespace
      - uid
      - k8s.pod.uid
      - pod_ip
      - host_ip
      - created_by_kind
      - created_by_name
      - host_network
      - priority_class
      - container_id
      - container
      - image
      - image_id
      - k8s.node.name
      - sw.k8s.pod.status
      - sw.k8s.namespace.status
      - sw.k8s.node.status
      - sw.k8s.container.status
      - sw.k8s.container.init
      - daemonset
      - statefulset
      - deployment
      - replicaset
      - job_name
      - cronjob
      - git_version
      - internal_ip
      - job_condition
      - persistentvolumeclaim
      - persistentvolume
      - sw.k8s.persistentvolumeclaim.status
      - sw.k8s.persistentvolume.status
      - storageclass
      - access_mode
      - k8s.service.name
      - sw.k8s.service.external_name
      - sw.k8s.service.type
      - sw.k8s.cluster.ip
{{- if .Values.otel.metrics.filter }}
  filter:
    metrics:
{{ toYaml .Values.otel.metrics.filter | indent 6 }}
{{- end }}

  # Those metrics are generated by Prometheus reciever (https://prometheus.io/docs/concepts/jobs_instances/#automatically-generated-labels-and-time-series)
  filter/receiver:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - scrape_duration_seconds
          - scrape_samples_post_metric_relabeling
          - scrape_samples_scraped
          - scrape_series_added
          - up      
  attributes/attributes_namespace_status:
    include:
      match_type: regexp
      metric_names:
        - k8s.kube_namespace_status_phase
    actions:
      - key: sw.k8s.namespace.status
        from_attribute: phase
        action: insert

  attributes/attributes_pod_status:
    include:
      match_type: regexp
      metric_names:
        - kube_pod_status_phase
    actions:
      - key: sw.k8s.pod.status
        from_attribute: phase
        action: insert

  resource/metrics:
    attributes:      
      # Remove useless attributes
      - key: service.name
        action: delete

      - key: service.instance.id
        action: delete

      - key: net.host.name
        action: delete

      - key: net.host.port
        action: delete

      - key: http.scheme
        action: delete

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.cluster.version
        from_attribute: git_version
        action: insert

      # k8s.node.name
      - key: sw.k8s.node.version
        from_attribute: kubelet_version
        action: insert      

      - key: sw.k8s.node.container.runtime.version
        from_attribute: container_runtime_version
        action: insert      

      - key: sw.k8s.node.provider.id
        from_attribute: provider_id
        action: insert      

      - key: sw.k8s.node.os.image
        from_attribute: os_image
        action: insert
      
      - key: sw.k8s.node.ip.internal
        from_attribute: internal_ip
        action: insert      

      # Namespace
      - key: k8s.namespace.name
        from_attribute: namespace
        action: insert      
      # Pod
      - key: k8s.pod.name
        from_attribute: pod
        action: insert

      - key: sw.k8s.pod.ip
        from_attribute: pod_ip
        action: insert

      - key: sw.k8s.pod.host.ip
        from_attribute: host_ip
        action: insert      

      - key: sw.k8s.pod.createdby.kind
        from_attribute: created_by_kind
        action: insert      

      - key: sw.k8s.pod.createdby.name
        from_attribute: created_by_name
        action: insert      

      - key: sw.k8s.pod.host.network
        from_attribute: host_network
        action: insert      

      - key: sw.k8s.pod.priority_class
        from_attribute: priority_class
        action: insert      

      # Container
      - key: container_id
        action: extract
        pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
      - key: container.id
        from_attribute: extracted_container_id
        action: insert      
      - key: container.runtime
        from_attribute: extracted_container_runtime
        action: insert      

      - key: k8s.container.name
        from_attribute: container
        action: insert      

      - key: k8s.container.image.id
        from_attribute: image_id
        action: insert      

      - key: k8s.container.image.name
        from_attribute: image
        action: insert      

      # ReplicaSet
      - key: k8s.replicaset.name
        from_attribute: replicaset
        action: insert      

      # Deployment
      - key: k8s.deployment.name
        from_attribute: deployment
        action: insert      

      # StatefulSet
      - key: k8s.statefulset.name
        from_attribute: statefulset
        action: insert

      # DaemonSet
      - key: k8s.daemonset.name
        from_attribute: daemonset
        action: insert      

      # Job
      - key: k8s.job.name
        from_attribute: job_name
        action: insert      

      - key: k8s.job.condition
        from_attribute: job_condition
        action: insert      

      # CronJob
      - key: k8s.cronjob.name
        from_attribute: cronjob
        action: insert      

      # PersistentVolume
      - key: k8s.persistentvolume.name
        from_attribute: persistentvolume
        action: insert      

      # PersistentVolumeClaim
      - key: k8s.persistentvolumeclaim.name
        from_attribute: persistentvolumeclaim
        action: insert

  transform/cleanup_attributes_for_nonexisting_entities:
    metric_statements:
      - context: metric
        statements:
          - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"] == "false"
          - delete_key(resource.attributes, "sw.k8s.pod.found")
          - delete_key(resource.attributes, "sw.k8s.deployment.found")
          - delete_key(resource.attributes, "sw.k8s.statefulset.found")
          - delete_key(resource.attributes, "sw.k8s.replicaset.found")
          - delete_key(resource.attributes, "sw.k8s.daemonset.found")
          - delete_key(resource.attributes, "sw.k8s.job.found")
          - delete_key(resource.attributes, "sw.k8s.cronjob.found")
          - delete_key(resource.attributes, "sw.k8s.node.found")

  attributes/remove_prometheus_attributes_endpoint:
    exclude:
      match_type: regexp
      metric_names:
        - kube_endpoint_.*
    actions:
      - key: endpoint
        action: delete

  attributes/remove_prometheus_attributes:    
    actions:
      - key: prometheus
        action: delete
      - key: prometheus_replica
        action: delete

  resource/events:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: event
        action: insert
  batch:
{{ toYaml .Values.otel.metrics.batch | indent 4 }}

  filter/kube-state-metrics:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "^kube_deployment_created$"
          - "^kube_daemonset_created$"
          - "^kube_namespace_created$"
          - "^kube_node_info$"
          - "^kube_node_created$"
          - "^kube_node_status_capacity$"
          - "^kube_node_status_condition$"
          - "^kube_pod_created$"
          - "^kube_pod_info$"
          - "^kube_pod_owner$"
          - "^kube_pod_completion_time$"
          - "^kube_pod_status_phase$"
          - "^kube_pod_status_ready$"
          - "^kube_pod_status_reason$"
          - "^kube_pod_start_time$"
          - "^kube_pod_container_.*$"
          - "^kube_pod_init_container_.*$"
          - "^kube_namespace_status_phase$"
          - "^kube_deployment_labels$"
          - "^kube_deployment_spec_replicas$"
          - "^kube_deployment_spec_paused$"
          - "^kube_deployment_status_replicas$"
          - "^kube_deployment_status_replicas_ready$"
          - "^kube_deployment_status_replicas_available$"
          - "^kube_deployment_status_replicas_updated$"
          - "^kube_deployment_status_replicas_unavailable$"
          - "^kube_deployment_status_condition$"
          - "^kube_replicaset_owner$"
          - "^kube_replicaset_created$"
          - "^kube_replicaset_spec_replicas$"
          - "^kube_replicaset_status_ready_replicas$"
          - "^kube_replicaset_status_replicas$"
          - "^kube_statefulset_labels$"
          - "^kube_statefulset_replicas$"
          - "^kube_statefulset_status_replicas_ready$"
          - "^kube_statefulset_status_replicas_current$"
          - "^kube_statefulset_status_replicas_updated$"
          - "^kube_statefulset_created$"
          - "^kube_daemonset_labels$"
          - "^kube_daemonset_status_current_number_scheduled$"
          - "^kube_daemonset_status_desired_number_scheduled$"
          - "^kube_daemonset_status_updated_number_scheduled$"
          - "^kube_daemonset_status_number_available$"
          - "^kube_daemonset_status_number_misscheduled$"
          - "^kube_daemonset_status_number_ready$"
          - "^kube_daemonset_status_number_unavailable$"
          - "^kube_resourcequota$"
          - "^kube_node_status_allocatable$"
          - "^kube_node_spec_unschedulable$"
          - "^kube_job_info$"
          - "^kube_job_owner$"
          - "^kube_job_created$"
          - "^kube_job_complete$"
          - "^kube_job_failed$"
          - "^kube_job_status_active$"
          - "^kube_job_status_succeeded$"
          - "^kube_job_status_failed$"
          - "^kube_job_status_start_time$"
          - "^kube_job_status_completion_time$"
          - "^kube_job_spec_completions$"
          - "^kube_job_spec_parallelism$"
          - "^kube_persistentvolume_capacity_bytes$"
          - "^kube_persistentvolume_info$"
          - "^kube_persistentvolume_status_phase$"
          - "^kube_persistentvolume_claim_ref$"
          - "^kube_persistentvolume_created$"
          - "^kube_persistentvolumeclaim_info$"
          - "^kube_persistentvolumeclaim_access_mode$"
          - "^kube_persistentvolumeclaim_status_phase$"
          - "^kube_persistentvolumeclaim_resource_requests_storage_bytes$"
          - "^kube_persistentvolumeclaim_created$"
          - "^kube_pod_spec_volumes_persistentvolumeclaims_info$"
          - "^kube_service_annotations$"
          - "^kube_service_info$"
          - "^kube_service_labels$"
          - "^kube_service_created$"
          - "^kube_service_spec_type$"
          - "^kube_service_spec_external_ip$"
          - "^kube_service_status_load_balancer_ingress$"
          - "^kube_endpoint_annotations$"
          - "^kube_endpoint_address_not_ready$"
          - "^kube_endpoint_address_available$"
          - "^kube_endpoint_info$"
          - "^kube_endpoint_labels$"
          - "^kube_endpoint_created$"
          - "^kube_endpoint_ports$"
          - "^kube_endpoint_address$"

connectors:
  forward/prometheus:

receivers:
  k8s_events:
  prometheus/prometheus-server:
    config:
      scrape_configs:
        - job_name: prometheus
          scheme: {{ .Values.otel.metrics.prometheus.scheme | default "http" | quote }}
          scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
          metrics_path: "/federate"
          honor_timestamps: false
          honor_labels: true
          params:
            "match[]":
              - "container_cpu_usage_seconds_total"
              - "container_spec_cpu_quota"
              - "container_spec_cpu_period"
              - "container_memory_working_set_bytes"
              - "container_spec_memory_limit_bytes"
              - "container_cpu_cfs_throttled_periods_total"
              - "container_cpu_cfs_periods_total"
              - "container_fs_reads_total"
              - "container_fs_writes_total"
              - "container_fs_reads_bytes_total"
              - "container_fs_writes_bytes_total"
              - "container_fs_usage_bytes"
              - "container_network_receive_bytes_total"
              - "container_network_transmit_bytes_total"
              - "container_network_receive_packets_total"
              - "container_network_transmit_packets_total"
              - "container_network_receive_packets_dropped_total"
              - "container_network_transmit_packets_dropped_total"
              - "apiserver_request_total"
              - "kubelet_volume_stats_available_percent"
              - '{__name__="kubernetes_build_info", job=~".*apiserver.*"}'
{{- if .Values.otel.metrics.extra_scrape_metrics }}
{{ toYaml .Values.otel.metrics.extra_scrape_metrics | indent 14 }}
{{- end }}
          static_configs:
            - targets:
                - ${PROMETHEUS_URL}
  prometheus/kube-state-metrics:
    config:
      scrape_configs:
        - job_name: kube-state-metrics
          scheme: {{ (index .Values.otel.metrics "kube-state-metrics").scheme | default "http" | quote }}
          scrape_interval: {{ quote (index .Values.otel.metrics "kube-state-metrics").scrape_interval }}
          metrics_path: "/metrics"
          honor_timestamps: true
          honor_labels: true
          static_configs:
            - targets:
                - ${KUBE_STATE_METRICS_URL}
service:
  extensions:
    - health_check
    - memory_ballast
  pipelines:
    metrics/prometheus:
      exporters:
        - forward/prometheus
      processors:
        - memory_limiter
      receivers:
        - prometheus/prometheus-server
    metrics/kubestatemetrics:
      exporters:
        - forward/prometheus
      processors:
        - memory_limiter
        - filter/kube-state-metrics
      receivers:
        - prometheus/kube-state-metrics
    metrics:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - filter/receiver
        - transform
        - filter/remove_internal        
        - attributes/remove_prometheus_attributes
        - attributes/remove_prometheus_attributes_endpoint
        - attributes/unify_node_attribute
        - transform/unify_node_attribute
        - attributes/unify_volume_attribute        
        - attributes/unify_service_attribute
        - attributes/unify_endpoint_attribute
        - attributes/unify_pod_attribute
        - attributes/identify_init_container
        - attributes/identify_standard_container
        - metricstransform/rename
        - swmetricstransform/preprocessing
        - metricstransform/preprocessing
        - swmetricstransform/postprocessing
        - filter/remove_internal_postprocessing
        - attributes/remove_temp
        - attributes/attributes_pod_status
        - attributes/attributes_namespace_status
        - cumulativetodelta
        - deltatorate
        - experimental_metricsgeneration/cluster
        - groupbyattrs/node
        - metricstransform/aggregate_node_level
        - groupbyattrs/pod
        - metricstransform/aggregate_pod_level
        - groupbyattrs/all
{{- if .Values.otel.metrics.filter }}
        - filter
{{- end }}
        - resource/metrics
        - k8sattributes
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.labels.excludePattern) }}
        - resource/k8sattributes_labels_filter
{{- end }}
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern) }}
        - resource/k8sattributes_annotations_filter
{{- end }}
        - transform/cleanup_attributes_for_nonexisting_entities
        - batch
      receivers:
        - forward/prometheus
  telemetry:
{{- if .Values.otel.metrics.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.metrics.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.metrics.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.metrics.telemetry.metrics.address }}
{{- end }}
