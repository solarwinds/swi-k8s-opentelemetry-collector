exporters:
  debug:
    verbosity: detailed
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
    retry_on_failure:
      enabled: {{ .Values.otel.gateway.retry_on_failure.enabled }}
      initial_interval: {{ .Values.otel.gateway.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.otel.gateway.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.otel.gateway.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.otel.gateway.sending_queue.enabled }}
      num_consumers: {{ .Values.otel.gateway.sending_queue.num_consumers }}
      queue_size: {{ .Values.otel.gateway.sending_queue.queue_size }}
{{- if .Values.otel.gateway.sending_queue.offload_to_disk }}
      storage: file_storage/sending_queue
{{- end }}
    timeout: {{ .Values.otel.gateway.timeout }}

extensions:
{{- if .Values.otel.gateway.sending_queue.offload_to_disk }}
  file_storage/sending_queue:
    directory: /var/lib/swo/sending_queue
    fsync: true
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133

processors:
  batch:
{{ toYaml .Values.otel.gateway.batch | indent 4 }}

  memory_limiter:
{{ toYaml .Values.otel.gateway.memory_limiter | indent 4 }}

  k8sattributes:
{{ include "common.k8s-instrumentation" . | indent 4 }}

  metricstransform/rename:
    transforms:
      # add predefined prefix to all proxied metrics
      - include: ^(.*)$$
        match_type: regexp
        action: update
        new_name: {{ .Values.otel.gateway.prefix }}$${1}

  resource:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: upsert

  # Those attributes are defined by SWO K8s Collector even if they are send as attributes in OTLP message
  attributes/clean-attributes-otlp-metrics:
    actions:
      - key: k8s.cluster.name
        action: delete

  transform/scope:
    metric_statements:
      - statements:
        - set(scope.name, "")
        - set(scope.version, "")
    log_statements:
      - statements:
        - set(scope.name, "")
        - set(scope.version, "")
    trace_statements:
      - statements:
        - set(scope.name, "")
        - set(scope.version, "")

  filter/otlp-metrics:
    metrics:
      metric:
        # metrics from EBPF reducer that are not needed
        - 'IsMatch(name, "^ebpf_net.*$")'

  filter/histograms:
    metrics:
      metric:
        - 'type == METRIC_DATA_TYPE_HISTOGRAM'

  filter/histograms_beyla:
    metrics:
      metric:
        # Exclude all histograms except the ones listed below
        # excluded histograms are:
        # - all histograms from beyla
        - 'type == METRIC_DATA_TYPE_HISTOGRAM and not(
            name == "http.client.request.duration" or
            name == "http.client.request.body.size" or
            name == "http.client.response.body.size" or
            name == "http.server.request.duration" or 
            name == "http.server.request.body.size" or
            name == "http.server.response.body.size" or
            name == "rpc.client.duration" or
            name == "rpc.server.duration" or
            name == "sql.client.duration" or
            name == "redis.client.duration" or
            name == "messaging.publish.duration" or
            name == "messaging.process.duration"
          )'

  swok8sworkloadtype/beyla:
    workload_mappings:
      - name_attr: k8s.src.owner.name
        namespace_attr: k8s.src.namespace
        workload_type_attr: k8s.src.owner.type_new
        expected_types:
          - deployments
          - daemonsets
          - statefulsets
          - services
          - jobs
          - cronjobs
          - pods
          - nodes
      - name_attr: k8s.dst.owner.name
        namespace_attr: k8s.dst.namespace
        workload_type_attr: k8s.dst.owner.type_new
        expected_types:
          - deployments
          - daemonsets
          - statefulsets
          - services
          - jobs
          - cronjobs
          - pods
          - nodes
      - name_attr: k8s.owner.name
        namespace_attr: k8s.namespace.name
        workload_type_attr: k8s.owner.type_new
        expected_types:
          - deployments
          - daemonsets
          - statefulsets
          - services
          - jobs
          - cronjobs
          - pods
          - nodes

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:{{ .Values.otel.gateway.otlp_endpoint.port }}
      http:
        endpoint: 0.0.0.0:{{ .Values.otel.gateway.otlp_endpoint.http_port }}

connectors:
  forward/metrics_common:
  routing/metrics:
    default_pipelines: [metrics]
    table:
      - context: metric
        pipelines: [metrics/beyla]
        condition: |
          name == "http.client.request.duration" or
          name == "http.client.request.body.size" or
          name == "http.client.response.body.size" or
          name == "http.server.request.duration" or 
          name == "http.server.request.body.size" or
          name == "http.server.response.body.size" or
          name == "rpc.client.duration" or
          name == "rpc.server.duration" or
          name == "sql.client.duration" or
          name == "redis.client.duration" or
          name == "messaging.publish.duration" or
          name == "messaging.process.duration" or
          name == "process.cpu.time" or
          name == "process.cpu.utilization" or
          name == "process.memory.usage" or
          name == "process.memory.virtual" or
          name == "process.disk.io" or
          name == "process.network.io" or
          name == "beyla.network.flow.bytes" or
          name == "beyla.network.inter.zone.bytes"

service:
  extensions:
{{- if .Values.otel.gateway.sending_queue.offload_to_disk }}
    - file_storage/sending_queue
{{- end }}
    - health_check
  pipelines:
    metrics:
      exporters:
        - forward/metrics_common
      processors:
        - filter/histograms
{{- if .Values.ebpfNetworkMonitoring.reducer.telemetry.metrics.enabled }}
        - filter/otlp-metrics
{{- end }}
      receivers:
        - routing/metrics
    metrics/beyla:
      exporters:
        - forward/metrics_common
        - debug
      processors:
        - filter/histograms_beyla
        - swok8sworkloadtype/beyla
      receivers:
        - routing/metrics
    metrics/common_in:
      exporters:
        - routing/metrics
      processors:
        - memory_limiter
      receivers:
        - otlp
    metrics/common_out:
      exporters:
        - otlp
      processors:
        - memory_limiter
        # - k8sattributes
{{- if .Values.otel.gateway.prefix }}
        - metricstransform/rename
{{- end }}
        - attributes/clean-attributes-otlp-metrics
        - resource
        - transform/scope
        - batch
      receivers:
        - forward/metrics_common
    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - k8sattributes
        - resource
        - transform/scope
        - batch
      receivers:
        - otlp
    traces:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - k8sattributes
        - resource
        - transform/scope
        - batch
      receivers:
        - otlp
  telemetry:
{{- if .Values.otel.gateway.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.gateway.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.gateway.telemetry.metrics.enabled }}
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: {{ (split ":" .Values.otel.gateway.telemetry.metrics.address)._0 | quote }}
                port: {{ (split ":" .Values.otel.gateway.telemetry.metrics.address)._1 }}
{{- end }}