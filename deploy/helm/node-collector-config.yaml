exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
    retry_on_failure:
      enabled: {{ .Values.otel.node_collector.retry_on_failure.enabled }}
      initial_interval: {{ .Values.otel.node_collector.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.otel.node_collector.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.otel.node_collector.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.otel.node_collector.sending_queue.enabled }}
      num_consumers: {{ .Values.otel.node_collector.sending_queue.num_consumers }}
      queue_size: {{ .Values.otel.node_collector.sending_queue.queue_size }}
{{- if .Values.otel.node_collector.sending_queue.persistent_storage.enabled }}
      storage: file_storage/sending_queue
{{- end }}
    timeout: {{ .Values.otel.node_collector.timeout }}
extensions:
  file_storage/checkpoints:
{{ toYaml .Values.otel.logs.filestorage | indent 4 }}
{{- if .Values.otel.node_collector.sending_queue.persistent_storage.enabled }}
  file_storage/sending_queue:
    directory: {{ .Values.otel.node_collector.sending_queue.persistent_storage.directory }}
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133
{{- if and .Values.otel.metrics.enabled (or (not .Values.aws_fargate.enabled) .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled) }}
  k8s_observer:
    auth_type: serviceAccount
    node: ${NODE_NAME}
    observe_pods: true
    observe_nodes: true
{{- end }}

processors:
  memory_limiter:
{{ toYaml .Values.otel.logs.memory_limiter | indent 4 }}

{{- if (include "logsFilter" .) }}
  # For more all the options about the filtering see https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
  filter/logs:
    logs:
{{ include "logsFilter" . | indent 6 }}
{{- end }}

  {{- include "common-config.filter-reciever" . | nindent 2 }}
  {{- include "common-config.filter-remove-internal" . | nindent 2 }}
  {{- include "common-config.attributes-remove-prometheus-attributes" . | nindent 2 }}

  # unify attributes
  attributes/unify_node_attribute:
    include:
      match_type: regexp
      metric_names:
        - container_.*
    actions:
      - key: k8s.node.name
        from_attribute: node
        action: insert
{{- if not .Values.aws_fargate.enabled }}
      - key: k8s.node.name
        from_attribute: kubernetes_io_hostname
        action: insert
{{- end }}

  {{- include "common-config.transform-node-attributes" . | nindent 2 }}

  metricstransform/preprocessing:
    transforms:
      {{- include "common-config.metricstransform-preprocessing-cadvisor" . | nindent 6 }}

  {{- include "common-config.filter-remove-internal-post-processing" . | nindent 2 }}
  {{- include "common-config.attributes-remove-temp" . | nindent 2 }}

  cumulativetodelta/cadvisor:
    include:
      metrics:
        {{- include "common-config.cumulativetorate-cadvisor" . | nindent 8 }}
      match_type: strict

  deltatorate/cadvisor:
    metrics:
      {{- include "common-config.cumulativetorate-cadvisor" . | nindent 6}}

  {{- include "common-config.groupbyattrs-node" . | nindent 2 }}
  {{- include "common-config.groupbyattrs-pod" . | nindent 2 }}
  {{- include "common-config.groupbyattrs-all" . | nindent 2 }}

{{- if .Values.otel.metrics.filter }}
  filter/metrics:
    metrics:
{{ toYaml .Values.otel.metrics.filter | indent 6 }}
{{- end }}

{{- include "common-config.filter-remove-temporary-metrics" . | nindent 2 }}

  {{- include "common-config.resource-metrics" . | nindent 2 }}

  groupbyattrs/common-all:
    keys:
      - k8s.container.name
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.pod.uid
      - host.name
      - service.name

  resource/all:
    attributes:

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: upsert

  resource/container:
    attributes:

      - key: sw.k8s.log.type
        value: container
        action: insert

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: insert
{{- if and (not .isWindows) .Values.otel.logs.journal }}
  resource/journal:
    attributes:

      - key: sw.k8s.log.type
        value: journal
        action: insert

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: insert
{{- end }}
  transform/syslogify:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
{{- if eq (include "isDeprecatedFilterSyntax" .Values.otel.logs.filter) "true" }}
          - set( attributes["host.name"], attributes["k8s.pod.name"])
          - set( attributes["service.name"], attributes["k8s.container.name"])
{{- else }}
          - set( attributes["host.name"], resource.attributes["k8s.pod.name"])
          - set( attributes["service.name"], resource.attributes["k8s.container.name"])
{{- end }}

  batch/logs:
{{ toYaml .Values.otel.logs.batch | indent 4 }}

  batch/metrics:
{{ toYaml .Values.otel.metrics.batch | indent 4 }}

  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    filter:
      node_from_env_var: NODE_NAME
    extract:
      metadata:
        - k8s.deployment.name
        - k8s.replicaset.name
        - k8s.daemonset.name
        - k8s.job.name
        - k8s.cronjob.name
        - k8s.statefulset.name
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name

  metricstransform/rename:
    transforms:
      # add `k8s.` prefix to all metrics
      - include: ^(.*)$$
        match_type: regexp
        action: update
        new_name: k8s.$${1}

  metricstransform/rename/discovery:
    transforms:
      # add `k8s.` prefix to all metrics
      - include: ^(.*)$$
        match_type: regexp
        action: update
        new_name: {{ .Values.otel.metrics.autodiscovery.prefix }}$${1}

{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
  cumulativetodelta/discovery:
    include:
      metrics:
{{- range .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
        - {{ . }}
{{- end }}
      match_type: strict
  deltatorate/discovery:
    metrics:
{{- range .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
      - {{ . }}
{{- end }}
{{- end }}

{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter }}
  filter/metrics-discovery:
    metrics:
{{ toYaml .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter | indent 6 }}
{{- end }}

  filter/histograms:
    metrics:
      metric:
        - 'type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds" or name == "k8s.workqueue_queue_duration_seconds" or name == "k8s.etcd_disk_wal_fsync_duration_seconds" or name == "k8s.etcd_disk_backend_commit_duration_seconds")'
  transform/scope:
    metric_statements:
      - context: scope
        statements:
          - set(name, "")
          - set(version, "")
    log_statements:
      - context: scope
        statements:
          - set(name, "")
          - set(version, "")
  transform/istio-metrics:
    metric_statements:
      - context: metric
        statements:
          - extract_sum_metric(true) where (name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_bytes" or name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_response_bytes" or name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_duration_milliseconds")
          - extract_count_metric(true) where (name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_duration_milliseconds")
          - set(name, "k8s.istio_request_duration_milliseconds_sum_temp") where name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_duration_milliseconds_sum"
          - set(name, "k8s.istio_request_duration_milliseconds_count_temp") where name == "{{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_duration_milliseconds_count"
  
{{- if ne .Values.otel.metrics.autodiscovery.prefix "k8s." }}
  # in case the prefix differs from "k8s." we need to copy the required metrics
  # so that SWO built-in dashboards works correctly
{{- $arrayOfRequiredMetrics := list 
  "etcd_disk_backend_commit_duration_seconds"
  "etcd_disk_wal_fsync_duration_seconds" 
  "etcd_network_client_grpc_received_bytes_total" 
  "etcd_network_client_grpc_sent_bytes_total" 
  "etcd_network_peer_received_bytes_total" 
  "etcd_network_peer_sent_bytes_total" 
  "etcd_server_leader_changes_seen_total" 
  "etcd_server_proposals_applied_total" 
  "etcd_server_proposals_committed_total"
  "etcd_server_proposals_failed_total"
  "etcd_server_proposals_pending"
  "etcd_server_has_leader"
  "etcd_mvcc_db_total_size_in_bytes"
  "process_resident_memory_bytes"
  "grpc_server_started_total"
  "grpc_server_handled_total"
  "rest_client_request_duration_seconds"
  "rest_client_requests_total"
  "workqueue_adds_total"
  "workqueue_depth"
  "workqueue_queue_duration_seconds"
}}
  metricstransform/copy-required-metrics:
    transforms:
    {{- $root := . }}
    {{- range $index, $metric := $arrayOfRequiredMetrics }}
      - include: {{ $root.Values.otel.metrics.autodiscovery.prefix }}{{ $metric }}
        action: insert
        new_name: k8s.{{ $metric }}
    {{- end }}
{{- end }}
  metricstransform/istio-metrics:
    transforms:
      - include: {{ .Values.otel.metrics.autodiscovery.prefix }}istio_request_bytes_sum
        action: insert
        new_name: k8s.istio_request_bytes.rate
      - include: {{ .Values.otel.metrics.autodiscovery.prefix }}istio_response_bytes_sum
        action: insert
        new_name: k8s.istio_response_bytes.rate
      - include: {{ .Values.otel.metrics.autodiscovery.prefix }}istio_requests_total
        action: insert
        new_name: k8s.istio_requests.rate
      - include: {{ .Values.otel.metrics.autodiscovery.prefix }}istio_tcp_sent_bytes_total
        action: insert
        new_name: k8s.istio_tcp_sent_bytes.rate
      - include: {{ .Values.otel.metrics.autodiscovery.prefix }}istio_tcp_received_bytes_total
        action: insert
        new_name: k8s.istio_tcp_received_bytes.rate
      - include: k8s.istio_request_bytes.rate
        action: insert
        new_name: k8s.istio_request_bytes.delta
      - include: k8s.istio_response_bytes.rate
        action: insert
        new_name: k8s.istio_response_bytes.delta
      - include: k8s.istio_requests.rate
        action: insert
        new_name: k8s.istio_requests.delta
      - include: k8s.istio_tcp_sent_bytes.rate
        action: insert
        new_name: k8s.istio_tcp_sent_bytes.delta
      - include: k8s.istio_tcp_received_bytes.rate
        action: insert
        new_name: k8s.istio_tcp_received_bytes.delta

  cumulativetodelta/istio-metrics:
    include:
      metrics:
        - k8s.istio_request_bytes.rate
        - k8s.istio_response_bytes.rate
        - k8s.istio_request_duration_milliseconds_sum_temp
        - k8s.istio_request_duration_milliseconds_count_temp
        - k8s.istio_requests.rate
        - k8s.istio_tcp_sent_bytes.rate
        - k8s.istio_tcp_received_bytes.rate
        - k8s.istio_request_bytes.delta
        - k8s.istio_response_bytes.delta
        - k8s.istio_requests.delta
        - k8s.istio_tcp_sent_bytes.delta
        - k8s.istio_tcp_received_bytes.delta
      match_type: strict

  deltatorate/istio-metrics:
    metrics:
      - k8s.istio_request_bytes.rate
      - k8s.istio_response_bytes.rate
      - k8s.istio_request_duration_milliseconds_sum_temp
      - k8s.istio_request_duration_milliseconds_count_temp
      - k8s.istio_requests.rate
      - k8s.istio_tcp_sent_bytes.rate
      - k8s.istio_tcp_received_bytes.rate

  metricsgeneration/istio-metrics:
    rules:
      - name: k8s.istio_request_duration_milliseconds.rate
        type: calculate
        metric1: k8s.istio_request_duration_milliseconds_sum_temp
        metric2: k8s.istio_request_duration_milliseconds_count_temp
        operation: divide


connectors:
{{- if and .Values.otel.metrics.enabled (or (not .Values.aws_fargate.enabled) .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled) }}
  forward/metric-exporter:
{{- end }}
{{- if and .Values.otel.logs.enabled (or .Values.otel.logs.container (and (not .isWindows) .Values.otel.logs.journal))}}
  forward/logs-exporter:
{{- end }}

receivers:
{{- if and (not .isWindows) .Values.otel.logs.journal }}
  journald:
    files: ["/*/log/journal/**/*"]
    units:
      - kubelet
      - docker
      - containerd
{{- end}}
  filelog:
{{- if (.isWindows) }}
    include: [ "\\var\\log\\pods\\*\\*\\*.log" ]
    exclude: [ "\\var\\log\\pods\\${POD_NAMESPACE}_${POD_NAME}*_*\\swi-opentelemetry-collector\\*.log" ]
{{- else }}
    include: [ "/var/log/pods/*/*/*.log" ]
    # Exclude collector container's logs. The file format is /var/log/pods/<namespace_name>_<pod_name>_<pod_uid>/<container_name>/<run_id>.log
    exclude: [ "/var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log" ]
{{- end }}
    start_at: {{ .Values.otel.logs.receiver.start_at }}
    include_file_path: true
    include_file_name: false
    storage: file_storage/checkpoints
    max_log_size: {{ .Values.otel.logs.receiver.max_log_size }}
    max_concurrent_files: {{ .Values.otel.logs.receiver.max_concurrent_files }}
    fingerprint_size: {{ .Values.otel.logs.receiver.fingerprint_size }}
    encoding: {{ .Values.otel.logs.receiver.encoding }}
    poll_interval: {{ .Values.otel.logs.receiver.poll_interval }}
{{- if eq (include "isDeprecatedFilterSyntax" .Values.otel.logs.filter) "true" }}
    operators:
      # Find out which format is used by kubernetes
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: 'body matches "^\\{"'
          - output: parser-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: 'body matches "^[^ Z]+Z"'
      # Parse CRI-O format
      - type: regex_parser
        id: parser-crio
        regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$'
        output: merge-cri-lines
        parse_to: body
        timestamp:
          parse_from: body.time
          layout_type: gotime
          layout: '2006-01-02T15:04:05.999999999-07:00'
      # Parse CRI-Containerd format
      - type: regex_parser
        id: parser-containerd
        regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$'
        output: merge-cri-lines
        parse_to: body
        timestamp:
          parse_from: body.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Parse Docker format
      - type: json_parser
        id: parser-docker
        parse_to: body
        output: merge-docker-lines
        timestamp:
          parse_from: body.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'

      # Merge log lines split by Docker logging driver.
      - type: recombine
        id: merge-docker-lines
        source_identifier: attributes["log.file.path"]
        output: merge-multiline-logs
        combine_field: body.log
        combine_with: ""
        is_last_entry: body.log matches "\n$"
        max_unmatched_batch_size: 1

      # Merge log lines split by CRI logging drivers.
      - type: recombine
        id: merge-cri-lines
        source_identifier: attributes["log.file.path"]
        output: merge-multiline-logs
        combine_field: body.log
        combine_with: ""
        is_last_entry: body.logtag == "F"
        overwrite_with: newest
        max_unmatched_batch_size: 1

      # Merges incoming log records into multiline logs.
      - type: recombine
        id: merge-multiline-logs
        output: extract-metadata-from-filepath
        source_identifier: attributes["log.file.path"]
        combine_field: body.log
        combine_with: ""
        is_first_entry: body.log matches "^\\[?\\d{4}-\\d{1,2}-\\d{1,2}.\\d{2}:\\d{2}:\\d{2}.*"
        max_unmatched_batch_size: 1

      # Extract metadata from file path
      - type: regex_parser
        id: extract-metadata-from-filepath
{{- if (.isWindows) }}
        regex: '^.*\\(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\\(?P<container_name>[^\._]+)\\(?P<run_id>\d+)\.log$'
{{- else }}
        regex:  '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<run_id>\d+)\.log$'
{{- end }}
        parse_from: attributes["log.file.path"]

      # Rename attributes
      - type: move
        id: move-attributes
        from: body.stream
        to: attributes["stream"]
      - type: move
        from: attributes.container_name
        to: attributes["k8s.container.name"]
      - type: move
        from: attributes.namespace
        to: attributes["k8s.namespace.name"]
      - type: move
        from: attributes.pod_name
        to: attributes["k8s.pod.name"]
      - type: remove
        field: attributes.run_id
      - type: move
        from: attributes.uid
        to: attributes["k8s.pod.uid"]
      - type: remove
        field: attributes["log.file.path"]
      - type: remove
        field: body.time
      - type: move
        from: body.log
        to: body
{{- else }}
    operators:
      - id: container-parser
        type: container
      - type: remove
        field: resource["k8s.container.restart_count"]
      - type: remove
        field: attributes["log.file.path"]
{{- end }}

{{- if .Values.otel.metrics.enabled }}
  receiver_creator/discovery:
    watch_observers:
      - k8s_observer
    receivers:
    {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled}}
      prometheus/discovery/http:
        {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"] != "https" && {{ .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        {{- else }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"] != "https"
        {{- end }}
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "http"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"] : "/metrics"`'
                honor_timestamps: false
                honor_labels: true
                static_configs:
                  - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"] : 9090`'

      prometheus/discovery/https:
        {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"] == "https" && {{ .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        {{- else }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && annotations["prometheus.io/scheme"] == "https"
        {{- end }}
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"] : "/metrics"`'
                honor_timestamps: false
                honor_labels: true
                authorization:
                  type: Bearer
                  credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                follow_redirects: true
                enable_http2: true
                static_configs:
                  - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"] : 9090`'


      {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.podMonitors }}
      {{- range $key, $rule :=.Values.otel.metrics.autodiscovery.prometheusEndpoints.podMonitors.rules }}
      {{- if and $rule.rule }}
      prometheus/discovery/{{ $key }}:
        rule: type == "pod" && {{ $rule.rule }}
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "http"
                scrape_interval: {{ quote $.Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: {{ $rule.metrics_path | default "/metrics" | quote }}
                honor_timestamps: false
                honor_labels: true
                static_configs:
                  - targets:
                    - '`endpoint`:{{ $rule.endpoint_port | default "9090" }}'
      {{- end }}
      {{- end }}
      {{- end }}
    {{- end }}

      {{- if .Values.otel.metrics.control_plane.controller_manager.enabled }}
      prometheus/controller-manager:
        rule: type == "pod" && labels[{{ quote $.Values.otel.metrics.control_plane.controller_manager.label_selector.key }}] == {{ quote $.Values.otel.metrics.control_plane.controller_manager.label_selector.value }}
        config:
          config:
            scrape_configs:
              - job_name: kubernetes-controller-manager
                scheme: {{ quote .Values.otel.metrics.control_plane.controller_manager.scheme }}
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: {{ quote .Values.otel.metrics.control_plane.controller_manager.metrics_path }}
                honor_timestamps: false
                honor_labels: true
                {{- if eq .Values.otel.metrics.control_plane.controller_manager.scheme "https" }}
                authorization:
                  type: Bearer
                  credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                follow_redirects: true
                enable_http2: true
                {{- end }}
                static_configs:
                  - targets:
                      - '`endpoint`:{{ .Values.otel.metrics.control_plane.controller_manager.port }}'
      {{- end }}

      {{- if and .Values.otel.metrics.control_plane.etcd.enabled (eq .Values.otel.metrics.control_plane.etcd.scrape_kind "pod") }}
      prometheus/etcd:
        rule: type == "pod" && labels[{{ quote .Values.otel.metrics.control_plane.etcd.label_selector.key }}] == {{ quote .Values.otel.metrics.control_plane.etcd.label_selector.value }}
        config:
          config:
            scrape_configs:
              - job_name: kubernetes-etcd
                scheme: {{ quote .Values.otel.metrics.control_plane.etcd.scheme }}
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: {{ quote .Values.otel.metrics.control_plane.etcd.metrics_path }}
                honor_timestamps: false
                honor_labels: true
                {{- if eq .Values.otel.metrics.control_plane.etcd.scheme "https" }}
                authorization:
                  type: Bearer
                  credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                follow_redirects: true
                enable_http2: true
                {{- end }}
                static_configs:
                  - targets:
                      - '`endpoint`:{{ .Values.otel.metrics.control_plane.etcd.port }}'
      {{- end }}
{{- end }}

{{- if and .Values.otel.metrics.enabled (not .Values.aws_fargate.enabled) }}
  receiver_creator/node:
    watch_observers:
      - k8s_observer
    receivers:
      prometheus/node:
        rule: type == "k8s.node"
        config:
          config:
            scrape_configs:
              - job_name: 'kubernetes-nodes-cadvisor'
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                scrape_timeout: 10s
                metrics_path: "/metrics/cadvisor"
                honor_timestamps: false
                honor_labels: true
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                static_configs:
                  - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
              - job_name: 'kubernetes-nodes'
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                scrape_timeout: 10s
                metrics_path: "/metrics"
                honor_timestamps: false
                honor_labels: true
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                static_configs:
                  - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
{{- end }}

service:
  extensions:
    - file_storage/checkpoints
{{- if .Values.otel.node_collector.sending_queue.persistent_storage.enabled }}
    - file_storage/sending_queue
{{- end}}
    - health_check
{{- if and .Values.otel.metrics.enabled (or (not .Values.aws_fargate.enabled) .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled) }}
    - k8s_observer
{{- end}}
  pipelines:
{{- if and .Values.otel.logs.enabled (or .Values.otel.logs.container (and (not .isWindows) .Values.otel.logs.journal))}}
{{- if .Values.otel.logs.container }}
    logs/container:
      exporters:
        - forward/logs-exporter
      processors:
        - memory_limiter
{{- if eq (include "isDeprecatedFilterSyntax" .Values.otel.logs.filter) "true" }}
        - filter/logs
{{- end }}
        - transform/syslogify
        - groupbyattrs/common-all
        - resource/container
        - k8sattributes
{{- if eq (include "isDeprecatedFilterSyntax" .Values.otel.logs.filter) "false" }}
{{- if (include "logsFilter" .) }}
        - filter/logs
{{- end }}
{{- end }}
      receivers:
        - filelog
{{- end }}
{{- if and (not .isWindows) .Values.otel.logs.journal }}
    logs/journal:
      exporters:
        - forward/logs-exporter
      processors:
        - memory_limiter
        - groupbyattrs/common-all
        - resource/journal
      receivers:
        - journald
{{- end }}

    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - transform/scope
        - batch/logs
      receivers:
        - forward/logs-exporter
{{- end }}

{{- if .Values.otel.metrics.enabled }}
    metrics/discovery:
      exporters:
        - forward/metric-exporter
      processors:
        - memory_limiter
{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter }}
        - filter/metrics-discovery
{{- end }}
{{- if .Values.otel.metrics.autodiscovery.prefix }}
        - metricstransform/rename/discovery
{{- end }}
{{- if ne .Values.otel.metrics.autodiscovery.prefix "k8s." }}
        - metricstransform/copy-required-metrics
{{- end }}
        - transform/istio-metrics
        - metricstransform/istio-metrics
        - cumulativetodelta/istio-metrics
        - deltatorate/istio-metrics
        - metricsgeneration/istio-metrics
{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
        - cumulativetodelta/discovery
        - deltatorate/discovery
{{- end }}
        - groupbyattrs/common-all
        - resource/all
      receivers:
        - receiver_creator/discovery
{{- end }}
{{- if and .Values.otel.metrics.enabled (not .Values.aws_fargate.enabled) }}
    metrics/node:
      exporters:
        - forward/metric-exporter
      processors:
        - memory_limiter
        - filter/receiver
        - filter/remove_internal
        - attributes/remove_prometheus_attributes
        - attributes/unify_node_attribute
        - transform/unify_node_attribute
        - metricstransform/rename
        - metricstransform/preprocessing
        - filter/remove_internal_postprocessing
        - attributes/remove_temp
        - cumulativetodelta/cadvisor
        - deltatorate/cadvisor
        - groupbyattrs/node
        - groupbyattrs/pod
        - groupbyattrs/all
        - resource/metrics
        - resource/all
      receivers:
        - receiver_creator/node
{{- end }}
{{- if and .Values.otel.metrics.enabled (or (not .Values.aws_fargate.enabled) .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled) }}
    metrics:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - filter/histograms
        - k8sattributes
{{- if .Values.otel.metrics.filter }}
        - filter/metrics
{{- end }}
        - filter/remove_temporary_metrics
        - transform/scope
        - batch/metrics
      receivers:
        - forward/metric-exporter
{{- end }}
  telemetry:
{{- if .Values.otel.logs.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.logs.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.logs.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.logs.telemetry.metrics.address }}
{{- end }}
