exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
      "swi-reporter": "k8s-monitoring swo-k8s-collector/{{ .Chart.Version }}"
    retry_on_failure:
      enabled: {{ .Values.aws_fargate.metrics.autodiscovery.retry_on_failure.enabled }}
      initial_interval: {{ .Values.aws_fargate.metrics.autodiscovery.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.aws_fargate.metrics.autodiscovery.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.aws_fargate.metrics.autodiscovery.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.aws_fargate.metrics.autodiscovery.sending_queue.enabled }}
      num_consumers: {{ .Values.aws_fargate.metrics.autodiscovery.sending_queue.num_consumers }}
      queue_size: {{ .Values.aws_fargate.metrics.autodiscovery.sending_queue.queue_size }}
{{- if .Values.aws_fargate.metrics.autodiscovery.sending_queue.offload_to_disk }}
      storage: file_storage/sending_queue
{{- end }}
    timeout: {{ .Values.aws_fargate.metrics.autodiscovery.timeout }}
extensions:
{{- if .Values.aws_fargate.metrics.autodiscovery.sending_queue.offload_to_disk }}
  file_storage/sending_queue:
    directory: /var/lib/swo/sending_queue
    fsync: true
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133
  k8s_observer:
    auth_type: serviceAccount
    observe_pods: true
{{- if .Values.diagnostics.profiling.enabled }}
  pprof:
    endpoint: localhost:{{ .Values.diagnostics.profiling.port }}
{{- end }}

processors:
  k8sattributes:
{{ include "common.k8s-instrumentation" . | indent 4 }}

  memory_limiter:
{{ toYaml .Values.aws_fargate.metrics.autodiscovery.memory_limiter | indent 4 }}

  transform/scope:
    metric_statements:
      - statements:
        - set(scope.name, "")
        - set(scope.version, "")
 
  groupbyattrs/common-all:
    keys:
      - k8s.container.name
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.pod.uid
      - k8s.node.name
      - host.name
      - service.name
  
  resource/all:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert
 

{{- if .Values.otel.metrics.filter }}
  filter/metrics:
    metrics:
{{ toYaml .Values.otel.metrics.filter | indent 6 }}
{{- end }}

{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
  filter/namespaces:
    metrics:
      metric:
{{- include "namespacesFilter" . | nindent 8 }}      
{{- end }}

  batch/metrics:
{{ toYaml .Values.aws_fargate.metrics.autodiscovery.batch | indent 4 }}

{{- include "common-config.filter-remove-temporary-metrics" . | nindent 2 }}

{{- if .Values.otel.metrics.filter_histograms }}
  filter/histograms:
    metrics:
      metric:
        - 'type == METRIC_DATA_TYPE_HISTOGRAM and not(name == "k8s.rest_client_request_duration_seconds" or name == "k8s.workqueue_queue_duration_seconds")'
{{- end }}

{{ include "common-discovery-config.processors" . | indent 2 }}

connectors:
  forward/metric-exporter: {}

{{ include "common-discovery-config.connectors" . | indent 2 }}

receivers:
  receiver_creator/discovery:
    watch_observers:
      - k8s_observer
    receivers:
      prometheus/discovery/http:
        {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && labels["eks.amazonaws.com/fargate-profile"] != "" && annotations["prometheus.io/scheme"] != "https" && {{ .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        {{- else }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && labels["eks.amazonaws.com/fargate-profile"] != "" && annotations["prometheus.io/scheme"] != "https"
        {{- end }}
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "http"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"] : "/metrics"`'
                honor_timestamps: false
                honor_labels: true
{{ include "common.prometheus.relabelconfigs" . | indent 16 }}
                static_configs:
                  - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"] : 9090`'

      prometheus/discovery/https:
        {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && labels["eks.amazonaws.com/fargate-profile"] != "" && annotations["prometheus.io/scheme"] == "https" && {{ .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        {{- else }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && labels["eks.amazonaws.com/fargate-profile"] != "" && annotations["prometheus.io/scheme"] == "https"
        {{- end }}
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"] : "/metrics"`'
                honor_timestamps: false
                honor_labels: true
                authorization:
                  type: Bearer
                  credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                follow_redirects: true
                enable_http2: true
{{ include "common.prometheus.relabelconfigs" . | indent 16 }}
                static_configs:
                  - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"] : 9090`'

service:
  extensions:
{{- if .Values.aws_fargate.metrics.autodiscovery.sending_queue.offload_to_disk }}
    - file_storage/sending_queue
{{- end }}
    - health_check
    - k8s_observer
{{- if .Values.diagnostics.profiling.enabled }}
    - pprof
{{- end }}
  pipelines:

{{ include "common-discovery-config.pipelines" (tuple . "receiver_creator/discovery" "forward/metric-exporter") | indent 4 }}

    metrics:
      receivers:
        - forward/metric-exporter
      processors:
        - memory_limiter
{{- if .Values.otel.metrics.filter_histograms }}
        - filter/histograms
{{- end }}
        - k8sattributes
{{- if eq (include "isNamespacesFilterEnabled" .) "true" }}
        - filter/namespaces
{{- end }}             
{{- if .Values.otel.metrics.filter }}
        - filter/metrics
{{- end }}
        - filter/remove_temporary_metrics
        - transform/scope
        - batch/metrics
      exporters:
        - otlp
    
  telemetry:
{{- if .Values.aws_fargate.metrics.autodiscovery.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.aws_fargate.metrics.autodiscovery.telemetry.logs.level }}
{{- end }}
{{- if .Values.aws_fargate.metrics.autodiscovery.telemetry.metrics.enabled }}
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: {{ (split ":" .Values.aws_fargate.metrics.autodiscovery.telemetry.metrics.address)._0 | quote }}
                port: {{ (split ":" .Values.aws_fargate.metrics.autodiscovery.telemetry.metrics.address)._1 }}
{{- end }}
