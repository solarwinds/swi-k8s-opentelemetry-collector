{{- if .Values.otel.metrics.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}-metrics
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "common.labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "common.fullname" . }}-metrics
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/metrics-collector-config-map.yaml") . | sha256sum }}
        checksum/config_common_env: {{ include (print $.Template.BasePath "/common-env-config-map.yaml") . | sha256sum }}
        checksum/config_env: {{ include (print $.Template.BasePath "/metrics-collector-env-config-map.yaml") . | sha256sum }}
        checksum/values: {{ toJson .Values | sha256sum }}
{{- if .Values.otel.metrics.telemetry.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ (split ":" .Values.otel.metrics.telemetry.metrics.address)._1 | quote }}
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
{{- end}}
      labels:
{{ include "common.template-labels" . | indent 8 }}
        app: {{ include "common.fullname" . }}-metrics
    spec:
      serviceAccountName: {{ include "common.fullname" . }}
      securityContext: {}
      {{- if or .Values.otel.metrics.prometheus_check .Values.otel.metrics.swi_endpoint_check }}
      initContainers:
        {{- if .Values.otel.metrics.prometheus_check }}
        - name: prometheus-check
          image: busybox
          command: ['sh', '-c', 'until $(wget --spider -nv $PROMETHEUS_URL/federate?); do echo waiting on prometheus; sleep 1; done']
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" . }}-metrics-env-config
        {{- end }}
        {{- if .Values.otel.metrics.swi_endpoint_check }}
        - name: otel-endpoint-check
          image: fullstorydev/grpcurl
          command: ['/bin/grpcurl', '-expand-headers',
                    '-proto', 'opentelemetry/proto/collector/logs/v1/logs_service.proto',
                    '-H', 'Authorization: Bearer ${SOLARWINDS_API_TOKEN}',
                    '-d', '{"resourceLogs":[{"resource":{"attributes":[{"key":"sw.k8s.cluster.uid","value":{"stringValue": "{{ .Values.cluster.uid }}"}}]},"scope_logs":{"log_records":[{"severityText":"INFO","body":{"stringValue":"otel-endpoint-check successful"}}]}}]}',
                    '{{ .Values.otel.endpoint }}', 'opentelemetry.proto.collector.logs.v1.LogsService.Export']
          volumeMounts:
            - mountPath: opentelemetry/proto/collector/logs/v1/logs_service.proto
              name: opentelemetry-collector-configmap
              subPath: logs_service.proto
              readOnly: true
            - mountPath: opentelemetry/proto/logs/v1/logs.proto
              name: opentelemetry-collector-configmap
              subPath: logs.proto
              readOnly: true
            - mountPath: opentelemetry/proto/common/v1/common.proto
              name: opentelemetry-collector-configmap
              subPath: common.proto
              readOnly: true
            - mountPath: opentelemetry/proto/resource/v1/resource.proto
              name: opentelemetry-collector-configmap
              subPath: resource.proto
              readOnly: true
          env:
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
        {{- end }}
      {{- end }}
      containers:
        - name: swi-opentelemetry-collector
          command:
            - /swi-otelcol
            - --config=/conf/relay.yaml
          securityContext: {}
          image: "{{ .Values.otel.image.repository }}:{{ .Values.otel.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.otel.image.pullPolicy }}
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
{{- if .Values.otel.metrics.telemetry.metrics.enabled }}
          ports:
            - name: http
              containerPort: {{ (split ":" .Values.otel.metrics.telemetry.metrics.address)._1 }}
              protocol: TCP
{{- end}}
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" . }}-common-env
            - configMapRef:
                name: {{ include "common.fullname" . }}-metrics-env-config
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
{{ toYaml .Values.otel.metrics.resources | indent 12 }}
          volumeMounts:
            - mountPath: /conf
              name: opentelemetry-collector-configmap
              readOnly: true
      volumes:
        - name: opentelemetry-collector-configmap
          configMap:
            name: {{ include "common.fullname" . }}-metrics-config
            items:
              - key: metrics.config
                path: relay.yaml
              - key: logs_service.proto
                path: logs_service.proto
              - key: logs.proto
                path: logs.proto
              - key: common.proto
                path: common.proto
              - key: resource.proto
                path: resource.proto                
{{- end}}