{{- if and (or .Values.otel.logs.enabled .Values.otel.metrics.enabled) .Values.otel.windows.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "common.fullname" (tuple . "-node-collector-windows") }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: swo-k8s-collector
{{ include "common.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.fullname" (tuple . "-node-collector-windows") }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: swo-k8s-collector
        app: {{ include "common.fullname" (tuple . "-node-collector-windows") }}
{{ include "common.labels" . | indent 8 }}
{{ include "common.pod-labels" . | indent 8 }}
      annotations:
        checksum/config: {{ tpl (.Files.Get "node-collector-config-map-windows.yaml") . | sha256sum }}
        checksum/config_common_env: {{ include (print $.Template.BasePath "/common-env-config-map.yaml") . | sha256sum }}
        checksum/values: {{ toJson .Values | sha256sum }}
{{- if .Values.otel.logs.telemetry.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ (split ":" .Values.otel.logs.telemetry.metrics.address)._1 | quote }}
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
{{- end}}
    spec:
      terminationGracePeriodSeconds: {{ .Values.otel.node_collector.terminationGracePeriodSeconds }}
      serviceAccountName: {{ include "common.fullname" . }}
      tolerations:
      {{- if .Values.otel.logs.tolerations }}
      {{ toYaml .Values.otel.logs.tolerations | nindent 8 }}
      {{- else }}
        - operator: Exists
          effect: NoSchedule
      {{- end }}
      affinity:
      {{- if .Values.otel.logs.affinity }}
      {{- toYaml .Values.otel.logs.affinity | nindent 8 }}
      {{- else }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                - fargate
      {{- end }}
      nodeSelector:
      {{- if .Values.otel.logs.nodeSelector }}
      {{ toYaml .Values.otel.logs.nodeSelector | nindent 8 }}
      {{- end }}
        kubernetes.io/os: windows
        kubernetes.io/arch: amd64
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if include "isSwiEndpointCheckEnabled" . }}
      initContainers:
        - name: otel-endpoint-check
          image: "{{ include "common.image" (tuple . .Values.otel.windows (tuple "image" "image_windows") "otel.windows.image" nil .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.otel.image.pullPolicy }}
          command:
            - c:\swi-otelcol.exe
            - test-connection
            - --endpoint=$(OTEL_ENVOY_ADDRESS)
            - --apitoken=$(SOLARWINDS_API_TOKEN)
            - --clusteruid=$(CLUSTER_UID)
            - --insecure=$(OTEL_ENVOY_ADDRESS_TLS_INSECURE)
          env:
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "common.secret" . }}
                  key: SOLARWINDS_API_TOKEN
                  optional: true
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" (tuple . "-common-env") }}
      {{- end }}
      containers:
        - name: swi-opentelemetry-collector
          image: "{{ include "common.image" (tuple . .Values.otel.windows (tuple "image" "image_windows") "otel.windows.image" nil .Chart.AppVersion ) }}"
          imagePullPolicy: {{ .Values.otel.windows.image.pullPolicy }}
          securityContext:
            windowsOptions:
              runAsUserName: ContainerAdministrator
          command:
            - c:\wrapper.exe
            - c:\swi-otelcol.exe
            - --config=c:\conf\relay.yaml
            - --feature-gates=filelog.container.removeOriginalTimeField
          env:
            - name: CHECKPOINT_DIR
              value: c:{{ .Values.otel.logs.filestorage.directory }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "common.secret" . }}
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
          envFrom:
            - configMapRef:
                name: {{ include "common.fullname" (tuple . "-common-env") }}
{{- if .Values.otel.logs.telemetry.metrics.enabled }}
          ports:
            - name: http
              containerPort: {{ (split ":" .Values.otel.logs.telemetry.metrics.address)._1 }}
              protocol: TCP
{{- end}}
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
{{ toYaml .Values.otel.logs.resources | indent 12 }}
          volumeMounts:
            - mountPath: c:\var\log\pods
              name: varlogpods
              readOnly: true
            - mountPath: c:\var\log\containers
              name: varlogcontainers
              readOnly: true
            - mountPath: c:\var\lib\docker\containers
              name: varlibdockercontainers
              readOnly: true
            - mountPath: c:\conf
              name: opentelemetry-collector-configmap
              readOnly: true
            - name: logcheckpoints
              mountPath: c:{{ .Values.otel.logs.filestorage.directory }}
{{- if .Values.otel.node_collector.sending_queue.persistent_storage.enabled }}
            - name: sending-queue
              mountPath: c:{{ .Values.otel.node_collector.sending_queue.persistent_storage.directory }}
{{- end }}
      volumes:
        - name: varlogpods
          hostPath:
            path: c:\var\log\pods
        - name: varlogcontainers
          hostPath:
            path: c:\var\log\containers
        - name: varlibdockercontainers
          hostPath:
            path: c:\var\lib\docker\containers
        - name: logcheckpoints
          hostPath:
            path: c:{{ printf "%s/%s" .Values.otel.logs.filestorage.directory ((regexReplaceAll "[^a-zA-Z0-9_\\-]" (include "common.cluster-uid" .) "") | default (sha256sum (include "common.cluster-uid" .))) }}
            type: DirectoryOrCreate
        - name: opentelemetry-collector-configmap
          configMap:
            name: {{ include "common.fullname" (tuple . "-node-collector-config-windows") }}
            items:
              - key: logs.config
                path: relay.yaml
{{- if .Values.otel.node_collector.sending_queue.persistent_storage.enabled }}
        - name: sending-queue
          hostPath:
            path: c:{{ printf "%s/%s" .Values.otel.node_collector.sending_queue.persistent_storage.directory ((regexReplaceAll "[^a-zA-Z0-9_\\-]" (include "common.cluster-uid" .) "") | default (sha256sum (include "common.cluster-uid" .))) }}
            type: DirectoryOrCreate
{{- end }}
{{- end }}
