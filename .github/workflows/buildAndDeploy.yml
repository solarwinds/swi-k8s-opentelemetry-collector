name: Build and Deploy

on:
  push:
    branches: 
      - master
      - 'release/**'

  pull_request:
    branches: 
      - master
      - 'release/**'

  release:
    types: [published]

  workflow_dispatch:

env:
  DOCKERHUB_IMAGE: solarwinds/swi-opentelemetry-collector

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate-tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy skaffold
        uses: ./.github/actions/deploy-skaffold

      - name: Generate docker image tag
        id: generate-tag
        run: echo "::set-output name=value::v${{ github.run_number }}-$(git rev-parse --short HEAD)"

      - name: Build
        run: skaffold build --file-output=/tmp/tags.json --tag ${{ steps.generate-tag.outputs.value }}

      - name: Deploy kubernetes
        uses: ./.github/actions/deploy-kubernetes

      - name: Deploy services using Skaffold
        run: skaffold deploy --build-artifacts=/tmp/tags.json

      - name: Tail Otel mock metrics for 60 seconds
        run: |
          mkdir -p OtelLogs
          kubetail timeseries-mock-service --namespace monitoring > OtelLogs/metrics.log &
          sleep 60

      - name: Tail Otel mock events for 60 seconds
        run: |
          kubectl run dummy --image ubuntu -- /bin/bash -ec "while :; do echo '.'; sleep 5 ; done"
          mkdir -p OtelLogs
          kubetail timeseries-mock-service --namespace monitoring > OtelLogs/events.log &
          sleep 60

      - name: Tail Otel mock logs for 60 seconds
        run: |
          mkdir -p OtelLogs
          kubetail timeseries-logs-mock-service --namespace monitoring > OtelLogs/logs.log &
          sleep 60

      # Delete resources and wait some time for its termination
      - name: Destroy environment
        run: | 
          skaffold delete
          sleep 20

      - name: Evaluate metrics collection functionality
        run: |
          if grep -q "k8s.kube_pod_info" "OtelLogs/metrics.log"; then
            echo "Expected metrics found"
          else
            echo "Metrics are missing"
            exit 1
          fi
      
      - name: Evaluate events collection functionality
        run: |
          if grep -q "k8s.event." "OtelLogs/events.log"; then
            echo "Expected events found"
          else
            echo "Events are missing"
            exit 1
          fi

      - name: Evaluate logs collection functionality
        run: |
          if grep -q "#logs" "OtelLogs/logs.log"; then
            echo "Some logs found"
          else
            echo "Logs are missing"
            exit 1
          fi

      - name: Capture Otel logs
        uses: actions/upload-artifact@v2
        if: failure() && hashFiles('OtelLogs') != '' # test existance of some report in `OtelLogs` folder
        with:
          name: OtelLogs
          path: OtelLogs/
          retention-days: 30

      - name: Save image
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          docker save --output swi-k8s-opentelemetry-collector.tar swi-k8s-opentelemetry-collector:${{ steps.generate-tag.outputs.value }}

      - uses: actions/upload-artifact@v3
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          name: image
          path: swi-k8s-opentelemetry-collector.tar
          retention-days: 2

  deploy_dockerhub:
    runs-on: ubuntu-latest
    needs: build_and_test
    name: Deploy to docker hub
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://hub.docker.com/repository/docker/solarwinds/swi-opentelemetry-collector
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: image
      
      - name: Get image tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Load image
        run: |
          docker load --input swi-k8s-opentelemetry-collector.tar

      - name: Tag images
        run: |
          docker tag swi-k8s-opentelemetry-collector:${{ needs.build_and_test.outputs.image_tag }} ${{ env.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.tag }}
          docker tag swi-k8s-opentelemetry-collector:${{ needs.build_and_test.outputs.image_tag }} ${{ env.DOCKERHUB_IMAGE }}:latest

      - name: Docker login
        env:
          DOCKER_HUB_CI_PASSWORD: ${{ secrets.DOCKER_HUB_CI_PASSWORD }}
          DOCKER_HUB_CI_USER: ${{ secrets.DOCKER_HUB_CI_USER }}
        run: echo "$DOCKER_HUB_CI_PASSWORD" | docker login -u "$DOCKER_HUB_CI_USER" --password-stdin

      - name: Push as specific
        run: docker push ${{ env.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.tag }}

      # Temporarily disabled
      # - name: Push as latest
      #   run: docker push ${{ env.DOCKERHUB_IMAGE }}:latest
