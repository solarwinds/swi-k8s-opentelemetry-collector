name: Build and Deploy

on:
  push:
    branches: 
      - master
      - release/**

  pull_request:
    branches: 
      - master
      - release/**

  release:
    types: [published]

  workflow_dispatch:

env:
  DOCKERHUB_IMAGE: solarwinds/swi-opentelemetry-collector

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate-tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy skaffold
        uses: ./.github/actions/deploy-skaffold

      - name: Generate docker image tag
        id: generate-tag
        run: echo "::set-output name=value::v${{ github.run_number }}-$(git rev-parse --short HEAD)"

      - name: Build
        run: skaffold build --file-output=/tmp/tags.json --tag ${{ steps.generate-tag.outputs.value }}

      - name: Test
        run: skaffold test --build-artifacts=/tmp/tags.json

      - name: Deploy kubernetes
        uses: ./.github/actions/deploy-kubernetes

      - name: Deploy services using Skaffold
        run: skaffold deploy --build-artifacts=/tmp/tags.json

      - name: Run integration tests
        uses: ./.github/actions/run-integration-tests

      - name: Save image
        if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.ref, 'swo-k8s-collector')
        run: |
          docker save --output swi-k8s-opentelemetry-collector.tar swi-k8s-opentelemetry-collector:${{ steps.generate-tag.outputs.value }}

      - uses: actions/upload-artifact@v3
        if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.ref, 'swo-k8s-collector')
        with:
          name: image
          path: swi-k8s-opentelemetry-collector.tar
          retention-days: 2

  # Verify whether Helm chart works with image published in DockerHub
  helm_e2e:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate-tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy skaffold
        uses: ./.github/actions/deploy-skaffold

      - name: Deploy kubernetes
        uses: ./.github/actions/deploy-kubernetes

      - name: Build
        run: skaffold build -p=ci-helm-e2e --file-output=/tmp/tags.json

      - name: Deploy services using Skaffold
        run: skaffold deploy -p=ci-helm-e2e --build-artifacts=/tmp/tags.json
      
      - name: Run integration tests
        uses: ./.github/actions/run-integration-tests


  helm_verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Lint helm
        run: helm lint deploy/helm

  deploy_dockerhub:
    runs-on: ubuntu-latest
    needs: build_and_test
    name: Deploy to docker hub
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.ref, 'swo-k8s-collector')
    environment:
      name: production
      url: https://hub.docker.com/repository/docker/solarwinds/swi-opentelemetry-collector
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: image

      - name: Get image tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Load image
        run: |
          docker load --input swi-k8s-opentelemetry-collector.tar

      - name: Tag images
        run: |
          docker tag swi-k8s-opentelemetry-collector:${{ needs.build_and_test.outputs.image_tag }} ${{ env.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.tag }}
          docker tag swi-k8s-opentelemetry-collector:${{ needs.build_and_test.outputs.image_tag }} ${{ env.DOCKERHUB_IMAGE }}:latest

      - name: Docker login
        env:
          DOCKER_HUB_CI_PASSWORD: ${{ secrets.DOCKER_HUB_CI_PASSWORD }}
          DOCKER_HUB_CI_USER: ${{ secrets.DOCKER_HUB_CI_USER }}
        run: echo "$DOCKER_HUB_CI_PASSWORD" | docker login -u "$DOCKER_HUB_CI_USER" --password-stdin

      - name: Push as specific
        run: docker push ${{ env.DOCKERHUB_IMAGE }}:${{ steps.vars.outputs.tag }}

      # Temporarily disabled
      # - name: Push as latest
      #   run: docker push ${{ env.DOCKERHUB_IMAGE }}:latest
