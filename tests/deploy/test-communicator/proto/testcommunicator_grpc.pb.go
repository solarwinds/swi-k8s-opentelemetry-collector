// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: testcommunicator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestCommunicator_Health_FullMethodName     = "/testcommunicator.TestCommunicator/Health"
	TestCommunicator_GetData_FullMethodName    = "/testcommunicator.TestCommunicator/GetData"
	TestCommunicator_CallTarget_FullMethodName = "/testcommunicator.TestCommunicator/CallTarget"
)

// TestCommunicatorClient is the client API for TestCommunicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestCommunicatorClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	CallTarget(ctx context.Context, in *TargetRequest, opts ...grpc.CallOption) (*TargetResponse, error)
}

type testCommunicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewTestCommunicatorClient(cc grpc.ClientConnInterface) TestCommunicatorClient {
	return &testCommunicatorClient{cc}
}

func (c *testCommunicatorClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, TestCommunicator_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCommunicatorClient) GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, TestCommunicator_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCommunicatorClient) CallTarget(ctx context.Context, in *TargetRequest, opts ...grpc.CallOption) (*TargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TargetResponse)
	err := c.cc.Invoke(ctx, TestCommunicator_CallTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCommunicatorServer is the server API for TestCommunicator service.
// All implementations must embed UnimplementedTestCommunicatorServer
// for forward compatibility.
type TestCommunicatorServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	GetData(context.Context, *DataRequest) (*DataResponse, error)
	CallTarget(context.Context, *TargetRequest) (*TargetResponse, error)
	mustEmbedUnimplementedTestCommunicatorServer()
}

// UnimplementedTestCommunicatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestCommunicatorServer struct{}

func (UnimplementedTestCommunicatorServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedTestCommunicatorServer) GetData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedTestCommunicatorServer) CallTarget(context.Context, *TargetRequest) (*TargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTarget not implemented")
}
func (UnimplementedTestCommunicatorServer) mustEmbedUnimplementedTestCommunicatorServer() {}
func (UnimplementedTestCommunicatorServer) testEmbeddedByValue()                          {}

// UnsafeTestCommunicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestCommunicatorServer will
// result in compilation errors.
type UnsafeTestCommunicatorServer interface {
	mustEmbedUnimplementedTestCommunicatorServer()
}

func RegisterTestCommunicatorServer(s grpc.ServiceRegistrar, srv TestCommunicatorServer) {
	// If the following call pancis, it indicates UnimplementedTestCommunicatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestCommunicator_ServiceDesc, srv)
}

func _TestCommunicator_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCommunicatorServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCommunicator_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCommunicatorServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCommunicator_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCommunicatorServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCommunicator_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCommunicatorServer).GetData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCommunicator_CallTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCommunicatorServer).CallTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCommunicator_CallTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCommunicatorServer).CallTarget(ctx, req.(*TargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestCommunicator_ServiceDesc is the grpc.ServiceDesc for TestCommunicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestCommunicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testcommunicator.TestCommunicator",
	HandlerType: (*TestCommunicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _TestCommunicator_Health_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _TestCommunicator_GetData_Handler,
		},
		{
			MethodName: "CallTarget",
			Handler:    _TestCommunicator_CallTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testcommunicator.proto",
}
