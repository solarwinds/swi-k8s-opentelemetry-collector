---
apiVersion: v1
kind: ConfigMap
metadata:
  name: swi-opentelemetry-collector-endpoint-mock
  labels:
    app.kubernetes.io/name: swi-opentelemetry-collector-endpoint-mock
    app.kubernetes.io/instance: swi-opentelemetry-collector-endpoint-mock
data:
  relay: |
    exporters:
      file/logs:
        path: /data/logs.json
        # empty rotation - workaround for https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/18251
        rotation:
      file/metrics:
        path: /data/metrics.json
        # empty rotation - workaround for https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/18251
        rotation:
      file/events:
        path: /data/events.json
        # empty rotation - workaround for https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/18251
        rotation:
      prometheus:
        endpoint: "0.0.0.0:8080"
        namespace: output
        send_timestamps: true
        metric_expiration: 1m
        enable_open_metrics: true
        resource_to_telemetry_conversion:
          enabled: true
    extensions:
      health_check: {}
      memory_ballast:
        size_mib: "204"
    processors:
      filter/events_in:
        logs: 
          include:
            match_type: strict
            resource_attributes:
              - key: sw.k8s.log.type
                value: event
      filter/events_out:
        logs: 
          exclude:
            match_type: strict
            resource_attributes:
              - key: sw.k8s.log.type
                value: event
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:9082
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        metrics:
          exporters:
          - file/metrics
          - prometheus
          processors:
          receivers:
          - otlp
        logs/logs:
          exporters:
          - file/logs
          processors:
          - filter/events_out
          receivers:
          - otlp
        logs/events:
          exporters:
          - file/events
          processors:
          - filter/events_in
          receivers:
          - otlp
---
apiVersion: v1
kind: Service
metadata:
  name: timeseries-mock-service
spec:
  selector:
    app: timeseries-mock-service
  ports:
    - protocol: TCP
      port: 9082
      targetPort: 9082
      name: grpc
    - protocol: TCP
      port: 8088
      targetPort: 80
      name: html
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timeseries-mock-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timeseries-mock-service
  template:
    metadata:
      labels:
        app: timeseries-mock-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      securityContext:
        runAsUser: 0
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
      containers:
        - name: opentelemetry-collector
          command:
            - /otelcol-contrib
            - --config=/conf/relay.yaml
          securityContext:
            runAsUser: 0
          image: "otel/opentelemetry-collector-contrib:0.81.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: otlp
              containerPort: 9082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          volumeMounts:
            - mountPath: /conf
              name: opentelemetry-collector-configmap
            - name: output
              mountPath: /data
        - name: file-provider
          image: nginx:alpine
          command: ['sh', '-c', 'touch /usr/share/nginx/html/events.json && touch /usr/share/nginx/html/metrics.json && touch /usr/share/nginx/html/logs.json && chmod -R 777 /usr/share/nginx/html && nginx -g "daemon off;"']
          securityContext:
            runAsUser: 0
          volumeMounts:
          - name: output
            mountPath: /usr/share/nginx/html
          ports:
          - containerPort: 80
      volumes:
        - name: opentelemetry-collector-configmap
          configMap:
            name: swi-opentelemetry-collector-endpoint-mock
            items:
              - key: relay
                path: relay.yaml
        - name: output
          emptyDir: {}
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: wiremock
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: wiremock
#   template:
#     metadata:
#       labels:
#         app: wiremock
#     spec:
#       containers:
#         - name: wiremock
#           image: wiremock
#           args:
#             - --verbose
#           ports:
#             - containerPort: 8080
#           env:
#             - name: JAVA_OPTS
#               value: "-Dwiremock.containerization=kubernetes -Dwiremock.extensions.containerization.replicas=1"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: wiremock
# spec:
#   selector:
#     app: wiremock
#   ports:
#     - name: wiremock
#       port: 8080
#       targetPort: 8080


